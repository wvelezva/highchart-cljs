{"version":3,"sources":["zprint/zutil.cljc"],"mappings":"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","names":["zprint.zutil/down*","clojure.zip/down","zprint.zutil/up*","clojure.zip/up","zprint.zutil/right*","clojure.zip/right","zprint.zutil/left*","clojure.zip/left","zprint.zutil/next*","clojure.zip/next","zprint.zutil/prev*","clojure.zip/prev","zprint.zutil/replace*","clojure.zip/replace","zprint.zutil/edn*","rewrite-clj.zip.base/edn*","zprint.zutil/sexpr","rewrite-clj.zip.base/sexpr","zprint.zutil/string","rewrite-clj.zip.base/string","zprint.zutil/tag","rewrite-clj.zip.base/tag","zprint.zutil/skip","rewrite-clj.zip.whitespace/skip","zprint.zutil/skip-whitespace","rewrite-clj.zip.whitespace/skip-whitespace","zprint.zutil/whitespace?","rewrite-clj.zip.whitespace/whitespace?","zprint.zutil/whitespace-or-comment?","rewrite-clj.zip.whitespace/whitespace-or-comment?","zprint.zutil/length","rewrite-clj.zip.base/length","zprint.zutil/rightmost?","rewrite-clj.zip.move/rightmost?","zprint.zutil/zremove","rewrite-clj.zip.removez/remove","zprint.zutil/zreplace","rewrite-clj.zip.editz/replace","zprint.zutil/zfocus","zloc","floc","vec__50168","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","zpath","zprint.zutil/find-root-and-path","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","zprint.zutil/zfocus-style","style","zprint.zutil/z-coll?","rewrite-clj.zip/seq?","zprint.zutil/zuneval?","zprint.zutil/zmeta?","zprint.zutil/zquote?","zprint.zutil/zreader-macro?","zprint.zutil/ztag","zprint.zutil/zcomment?","zprint.zutil/znewline?","zprint.zutil/znumstr","zprint.zutil/zfirst","nloc","zprint.zutil/zfirst-no-comment","zprint.zutil/zsecond","temp__5733__auto__","first-loc","zprint.zutil/zthird","G__50207","zprint.zutil/zfourth","G__50215","zprint.zutil/zrightnws","zprint.zutil/zrightmost","ploc","cljs.core/not","zprint.zutil/zleftnws","zprint.zutil/zleftmost","zprint.zutil/znextnws","rewrite-clj.zip/end?","zprint.zutil/zprevnws","zprint.zutil/znthnext","n","G__50259","i","zprint.zutil/zfind","zthing?","G__50265","zprint.zutil/zmap-w-nl","zfn","out","result","and__4174__auto__","rewrite-clj.zip/tag","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","zprint.zutil/zmap","zprint.zutil/zmap-all","zprint.zutil/zmap-right","zprint.zutil/zseqnws","cljs.core/identity","zprint.zutil/zremove-right","G__50414","zprint.zutil/ztake-append","end-struct","index","G__50424","xloc","zprint.zutil/zcount","cljs.core/count","left","cljs.core/cons","zprint.zutil/find-root-and-path-nw","zprint.zutil/find-root","rewrite-clj.zip/up","zprint.zutil/move-down-and-right","right-count","remaining-right","zprint.zutil/follow-path","path-vec","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","zprint.zutil/zanonfn?","zprint.zutil/zlast","zprint.zutil/zsexpr?","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__50462","rewrite-clj.node/printable-only?","rewrite-clj.zip/node","zprint.zutil/zkeyword?","clojure.string/starts-with?","rewrite-clj.zip/string","zprint.zutil/zsymbol?","cljs.core/Symbol","zprint.zutil/znil?","rewrite-clj.zip/sexpr","zprint.zutil/zreader-cond-w-symbol?","element","rewrite-clj.zip/down","G__50470","rewrite-clj.zip/right","zprint.zutil/zreader-cond-w-coll?","G__50474","zprint.zutil/zdotdotdot","G__50475","rewrite-clj.parser/parse-string","zprint.zutil/zconstant?","ztag","G__50489","or__4185__auto__","sexpr","zprint.zutil/zinlinecomment?","spaces","tnloc","zprint.zutil/find-doc-in-map","G__50510","G__50515","zprint.zutil/find-docstring","fn-name","G__50516","docloc","G__50517","G__50518","maploc","G__50519","G__50520","rewrite-clj.zip/map?","zprint.zutil/add-spec-to-docstring","spec-str","doc-zloc","new-doc-zloc","G__50522","G__50523","G__50524","G__50525","G__50527","rewrite-clj.zip/root","zprint.zutil/zlift-ns","pair-seq","strip-ns","named","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","ns","vec__50540","seq__50541","cljs.core/seq","first__50542","cljs.core/first","cljs.core/next","k","rest-of-pair","pair","current-ns","cljs.core/namespace","G__50551","G__50552","rewrite-clj.node/token-node","G__50553","G__50554","zprint.zutil/zredef-call","body-fn","zstring-orig-val__50558","znumstr-orig-val__50559","zbyte-array?-orig-val__50560","zcomment?-orig-val__50561","zsexpr-orig-val__50562","zseqnws-orig-val__50563","zmap-right-orig-val__50564","zfocus-style-orig-val__50565","zfirst-orig-val__50566","zfirst-no-comment-orig-val__50567","zsecond-orig-val__50568","zthird-orig-val__50569","zfourth-orig-val__50570","znthnext-orig-val__50571","zcount-orig-val__50572","zmap-orig-val__50573","zmap-w-nl-orig-val__50574","zanonfn?-orig-val__50575","zfn-obj?-orig-val__50576","zfocus-orig-val__50577","zfind-path-orig-val__50578","zwhitespace?-orig-val__50579","zlist?-orig-val__50580","zvector?-orig-val__50581","zmap?-orig-val__50582","zset?-orig-val__50583","zcoll?-orig-val__50584","zuneval?-orig-val__50585","zmeta?-orig-val__50586","ztag-orig-val__50587","zlast-orig-val__50588","zarray?-orig-val__50589","zatom?-orig-val__50590","zderef-orig-val__50591","zrecord?-orig-val__50592","zns?-orig-val__50593","zobj-to-vec-orig-val__50594","zexpandarray-orig-val__50595","znewline?-orig-val__50596","zwhitespaceorcomment?-orig-val__50597","zmap-all-orig-val__50598","zpromise?-orig-val__50599","zfuture?-orig-val__50600","zdelay?-orig-val__50601","zkeyword?-orig-val__50602","zconstant?-orig-val__50603","zagent?-orig-val__50604","zreader-macro?-orig-val__50605","zarray-to-shift-seq-orig-val__50606","zdotdotdot-orig-val__50607","zsymbol?-orig-val__50608","znil?-orig-val__50609","zreader-cond-w-symbol?-orig-val__50610","zreader-cond-w-coll?-orig-val__50611","zlift-ns-orig-val__50612","zinlinecomment?-orig-val__50613","zfind-orig-val__50614","ztake-append-orig-val__50615","zstring-temp-val__50616","znumstr-temp-val__50617","zbyte-array?-temp-val__50618","zcomment?-temp-val__50619","zsexpr-temp-val__50620","zseqnws-temp-val__50621","zmap-right-temp-val__50622","zfocus-style-temp-val__50623","zfirst-temp-val__50624","zfirst-no-comment-temp-val__50625","zsecond-temp-val__50626","zthird-temp-val__50627","zfourth-temp-val__50628","znthnext-temp-val__50629","zcount-temp-val__50630","zmap-temp-val__50631","zmap-w-nl-temp-val__50632","zanonfn?-temp-val__50633","zfn-obj?-temp-val__50634","zfocus-temp-val__50635","zfind-path-temp-val__50636","zwhitespace?-temp-val__50637","zlist?-temp-val__50638","zvector?-temp-val__50639","zmap?-temp-val__50640","zset?-temp-val__50641","zcoll?-temp-val__50642","zuneval?-temp-val__50643","zmeta?-temp-val__50644","ztag-temp-val__50645","zlast-temp-val__50646","zarray?-temp-val__50647","zatom?-temp-val__50648","zderef-temp-val__50649","zrecord?-temp-val__50650","zns?-temp-val__50651","zobj-to-vec-temp-val__50652","zexpandarray-temp-val__50653","znewline?-temp-val__50654","zwhitespaceorcomment?-temp-val__50655","zmap-all-temp-val__50656","zpromise?-temp-val__50657","zfuture?-temp-val__50658","zdelay?-temp-val__50659","zkeyword?-temp-val__50660","zconstant?-temp-val__50661","zagent?-temp-val__50662","zreader-macro?-temp-val__50663","zarray-to-shift-seq-temp-val__50664","zdotdotdot-temp-val__50665","zsymbol?-temp-val__50666","znil?-temp-val__50667","zreader-cond-w-symbol?-temp-val__50668","zreader-cond-w-coll?-temp-val__50669","zlift-ns-temp-val__50670","zinlinecomment?-temp-val__50671","zfind-temp-val__50672","ztake-append-temp-val__50673","zprint.zfns/zstring","zprint.zfns/znumstr","zprint.zfns/zbyte-array?","cljs.core/constantly","zprint.zfns/zcomment?","zprint.zfns/zsexpr","zprint.zfns/zseqnws","zprint.zfns/zmap-right","zprint.zfns/zfocus-style","zprint.zfns/zfirst","zprint.zfns/zfirst-no-comment","zprint.zfns/zsecond","zprint.zfns/zthird","zprint.zfns/zfourth","zprint.zfns/znthnext","zprint.zfns/zcount","zprint.zfns/zmap","zprint.zfns/zmap-w-nl","zprint.zfns/zanonfn?","zprint.zfns/zfn-obj?","zprint.zfns/zfocus","zprint.zfns/zfind-path","zprint.zfns/zwhitespace?","zprint.zfns/zlist?","rewrite-clj.zip/list?","zprint.zfns/zvector?","rewrite-clj.zip/vector?","zprint.zfns/zmap?","zprint.zfns/zset?","rewrite-clj.zip/set?","zprint.zfns/zcoll?","zprint.zfns/zuneval?","zprint.zfns/zmeta?","zprint.zfns/ztag","zprint.zfns/zlast","zprint.zfns/zarray?","zprint.zfns/zatom?","zprint.zfns/zderef","zprint.zfns/zrecord?","zprint.zfns/zns?","zprint.zfns/zobj-to-vec","zprint.zfns/zexpandarray","zprint.zfns/znewline?","zprint.zfns/zwhitespaceorcomment?","zprint.zfns/zmap-all","zprint.zfns/zpromise?","zprint.zfns/zfuture?","zprint.zfns/zdelay?","zprint.zfns/zkeyword?","zprint.zfns/zconstant?","zprint.zfns/zagent?","zprint.zfns/zreader-macro?","zprint.zfns/zarray-to-shift-seq","zprint.zfns/zdotdotdot","zprint.zfns/zsymbol?","zprint.zfns/znil?","zprint.zfns/zreader-cond-w-symbol?","zprint.zfns/zreader-cond-w-coll?","zprint.zfns/zlift-ns","zprint.zfns/zinlinecomment?","zprint.zfns/zfind","zprint.zfns/ztake-append"],"sourcesContent":["(ns ^:no-doc zprint.zutil\n  (:require\n    #?@(:clj [[zprint.macros :refer [do-redef-vars]]])\n    clojure.string\n    zprint.zfns\n    #?@(:clj [[zprint.redef]])\n    [rewrite-clj.parser :as p]\n    [rewrite-clj.node :as n]\n    [rewrite-clj.zip :as z]\n    #?@(:cljs [[rewrite-clj.zip.base :as zb] [rewrite-clj.zip.whitespace :as zw]\n               [rewrite-clj.zip.move :as zm] [rewrite-clj.zip.removez :as zr]\n               [rewrite-clj.zip.editz :as ze] clojure.zip])))\n\n;;\n;; # Zipper oriented style printers\n;;\n\n;;\n;; Note that both rewrite-clj and rewrite-cljs use the following namespaces:\n;;\n;; rewrite-clj.parse\n;; rewrite-clj.node\n;; rewrite-clj.zip\n;;\n;; and have many common routines.  So it is fine to use z/<fn> as long as\n;; that <fn> shows up in both libraries.\n;;\n\n;;\n;; ## clj and cljs compatibility routines\n;;\n;; ### Routines missing in :cljs since it uses clojure.zip\n;; \n\n(def down*\n  #?(:clj z/down*\n     :cljs clojure.zip/down))\n\n(def up*\n  #?(:clj z/up*\n     :cljs clojure.zip/up))\n\n(def right*\n  #?(:clj z/right*\n     :cljs clojure.zip/right))\n\n(def left*\n  #?(:clj z/left*\n     :cljs clojure.zip/left))\n\n(def next*\n  #?(:clj z/next*\n     :cljs clojure.zip/next))\n\n(def prev*\n  #?(:clj z/prev*\n     :cljs clojure.zip/prev))\n\n(def replace*\n  #?(:clj z/replace*\n     :cljs clojure.zip/replace))\n\n\n;;\n;; ### Routines with different namespaces\n;;\n\n(def edn*\n  #?(:clj z/edn*\n     :cljs zb/edn*))\n\n(def sexpr\n  #?(:clj z/sexpr\n     :cljs zb/sexpr))\n\n(def string\n  #?(:clj z/string\n     :cljs zb/string))\n\n(def tag\n  #?(:clj z/tag\n     :cljs zb/tag))\n\n(def skip\n  #?(:clj z/skip\n     :cljs zw/skip))\n\n(def skip-whitespace\n  #?(:clj z/skip-whitespace\n     :cljs zw/skip-whitespace))\n\n(def whitespace?\n  #?(:clj z/whitespace?\n     :cljs zw/whitespace?))\n\n(def whitespace-or-comment?\n  #?(:clj z/whitespace-or-comment?\n     :cljs zw/whitespace-or-comment?))\n\n(def length\n  #?(:clj z/length\n     :cljs zb/length))\n\n(def rightmost?\n  #?(:clj z/rightmost?\n     :cljs zm/rightmost?))\n\n; conflicts with clojure.core:\n\n(def zremove\n  #?(:clj z/remove\n     :cljs zr/remove))\n\n(def zreplace\n  #?(:clj z/replace\n     :cljs ze/replace))\n\n;;\n;; Check to see if we are at the focus by checking the\n;; path.\n;;\n\n(declare find-root-and-path)\n\n(defn zfocus\n  \"Is the zipper zloc equivalent to the path floc.  In this\n  case, floc isn't a zipper, but was turned into a path early on.\"\n  [zloc floc]\n  (let [[_ zpath] (find-root-and-path zloc)] (= zpath floc)))\n\n(defn zfocus-style\n  \"Take the various inputs and come up with a style.\"\n  [style zloc floc]\n  (let [style (if (= style :f) style (if (zfocus zloc floc) :f :b))] style))\n\n(defn z-coll? \"Is the zloc a collection?\" [zloc] (z/seq? zloc))\n\n(defn zuneval? \"Is this a #_(...)\" [zloc] (= (tag zloc) :uneval))\n\n(defn zmeta? \"Is this a ^{...}\" [zloc] (= (tag zloc) :meta))\n\n(defn zquote?\n  \"Is this a '(...) or '[ ... ] or some other quote?\"\n  [zloc]\n  (= (tag zloc) :quote))\n\n(defn zreader-macro? \"Is this a @...\" [zloc] (= (tag zloc) :reader-macro))\n\n(defn ztag \"Return the tag for this zloc\" [zloc] (tag zloc))\n\n(defn zcomment?\n  \"Returns true if this is a comment.\"\n  [zloc]\n  (when zloc (= (tag zloc) :comment)))\n\n(defn znewline?\n  \"Returns true if this is a newline.\"\n  [zloc]\n  (when zloc (= (tag zloc) :newline)))\n\n(defn znumstr\n  \"Does z/string, but takes an additional argument for hex conversion.\n  Hex conversion is not implemented for zippers, though, because at present\n  it is only used for byte-arrays, which don't really show up here.\"\n  [zloc _ _]\n  (string zloc))\n\n(defn zfirst\n  \"Find the first non-whitespace zloc inside of this zloc, or\n  the first whitespace zloc that is the focus.\"\n  [zloc]\n  (let [nloc (down* zloc)] (if nloc (skip right* whitespace? nloc))))\n\n(defn zfirst-no-comment\n  \"Find the first non-whitespace and non-comment zloc inside of this zloc.\"\n  [zloc]\n  (let [nloc (down* zloc)] (if nloc (skip right* whitespace-or-comment? nloc))))\n\n(defn zsecond\n  \"Find the second non-whitespace zloc inside of this zloc.\"\n  [zloc]\n  (if-let [first-loc (zfirst zloc)]\n    (if-let [nloc (right* first-loc)] (skip right* whitespace? nloc))))\n\n(defn zthird\n  \"Find the third non-whitespace zloc inside of this zloc.\"\n  [zloc]\n  (some->> (zfirst zloc)\n           right*\n           (skip right* whitespace?)\n           right*\n           (skip right* whitespace?)))\n\n(defn zfourth\n  \"Find the fourth non-whitespace zloc inside of this zloc.\"\n  [zloc]\n  (some->> (zfirst zloc)\n           right*\n           (skip right* whitespace?)\n           right*\n           (skip right* whitespace?)\n           right*\n           (skip right* whitespace?)))\n\n(defn zrightnws\n  \"Find the next non-whitespace zloc inside of this zloc.\"\n  [zloc]\n  (if zloc (if-let [nloc (right* zloc)] (skip right* whitespace? nloc))))\n\n(defn zrightmost\n  \"Find the rightmost non-whitespace zloc at this level\"\n  [zloc]\n  (loop [nloc (zrightnws zloc)\n         ploc zloc]\n    (if-not nloc ploc (recur (zrightnws nloc) nloc))))\n\n(defn zleftnws\n  \"Find the next non-whitespace zloc inside of this zloc.\"\n  [zloc]\n  (if zloc (if-let [nloc (left* zloc)] (skip left* whitespace? nloc))))\n\n(defn zleftmost\n  \"Find the leftmost non-whitespace zloc at this level\"\n  [zloc]\n  (loop [nloc (zleftnws zloc)\n         ploc zloc]\n    (if-not nloc ploc (recur (zleftnws nloc) nloc))))\n\n(defn znextnws\n  \"Find the next non-whitespace zloc.\"\n  [zloc]\n  (if (z/end? zloc)\n    zloc\n    (if-let [nloc (next* zloc)] (skip next* whitespace? nloc))))\n\n(defn zprevnws\n  \"Find the next non-whitespace zloc.\"\n  [zloc]\n  (if-let [ploc (prev* zloc)] (skip prev* whitespace? ploc)))\n\n(defn znthnext\n  \"Find the nth non-whitespace zloc inside of this zloc.\"\n  [zloc n]\n  (loop [nloc (skip-whitespace (down* zloc))\n         i ^long n]\n    (if (or (nil? nloc) (= i 0)) nloc (recur (zrightnws nloc) (dec i)))))\n\n(defn zfind\n  \"Find the locations (counting from zero, and only counting non-whitespace\n  elements) of the first zthing?.  Return its index if it is found, nil if not.\"\n  [zthing? zloc]\n  (loop [nloc (skip-whitespace (down* zloc))\n         i 0]\n    (when (not (nil? nloc))\n      (if (zthing? nloc) i (recur (zrightnws nloc) (inc i))))))\n\n(defn zmap-w-nl\n  \"Return a vector containing the return of applying a function to \n  every non-whitespace zloc inside of zloc.\"\n  [zfn zloc]\n  (loop [nloc (down* zloc)\n         out []]\n    (if-not nloc\n      out\n      (recur (right* nloc)\n             (if-let [result (when (not (and (whitespace? nloc)\n                                             (not (= (z/tag nloc) :newline))))\n                               (zfn nloc))]\n               (conj out result)\n               out)))))\n\n(defn zmap\n  \"Return a vector containing the return of applying a function to \n  every non-whitespace zloc inside of zloc.\"\n  [zfn zloc]\n  (loop [nloc (down* zloc)\n         out []]\n    (if-not nloc\n      out\n      (recur (right* nloc)\n             (if-let [result (when (not (whitespace? nloc)) (zfn nloc))]\n               (conj out result)\n               out)))))\n\n(defn zmap-all\n  \"Return a vector containing the return of applying a function to \n  every zloc inside of zloc.\"\n  [zfn zloc]\n  (loop [nloc (down* zloc)\n         out []]\n    (if-not nloc out (recur (right* nloc) (conj out (zfn nloc))))))\n\n(defn zmap-right\n  \"Apply a function to every non-whitespace zloc to right of zloc.\"\n  [zfn zloc]\n  (loop [nloc (right* zloc)\n         out []]\n    (if-not nloc\n      out\n      (recur (right* nloc) (if (whitespace? nloc) out (conj out (zfn nloc)))))))\n\n(defn zseqnws\n  \"Return a seq of all of the non-whitespace children of zloc.\"\n  [zloc]\n  (zmap identity zloc))\n\n(defn zremove-right\n  \"Remove everything to the right of the current zloc. In other words,\n  make the current zloc the rightmost.\"\n  [zloc]\n  (loop [nloc zloc]\n    (if (rightmost? nloc) nloc (recur (zremove (right* nloc))))))\n\n(defn ztake-append\n  \"Considering the current zloc a collection, move down into it and\n  take n non-whitespace elements, dropping the rest.  Then append the\n  given element to the end, coercing it into a node/zloc.  Note, this \n  is not quite implemented that way, as it uses replace.\"\n  [n zloc end-struct]\n  (loop [nloc (down* zloc)\n         index 0]\n    (if (>= index n)\n      (up* (zremove-right (zreplace nloc end-struct)))\n      (let [xloc (right* nloc)]\n        (recur xloc (if (whitespace? xloc) index (inc index)))))))\n\n(defn zcount\n  \"How many non-whitespace children does zloc have?\"\n  [zloc]\n  (count (zseqnws zloc)))\n\n(defn find-root-and-path\n  \"Create a vector with the root as well as another vector\n  which contains the number of right moves after each down\n  down to find a particular zloc.  The right moves include\n  both whitespace and comments.\"\n  [zloc]\n  (if zloc\n    (loop [nloc zloc\n           left 0\n           out ()]\n      (if-not (left* nloc)\n        (if-not (up* nloc) [nloc out] (recur (up* nloc) 0 (cons left out)))\n        (recur (left* nloc) (inc left) out)))))\n\n(defn find-root-and-path-nw\n  \"Create a vector with the root as well as another vector\n  which contains the number of right moves after each down\n  down to find a particular zloc.  The right moves are\n  non-whitespace, but include comments.\"\n  [zloc]\n  (if zloc\n    (loop [nloc zloc\n           left 0\n           out ()]\n      (if-not (left* nloc)\n        (if-not (up* nloc) [nloc out] (recur (up* nloc) 0 (cons left out)))\n        (recur (left* nloc) (if (whitespace? nloc) left (inc left)) out)))))\n\n(defn find-root\n  \"Find the root from a zloc by doing lots of ups.\"\n  [zloc]\n  (loop [nloc zloc] (if-not (z/up nloc) nloc (recur (z/up nloc)))))\n\n(defn move-down-and-right\n  \"Move one down and then right a certain number of steps.\"\n  [zloc ^long right-count]\n  (loop [nloc (down* zloc)\n         remaining-right right-count]\n    (if (zero? remaining-right)\n      nloc\n      (recur (right* nloc) (dec remaining-right)))))\n\n(defn follow-path\n  \"Follow the path vector from the root and return the zloc\n  at this location.\"\n  [path-vec zloc]\n  (reduce move-down-and-right zloc path-vec))\n\n(defn zanonfn? \"Is this an anonymous fn?\" [zloc] (= (tag zloc) :fn))\n\n(defn zlast\n  \"Return the last non-whitespace (but possibly comment) element inside\n  of this zloc.\"\n  [zloc]\n  (let [nloc (down* zloc)] (when nloc (zrightmost nloc))))\n\n(defn zsexpr?\n  \"Returns true if this can be converted to an sexpr. Works around a bug\n  where n/printable-only? returns false for n/tag :fn, but z/sexpr fails\n  on something with n/tag :fn\"\n  [zloc]\n  (and zloc (not= :fn (tag zloc)) (not (n/printable-only? (z/node zloc)))))\n\n;\n; This doesn't work, because there are situations where (zsexpr? zloc)\n; will fail but it is still a keyword.\n;\n#_(defn zkeyword?-alt\n    \"Returns true if this is a keyword.\"\n    [zloc]\n    (and zloc (zsexpr? zloc) (keyword? (sexpr zloc))))\n\n(defn zkeyword?\n  \"Returns true if this is a keyword.\"\n  [zloc]\n  (and zloc (clojure.string/starts-with? (z/string zloc) \":\")))\n\n(defn zsymbol?\n  \"Returns true if this is a symbol.\"\n  [zloc]\n  (and zloc (zsexpr? zloc) (symbol? (sexpr zloc))))\n\n(defn znil?\n  \"Returns true if this is nil.\"\n  [zloc]\n  (and zloc (zsexpr? zloc) (nil? (z/sexpr zloc))))\n\n(defn zreader-cond-w-symbol?\n  \"Returns true if this is a reader-conditional with a symbol in \n  the first position (could be :clj or :cljs, whatever).\"\n  [zloc]\n  (let [result (when (zreader-macro? zloc)\n                 (let [element (z/down zloc)]\n                   (when (= (z/string element) \"?\")\n                     (let [element (z/down (z/right element))]\n                       (when (or (= (z/string element) \":clj\")\n                                 (= (z/string element) \":cljs\"))\n                         (zsymbol? (z/right element)))))))]\n    #_(println \"zreader-cond-w-symbol?:\" (z/string zloc) \"result:\" result)\n    result))\n\n(defn zreader-cond-w-coll?\n  \"Returns true if this is a reader-conditional with a collection in \n  the first position (could be :clj or :cljs, whatever).\"\n  [zloc]\n  (let [result (when (zreader-macro? zloc)\n                 (let [element (z/down zloc)]\n                   (when (= (z/string element) \"?\")\n                     (let [element (z/down (z/right element))]\n                       (when (or (= (z/string element) \":clj\")\n                                 (= (z/string element) \":cljs\"))\n                         (z-coll? (z/right element)))))))]\n    #_(println \"zreader-cond-w-coll?:\" (z/string zloc) \"result:\" result)\n    result))\n\n(defn zdotdotdot\n  \"Return a zloc that will turn into a string of three dots.\"\n  []\n  (edn* (p/parse-string \"...\")))\n\n(defn zconstant?\n  \"Returns true if this is a keyword, string, or number, in other words,\n  a constant.\"\n  [zloc]\n  #_(println \"zconstant?\" (z/string zloc))\n  (let [ztag (z/tag zloc)]\n    (if (or (= ztag :unquote) (= ztag :quote) (= ztag :syntax-quote))\n      (zconstant? (zfirst zloc))\n      (and (not (z-coll? zloc))\n           (or (zkeyword? zloc)\n               #_(println \"zconstant? - not keyword:\" (z/string zloc))\n               (when (zsexpr? zloc)\n                 #_(println \"zconstant?:\" (z/string zloc)\n                            \"\\n z-coll?\" (z-coll? zloc)\n                            \"z/tag:\" (z/tag zloc))\n                 (let [sexpr (sexpr zloc)]\n                   (or (string? sexpr)\n                       (number? sexpr)\n                       (= \"true\" (str sexpr))\n                       (= \"false\" (str sexpr))))))))))\n\n(defn zinlinecomment?\n  \"If this is an inline comment, returns the amount of space that\n  was between this and the previous element.  That means that if\n  we go left, we get something other than whitespace before a\n  newline.  Assumes zloc is a comment.\"\n  [zloc]\n  (loop [nloc (left* zloc)\n         spaces 0]\n    (let [tnloc (tag nloc)]\n      (cond (nil? tnloc) nil\n            (= tnloc :newline) nil\n            (= tnloc :comment) nil\n            (not= tnloc :whitespace) spaces\n            :else (recur (left* nloc) ^long (+ ^long (length nloc) spaces))))))\n\n;;\n;; # Integrate specs with doc-string\n;;\n;; Find find-docstring could be a lot smarter, and perhaps\n;; find the docstring in the meta data (so that, defn might\n;; work, for instance).\n\n(defn find-doc-in-map\n  \"Given a zloc zipper of a map, find the :doc element.\"\n  [zloc]\n  (loop [nloc (z/down zloc)]\n    (when nloc\n      (if (and (zkeyword? nloc) (= (z/string nloc) \":doc\"))\n        (when (string? (sexpr (z/right nloc))) (z/right nloc))\n        (recur (z/right (z/right nloc)))))))\n\n(defn find-docstring\n  \"Find a docstring in a zipper of a function.\"\n  [zloc]\n  (let [fn-name (z/string (z/down zloc))]\n    (cond (or (= fn-name \"defn\") (= fn-name \"defmacro\"))\n            (let [docloc (z/right (z/right (z/down zloc)))]\n              (when (string? (sexpr docloc)) docloc))\n          (= fn-name \"def\") (let [maploc (z/down (z/right (z/down zloc)))]\n                              (when (z/map? maploc) (find-doc-in-map maploc)))\n          :else nil)))\n\n(defn add-spec-to-docstring\n  \"Given a zipper of a function definition, add the spec info to\n  the docstring. Works for docstring with (def ...) functions, but\n  the left-indent isn't optimal.  But to fix that, we'd have to do\n  the zprinting here, where we know the indent of the existing\n  docstring.\"\n  [zloc spec-str]\n  #_(println \"spec-str:\" spec-str)\n  (if-let [doc-zloc (find-docstring zloc)]\n    (let [new-doc-zloc (replace* doc-zloc\n                                 (z/node (edn* (p/parse-string\n                                                 (str \"\\\"\"\n                                                      (str (sexpr doc-zloc))\n                                                      spec-str\n                                                      \"\\\"\")))))]\n      (edn* (z/root new-doc-zloc)))\n    zloc))\n\n(defn zlift-ns\n  \"Perform a lift-ns on a pair-seq that is returned from\n  partition-2-all-nc, which is a seq of pairs of zlocs that may or\n  may not have been sorted and which may or may not have had things\n  removed from it and may or may not actually be pairs.  Could be\n  single things, could be multiple things.  If contains multiple\n  things, the first thing is the key, but if it is just a single\n  thing, the first thing is *not* a key. So we only need to work\n  on the first of each seq which has more than one element in it,\n  and possibly replace it. This will only lift out a ns if all keys\n  in seqs with more than one element have the same namespace. Returns\n  the [namespace pair-seq] or nil.\"\n  [pair-seq]\n  (let [strip-ns (fn [named]\n                   (if (symbol? named)\n                     (symbol nil (name named))\n                     (keyword nil (name named))))]\n    (loop [ns nil\n           pair-seq pair-seq\n           out []]\n      (let [[k & rest-of-pair :as pair] (first pair-seq)\n            #_(println \"k:\" k \"rest-of-x-pair:\" rest-of-pair)\n            current-ns (when (and ; This is at least a pair\n                                  rest-of-pair\n                                  ; It does not include an implicit ns\n                                  (not (clojure.string/starts-with? (z/string k)\n                                                                    \"::\"))\n                                  (or (zkeyword? k) (zsymbol? k)))\n                         (namespace (z/sexpr k)))]\n        (if-not k\n          (when ns [ns out])\n          (if current-ns\n            (if ns\n              (when (= ns current-ns)\n                (recur ns\n                       (next pair-seq)\n                       (conj out\n                             (cons (edn* (n/token-node (strip-ns (z/sexpr k))))\n                                   rest-of-pair))))\n              (recur current-ns\n                     (next pair-seq)\n                     (conj out\n                           (cons (edn* (n/token-node (strip-ns (z/sexpr k))))\n                                 rest-of-pair))))\n            (when (= (count pair) 1)\n              (recur ns (next pair-seq) (conj out pair)))))))))\n\n;!zprint {:vector {:respect-nl? true}}\n(defn zredef-call\n  \"Redefine all of the traversal functions for zippers, then\n  call the function of no arguments passed in.\"\n  [body-fn]\n  (#?@(:clj [do-redef-vars :zipper]\n       :cljs [with-redefs])\n   [zprint.zfns/zstring z/string\n    zprint.zfns/znumstr znumstr\n    zprint.zfns/zbyte-array? (constantly false)\n    zprint.zfns/zcomment? zcomment?\n    zprint.zfns/zsexpr sexpr\n    zprint.zfns/zseqnws zseqnws\n    zprint.zfns/zmap-right zmap-right\n    zprint.zfns/zfocus-style zfocus-style\n    zprint.zfns/zfirst zfirst\n    zprint.zfns/zfirst-no-comment zfirst-no-comment\n    zprint.zfns/zsecond zsecond\n    zprint.zfns/zthird zthird\n    zprint.zfns/zfourth zfourth\n    zprint.zfns/znthnext znthnext\n    zprint.zfns/zcount zcount\n    zprint.zfns/zmap zmap\n    zprint.zfns/zmap-w-nl zmap-w-nl\n    zprint.zfns/zanonfn? zanonfn?\n    zprint.zfns/zfn-obj? (constantly false)\n    zprint.zfns/zfocus zfocus\n    zprint.zfns/zfind-path find-root-and-path-nw\n    zprint.zfns/zwhitespace? whitespace?\n    zprint.zfns/zlist? z/list?\n    zprint.zfns/zvector? z/vector?\n    zprint.zfns/zmap? z/map?\n    zprint.zfns/zset? z/set?\n    zprint.zfns/zcoll? z-coll?\n    zprint.zfns/zuneval? zuneval?\n    zprint.zfns/zmeta? zmeta?\n    zprint.zfns/ztag ztag\n    zprint.zfns/zlast zlast\n    zprint.zfns/zarray? (constantly false)\n    zprint.zfns/zatom? (constantly false)\n    zprint.zfns/zderef (constantly false)\n    zprint.zfns/zrecord? (constantly false)\n    zprint.zfns/zns? (constantly false)\n    zprint.zfns/zobj-to-vec (constantly nil)\n    zprint.zfns/zexpandarray (constantly nil)\n    zprint.zfns/znewline? znewline?\n    zprint.zfns/zwhitespaceorcomment? whitespace-or-comment?\n    zprint.zfns/zmap-all zmap-all\n    zprint.zfns/zpromise? (constantly false)\n    zprint.zfns/zfuture? (constantly false)\n    zprint.zfns/zdelay? (constantly false)\n    zprint.zfns/zkeyword? zkeyword?\n    zprint.zfns/zconstant? zconstant?\n    zprint.zfns/zagent? (constantly false)\n    zprint.zfns/zreader-macro? zreader-macro?\n    zprint.zfns/zarray-to-shift-seq (constantly nil)\n    zprint.zfns/zdotdotdot zdotdotdot\n    zprint.zfns/zsymbol? zsymbol?\n    zprint.zfns/znil? znil?\n    zprint.zfns/zreader-cond-w-symbol? zreader-cond-w-symbol?\n    zprint.zfns/zreader-cond-w-coll? zreader-cond-w-coll?\n    zprint.zfns/zlift-ns zlift-ns\n    zprint.zfns/zinlinecomment? zinlinecomment?\n    zprint.zfns/zfind zfind\n    zprint.zfns/ztake-append ztake-append]\n   (body-fn)))"]}