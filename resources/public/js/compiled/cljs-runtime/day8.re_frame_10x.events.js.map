{"version":3,"sources":["day8/re_frame_10x/events.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,AAAA,AAAMA,AAEHC;AAFH,AAGE,AAAAC,AAAA;AAAAC,AAAA;AAAAC,AAAA;AAAAC,AAES,AACGE;AADH,AAEE,AAAMC,AAAM,AAAI,AAAA,AAACC,AAAU,AAAA,AAAUF,AACvB,AAAA,AAAA,AAAA,AAACG,AAAOH,AACR,AAAA,AAAA,AAAA,AAACG,AAAOH;AAChBI,AAAM,AAAA,AAAA,AAAA,AAACD,AAAOH;AAHpB,AAIE,AAACN,AAAAA,AAAAA,AAAEO,AAAAA,AAAGG,AAAAA;;AACNJ;;AATb,AAAA,AAAAL,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;;AAWH,AAAA,AAAMM,AAAYC;AAAlB,AACE,AAAMC,AAAkB,AAAI,AAAA,AAACC,AAAE,AAAA,AAAUF,AACb,AAAA,AAACE,AAAE,AAAA,AAAUF;AACnCG,AAAkB,AAAA,AAAA,AAAA,AAAA,AAACC,AAAOJ;AAFhC,AAGE,AAAA,AAAQC;AAAR;;AAEE,AAAK,AAAA,AAACI,AAAcF;;;AAE1B,AAAA,AAAMG;AAAN,AACE,AAAA,AAACC;;AAEH,AAAA,AAAMC;AAAN,AACE,AAAA,AAAA,AAAAC,AAACC;AAAD,AAAwC,AAAAC,AAAA,AAAA,AAAAF;AAAA,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;;AAE3C;;;;;AAAA,AAAAC,AAAMO,AAIHC;AAJH,AAAA,AAAAP,AAAAD;AAAAE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAIMK;AAJNP,AAIUQ;AAJVT,AAIiBU;AAJjB,AAKE,AAAID;AACF,AAAAE,AAAiB,AAACE,AAAiBN,AAAEC;AAArC,AAAA,AAAAG;AAAA,AAAAA,AAASC;AAAT,AACE,AAAME,AAAO,AAACR,AAAAA,AAAAA,AAAUM,AAAAA,AAAQH,AAAAA;AAAhC,AACE,AAAI,AAACP,AAAIY;AACP,AAACC,AAAMR,AAAEC,AAAEM;;AACX,AAACE,AAAOT,AAAEC;;;AACdD;;;AACF,AAACS,AAAOT,AAAEC;;;AAEd,AAAA,AAAMS,AAAmBC;AAAzB,AACE,AAAA,AAAK,AAAA,AAAA,AAACE,AAA4CC,AAAuBH;AAAzE,AAAAC,AACqBG;AADrB,AAAA;;AAIF,AAAA,AAACC,AAEC,AAAAC,AAAK3C;AAAL,AAAA,AAAA4C,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASE;AAAT,AAAAD,AAAAD,AAAA,AAAA,AAAWG;AAAX,AACE,AAAA,AAACC,AAAuC,AAAAC,AAAKF;AAALG,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC;;;AACxC,AAAA,AAAA,AAAA,AAACC,AAASnD,AAA6B,AAAAiD,AAAKF;AAALG,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC;;;AAE3C,AAAA,AAACR,AAEC,AAAAU,AAAKpD;AAAL,AAAA,AAAAqD,AAAAD;AAAA,AAAAP,AAAAQ,AAAA,AAAA,AAASP;AAAT,AAAAD,AAAAQ,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAAA,AAAA,AAACH,AAASnD,AAA6BsD;;AAE3C,AAAA,AAACZ,AAEC,AAAAa,AAAKvD;AAAL,AAAA,AAAAwD,AAAAD;AAAA,AAAAV,AAAAW,AAAA,AAAA,AAASV;AAAT,AAAAD,AAAAW,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAACT,AAAkCS;;AACnC,AAAA,AAAA,AAAA,AAACN,AAASnD,AAA6ByD;;AAE3C,AAAA,AAACf,AAEC,AAAK1C,AAAG8C;AAAR,AACE,AAAA,AAAA,AAAA,AAACY,AAAU1D,AAAkC2D;;AAEjD,AAAA,AAACjB,AAEC,AAAAkB,AAAK5D;AAAL,AAAA,AAAA6D,AAAAD;AAAA,AAAAf,AAAAgB,AAAA,AAAA,AAASf;AAAT,AAAAD,AAAAgB,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAACd,AAAgCc;;AACjC,AAAA,AAAA,AAAA,AAACX,AAASnD,AAA4B8D;;AAE1C,AAAA,AAACpB,AAEC,AAAK1C,AAAG8C;AAAR,AACE,AAACiB;;AACD,AAACC;;AACDhE;;AAEJ,AAAA,AAAC0C,AAEC,AAAK1C,AAAG8C;AAAR,AACE,AAAMmB,AAAgB,AAACN,AAAI,AAAA,AAAA,AAAA,AAACzD,AAAOF;AAC7BkE,AAAgB,AAAA,AAAA,AAAA,AAAChE,AAAOF;AACxBmE,AAAgB,AAAAC,AAAIF;AAAJ,AAAA,AAAAE;AAAAA;;AAAoBH;;;AAF1C,AAGE,AAAIA;AACF,AAACpD;;AACD,AAAUqD;AAAV;AAAA,AACE,AAACvD;;;;AACL,AAAA,AAACqC,AAAkCmB;;AACnC,AAAA,AAACnB,AAAgCiB;;AAC7BjE,AACA,AAAA,AAAA,AAAA,AAACmD,AAAmCgB,AACpC,AAAA,AAAA,AAAA,AAAChB,AAAkCc;;AAE7C,AAAA,AAACvB,AAEC,AAAA2B,AAAKrE;AAAL,AAAA,AAAAsE,AAAAD;AAAA,AAAAxB,AAAAyB,AAAA,AAAA,AAASxB;AAAT,AAAAD,AAAAyB,AAAA,AAAA,AAAWC;AAAX,AAME,AAAMC,AAAI,AAACC,AAAYF;AACjBC,AAAI,AAAA,AAAI,AAAK,AAACb,AAAI,AAACe,AAASF,AAAM,AAACG,AAASH,AACtCA;AAFZ,AAIE,AAAA,AAACxB,AAAqCwB;;AACtC,AAAA,AAAA,AAAA,AAACrB,AAASnD,AAAiCwE;;AAEjD,AAAA,AAAKI,AACF,AAAAC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;AAAqC,AAAA,AAAAC,AAACvF;AAAD,AAAc,AAAA,AAAAuF,AAAC/B;;AAExD,AAAA,AAACgC,AAECJ,AACA,AAAKK,AAAenC;AAApB,AACE,AAAMoC,AAAG,AAACC;AAAV,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACjD,AAAM+C,AAAeC,AAAQA,AAAqC,AAACE;;AAE1E,AAAA,AAACJ,AAECJ,AACA,AAAAS,AAAKJ;AAAL,AAAA,AAAAK,AAAAD;AAAA,AAAAxC,AAAAyC,AAAA,AAAA,AAAqBxC;AAArB,AAAAD,AAAAyC,AAAA,AAAA,AAAuBJ;AAAvB,AACE,AAAC/C,AAAO8C,AAAeC;;AAE3B,AAAA,AAACF,AAECJ,AACA,AAAAW,AAAKN;AAAL,AAAA,AAAAO,AAAAD;AAAA,AAAA1C,AAAA2C,AAAA,AAAA,AAAqB1C;AAArB,AAAAD,AAAA2C,AAAA,AAAA,AAAuBN;AAAvB,AAAArC,AAAA2C,AAAA,AAAA,AAA0BC;AAA1B,AAEE,AAAMtF,AAAM,AAACiC,AAAkBqD;AAA/B,AACMR,AACA,AAAA,AAAA,AAAC9B,AAAU+B,AAAeO,AAC1B,AAAA,AAAA,AAAC/B,AAAWwB,AAAc,AAAKQ;AAAL,AAAgB,AAAIvF;AAAMA;;AAAMuF;;;;AAEpE,AAAA,AAACV,AAECJ,AACA,AAAAe,AAAK7C;AAAL,AAAA,AAAA8C,AAAAD;AAAA,AAAA9C,AAAA+C,AAAA,AAAA,AAAQ9C;AAAR,AAAAD,AAAA+C,AAAA,AAAA,AAAUX;AAAV,AACEA;;AAEJ,AAAA,AAAKY,AACF,AAAAC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChB,AAAAA,AAAAA;AAA0C,AAAA,AAAAiB,AAACvG;AAAD,AAAc,AAAA,AAAAuG,AAAC/C;;AAE7D,AAAA,AAACgC,AAECa,AACA,AAAKG,AAAoBlD;AAAzB,AACE,AAAMoC,AAAG,AAACC;AAAV,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACjD,AAAM8D,AAAoBd,AAAQA,AAA4B,AAACE;;AAEtE,AAAA,AAACJ,AAECa,AACA,AAAAI,AAAKD;AAAL,AAAA,AAAAE,AAAAD;AAAA,AAAApD,AAAAqD,AAAA,AAAA,AAA0BpD;AAA1B,AAAAD,AAAAqD,AAAA,AAAA,AAA4BhB;AAA5B,AACE,AAAC/C,AAAO6D,AAAoBd;;AAEhC,AAAA,AAACF,AAECa,AACA,AAAAM,AAAKH;AAAL,AAAA,AAAAI,AAAAD;AAAA,AAAAtD,AAAAuD,AAAA,AAAA,AAA0BtD;AAA1B,AAAAD,AAAAuD,AAAA,AAAA,AAA4BlB;AAA5B,AAAArC,AAAAuD,AAAA,AAAA,AAA+BC;AAA/B,AAEE,AAAMlG,AAAM,AAACiC,AAAkBiE;AAA/B,AACML,AACA,AAAA,AAAA,AAAC7C,AAAU+B,AAAYmB,AACvB,AAAA,AAAA,AAAC3C,AAAWwB,AAAQ,AAAKQ;AAAL,AAAgB,AAAIvF;AAAMA;;AAAMuF;;;;AAE9D,AAAA,AAACV,AAECa,AACA,AAAAS,AAAKxD;AAAL,AAAA,AAAAyD,AAAAD;AAAA,AAAAzD,AAAA0D,AAAA,AAAA,AAAQzD;AAAR,AAAAD,AAAA0D,AAAA,AAAA,AAAUtB;AAAV,AACEA;;AAEJ,AAAA,AAAKuB,AAAoB,AAAAC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3B,AAAAA,AAAAA;AAAsC,AAAA,AAAA4B,AAAClH;AAAD,AAAc,AAAA,AAAAkH,AAAC1D;;AAE/E,AAAA,AAACgC,AAECwB,AACA,AAAAG,AAAK7D;AAAL,AAAA,AAAA8D,AAAAD;AAAA,AAAA9D,AAAA+D,AAAA,AAAA,AAAQ9D;AAAR,AAAAD,AAAA+D,AAAA,AAAA,AAAUC;AAAV,AACEA;;AAEJ,AAAA,AAAC7B,AAECwB,AACA,AAAAM,AAAKD;AAAL,AAAA,AAAAE,AAAAD;AAAA,AAAAjE,AAAAkE,AAAA,AAAA,AAAgBjE;AAAhB,AAAAD,AAAAkE,AAAA,AAAA,AAAkBC;AAAlB,AAAAnE,AAAAkE,AAAA,AAAA,AAA6BE;AAA7B,AACE,AAAC/E,AAAM2E,AAAUG,AAAWC;;AAEhC,AAAA,AAACvE,AAEC,AAAAwE,AAAKlH;AAAL,AAAA,AAAAmH,AAAAD;AAAA,AAAArE,AAAAsE,AAAA,AAAA,AAASrE;AAAT,AAAAD,AAAAsE,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAAA,AAAA,AAACjE,AAASnD,AAAuBoH;;AAErC,AAAA,AAAA,AAACpC,AAEE,AAAAqC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvC,AAAAA,AAAAA;AAA6C,AAAA,AAAAwC,AAAC9H;AAAD,AAAc,AAAA,AAAA8H,AAACtE;AAC9D,AAAAuE,AAAKvH;AAAL,AAAA,AAAAwH,AAAAD;AAAA,AAAA1E,AAAA2E,AAAA,AAAA,AAAS1E;AAAT,AAAAD,AAAA2E,AAAA,AAAA,AAAWC;AAAX,AACEA;;AAIJ,AAAA,AAAMC,AAAOC,AAAaC;AAA1B,AAIE,AAAMC,AAAyB,AAAA,AAAiBD;AAC1CE,AAAyB,AAAA,AAACC;AAC1BC,AAAyB,AAAKvF;AAAL,AACE,AAAA,AAAAwF,AAAWH;AAAX;;AAAA,AACE,AAAAI,AACE;AAAA,AACE,AAAM5E,AAAO,AAAcqE;AACrBS,AAAO,AAAeT;AAD5B,AAEE,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAuD/E,AAAc8E;AAArE,AAAA,AAAAC,AAAAA,AAACpH,AAAAA,AAAAA;;AACH,AAAA,AAACqH,AAAOR;;AALZ,AAAA,AAAAI,AAAAA,AAACC,AAAAA,AAAAA;;AAMD,AAAA,AAACG,AAAOR;;;AACrCS,AAAyB,AAAMC,AAAI,AAAA,AAACT;AAAX,AACE;AAAA,AAEE,AAAAU,AAAA,AAAAR,AAA0BO;AAA1BC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAzG,AAAAyG,AAAA,AAAcI;AAAd,AAAA7G,AAAAyG,AAAA,AAAmBK;AACbC,AAAY,AAAWpB;AACvBqB,AAAY,AAAWrB;AAF7B,AAGE,AAAM,AAAI,AAACsB,AAAKJ,AAAKE,AACX,AAACE,AAAKH,AAAIE;AADpB,AAEE,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAwDH,AAAiBC;AAAzE,AAAA,AAAAE,AAAAA,AAACjI,AAAAA,AAAAA;;AACD,AAAA,AAAA,AAAA,AAACqH,AAAOE,AAAWO,AAAiBC;;AAHtC;;;;AAI/BG,AAAyB,AAAA,AAACpB;AAC1BqB,AAAyB,AAAKtG;AAAL,AACE,AAAA,AAAsB6E,AAAsBK;;AAC5C,AAAAqB,AAAA,AAAApB,AAASkB;AAAT,AAAA,AAAA,AAAAE,AAAA;AAAA;AAAA,AAAAA,AAAkCC;;;AAFpC;;AAtB/B,AA4BE,AAACC,AAA2B3B;;AAC5B,AAAA4B,AAAiB7B;AAAjB8B,AAAA;AAAAC,AAAA;AAAA,AAA0C,AAAAE,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3I,AAAAA,AAAAA;;AAA3C,AAAA,AAAAuI,AAAAC,AAAAC,AAACC;;AACD,AAAA,AAACE,AACE,AAAA,AAAA,AAAA,AAAA,AAACC,AAE0B;AAAA,AACE,AAAA,AAAmBnC,AAAsBK;;AACzC,AAAA,AAAmBL,AAA4ByB;;AAE/C,AAACd,AAAOa,AACA,AAAA,AAACY,AACCxB;AARvC,AAAA,AAU2Ba,AACA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAQY;AACpCnC;;AAEN;;;AAAA,AAAAoC,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxB,AAAA,AAAAwB,AAAA,AAAA,AAAA,AAAA,AAAAvB,AAAAC,AAAAsB,AAAAA;AAAAA,AAEsCE;AAFtC,AAAApI,AAAAkI,AAAA,AAEW5G;AAFX,AAAAtB,AAAAkI,AAAA,AAEiB9B;AAFjB,AAAApG,AAAAkI,AAAA,AAEwBpB;AAFxB,AAAA9G,AAAAkI,AAAA,AAE4BrB;AAF5B,AAGE,AAAMwB,AAAiBC;AACjBC,AAAiB,AAAAC,AAA0B,AAAA,AAAuBH;AAAjD,AAAA,AAAAG,AAACC;;AAClBC,AAAiB,AAAA,AAAA,AACKH;AAH5B,AAOE,AAAAzI,AAAW,AAAA,AAAA,AAAC8I,AACe,AAAA,AAAA,AAAA,AAAA,AAAA,AAActH,AAAiB8E,AAAgBS,AAAaC;AADvF,AAAA,AAAAhH;AAAA,AAAAA,AAAS6I;AAAT,AAGE,AAAME,AAAE,AAAYF;AAApB,AACE,AAAAG,AAAc,AAAA,AAAiBD;AAA/B,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAACC,AAA4BD;;AAD/B;;AAEA,AAAOF;;AACP,AAAQA,AAAEH;;AACV,AAAAO,AAAiBN;AAAjBO,AAAA;AAAAC,AAAA;AAAA,AAA6B,AAACzD,AAAMiD,AAAEE;;AAAtC,AAAA,AAAAI,AAAAC,AAAAC,AAACxB;;AACD,AAAQkB;;AANV;;AAHF;;;AAaJ,AAAA,AAACO,AAEC,AAAKC,AAAIvI;AAAT,AACE,AAAI,AAACqH,AAAqB,AAAA,AAAA,AAAA,AAAA,AAACjK,AAAOmL;AAChC,AACE,AAAA,AAAA,AAACrI;;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEuB,AAAA,AAAKqI,AACL,AAAA,AAAA,AAAA,AAAA,AAAClI,AACD,AAAA,AAAA,AAAA,AAAC1B;;AAL1B,AAAA,AAAA,AAAA,AAAA,AAOO,AAAA,AAAA,AAAA,AAAA,AAAC0B,AAAS,AAAA,AAAKkI;;;AAG1B,AAAA,AAACD,AAEC,AAAKC,AAAIvI;AAAT,AACE,AAAA,AAAA,AAACE;;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEmB,AAAA,AAAA,AAAA,AAAA,AAACG,AAAS,AAAA,AAAKkI;;AAGpC,AAAA,AAAA,AAACrG,AAEE,AAAAsG,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACxG,AAAAA,AAAAA;AAAiD,AAAAyG,AAAA,AAAAC;AAAA,AAAW,AAAA,AAAAA,AAACxI;;AAAZ,AAAA,AAAAuI,AAAAA,AAACE,AAAAA,AAAAA;AACpD,AAAAC,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAA7I,AAAA8I,AAAA,AAAA,AAAU7I;AAAV,AAAAD,AAAA8I,AAAA,AAAA,AAAYE;AAAZ,AACEA;;AAEJ,AAAA,AAAA,AAAC7G,AAEE,AAAA8G,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChH,AAAAA,AAAAA;AAAiD,AAAAiH,AAAA,AAAAC;AAAA,AAAW,AAAA,AAAAA,AAAChJ;;AAAZ,AAAA,AAAA+I,AAAAA,AAACN,AAAAA,AAAAA;AACpD,AAAAQ,AAAKL;AAAL,AAAA,AAAAM,AAAAD;AAAA,AAAApJ,AAAAqJ,AAAA,AAAA,AAAUpJ;AAAVqJ,AAAA,AAAAtJ,AAAAqJ,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzD,AAAA,AAAAyD,AAAA,AAAA,AAAA,AAAA,AAAAxD,AAAAC,AAAAuD,AAAAA;AAAA,AAAAnK,AAAAmK,AAAA,AAAa7I;AAAb,AAAAtB,AAAAmK,AAAA,AAA0B/D;AAA1B,AACE,AAAA,AAAA,AAACgE,AAAMR,AAAWtI,AAAc8E;;AAEpC,AAAA,AAAA,AAACpD,AAEE,AAAAqH,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvH,AAAAA,AAAAA;AAAiD,AAAAwH,AAAA,AAAAC;AAAA,AAAW,AAAA,AAAAA,AAACvJ;;AAAZ,AAAA,AAAAsJ,AAAAA,AAACb,AAAAA,AAAAA;AACpD,AAAAe,AAAKZ;AAAL,AAAA,AAAAa,AAAAD;AAAA,AAAA3J,AAAA4J,AAAA,AAAA,AAAU3J;AAAV4J,AAAA,AAAA7J,AAAA4J,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhE,AAAA,AAAAgE,AAAA,AAAA,AAAA,AAAA,AAAA/D,AAAAC,AAAA8D,AAAAA;AAAA,AAAA1K,AAAA0K,AAAA,AAAa7D;AAAb,AAAA7G,AAAA0K,AAAA,AAAwB5D;AAAxB,AACE,AAAA,AAAA,AAACsD,AAAMR,AAAU/C,AAAUC;;AAE/B,AAAA,AAACsC,AAEC,AAAKC,AAAIvI;AAAT,AACE,AAACjC;;AADH;;AAIF,AAAA,AAACuK,AAEC,AAAKC,AAAIvI;AAAT,AACE,AAACnC;;AADH;;AAIF,AAAA,AAACyK,AAEC,AAAKtI,AAAEA;AAAP,AACE,AAAA,AAAA,AAAC6J;AAAD,AAA4C,AAAAC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;;AAD/C;;AAIF,AAAA,AAACnK,AAEC,AAAAoK,AAAK9M;AAAL,AAAA,AAAA+M,AAAAD;AAAA,AAAAjK,AAAAkK,AAAA,AAAA,AAASjK;AAAT,AAAAD,AAAAkK,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAAA,AAAA,AAAC7J,AAASnD,AAAyBgN;;AAIvC,AAAA,AAAMC,AAAmBC;AAAzB,AACE,AAAA,AAAClK,AAAkCkK;;AAErC,AAAA,AAACxK,AAEC,AAAAyK,AAAKnN;AAAL,AAAA,AAAAoN,AAAAD;AAAA,AAAAtK,AAAAuK,AAAA,AAAA,AAAStK;AAAT,AAAAD,AAAAuK,AAAA,AAAA,AAAWF;AAAX,AACE,AAACD,AAAkBC;;AACnB,AAAA,AAAA,AAAA,AAAC/J,AAASnD,AAA2BkN;;AAEzC,AAAA,AAAA,AAAClI,AAEE,AAAAqI,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACvI,AAAAA,AAAAA;AACF,AAAAwI,AAAKJ;AAAL,AAAA,AAAAK,AAAAD;AAAA,AAAAzK,AAAA0K,AAAA,AAAA,AAAmBzK;AAAnB,AAAAD,AAAA0K,AAAA,AAAA,AAAqBC;AAArB,AAAA3K,AAAA0K,AAAA,AAAA,AAAkCE;AAAlC,AACE,AAAMC,AAAO,AAAU,AAAA,AAAAC,AAACC;AAAD,AAAO,AAACrN,AAAEiN,AAAa,AAAA,AAAAG;AAAjC,AAAA,AAA6CT,AAG3C,AAAMA,AAAa,AAAI,AAAK,AAAA,AAAC3M,AAAekN,AAChB,AAAA,AAAAI,AAACD;AAAD,AAAO,AAACrN,AAAEkN,AAAY,AAAA,AAAAI;AAD3B,AAC6CX,AAC/C,AAAA,AAAAY,AAACC;AAAD,AAAS,AAAA,AAACxN,AAAe,AAAA,AAAAuN;AAAkBZ,AAC3CA;AAHrB,AAKE,AAAA,AAAA,AAAA,AAAA,AAACc,AAAKd,AAA2B,AAAC/H,AACD,AAAI,AAAA,AAAC5E,AAAEkN,AACL,AAACQ,AAAeT,AAChB,AAACU,AAAcV,AACjBC;;AAZlD,AAaE,AAACR,AAAkBS;;AACnBA;;AAEN,AAAA,AAAA,AAAC1I,AAEE,AAAAmJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACrJ,AAAAA,AAAAA;AACF,AAAAsJ,AAAKlB;AAAL,AAAA,AAAAmB,AAAAD;AAAA,AAAAvL,AAAAwL,AAAA,AAAA,AAAmBvL;AAAnB,AAAAD,AAAAwL,AAAA,AAAA,AAAqBC;AAArB,AACE,AAAMZ,AAAO,AAAA,AAAAa,AAACR;AAAD,AAAS,AAACxN,AAAE,AAAA,AAAAgO,AAAQD;AAAWpB;AAA5C,AACE,AAACD,AAAkBS;;AACnBA;;AAEN,AAAA,AAAChL,AAEC,AAAK1C,AAAG8C;AAAR,AACE,AAAM4K,AAAO,AAAA,AAAA,AAAA,AAACjM,AAAUzB;AAAxB,AACE,AAACiN,AAAkB,AAAA,AAAA,AAAA,AAAC/M,AAAOwN;;AAC3BA;;AAEN,AAAA,AAAA,AAAC1I,AAEE,AAAAwJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1J,AAAAA,AAAAA;AACF,AAAK2J,AAAwB3L;AAA7B,AACM2L,AACA,AAAA,AAAA,AAACvM,AACD,AAAA,AAACwM,AAAkB/K;;AAE3B,AAAA,AAAA,AAACqB,AAEE,AAAA2J,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7J,AAAAA,AAAAA;AACF,AAAA8J,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAA/L,AAAAgM,AAAA,AAAA,AAAiB/L;AAAjB,AAAAD,AAAAgM,AAAA,AAAA,AAAmB3J;AAAnB,AACE,AAAM6J,AAAS,AAAA,AAAA,AAACtO,AAAOqO,AAAuB5J,AAAI,AAAA,AAAY4J;AAA9D,AACE,AAAA,AAAA,AAAA,AAAAE,AAACtL,AAAUoL,AAAuB5J;AAAlC,AAAuC,AAAI6J;AAAJ;;AAAmB,AAAAC,AAACrL;;;;AAEjE,AAAA,AAAA,AAACqB,AAEE,AAAAiK,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnK,AAAAA,AAAAA;AACF,AAAAoK,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAArM,AAAAsM,AAAA,AAAA,AAAiBrM;AAAjB,AAAAD,AAAAsM,AAAA,AAAA,AAAmBE;AAAnB,AACE,AAAMA,AAAe,AAAI,AAACC,AAAcF,AAAWC,AAC5B,AAACE,AAAeH,AAAWC,AAC3B,AAACG,AAAUJ,AAAWC;AAF7C,AAGE,AAAA,AAACrM,AAAgCqM;;AACjCA;;AAEN,AAAA,AAAA,AAACrK,AAEE,AAAAyK,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC3K,AAAAA,AAAAA;AACF,AAAA4K,AAAKN;AAAL,AAAA,AAAAO,AAAAD;AAAA,AAAA7M,AAAA8M,AAAA,AAAA,AAAiB7M;AAAjB,AAAAD,AAAA8M,AAAA,AAAA,AAAmBN;AAAnB,AACEA;;AAGJ,AAAA,AAAA,AAACrK,AAEE,AAAA4K,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC9K,AAAAA,AAAAA;AAA4C,AAAA,AAAA+K,AAACrQ;AAAD,AAAc,AAAA,AAAAqQ,AAAC7M;AAC7D,AAAA8M,AAAKhN;AAAL,AAAA,AAAAiN,AAAAD;AAAA,AAAAjN,AAAAkN,AAAA,AAAA,AAAQpO;AAAR,AAAAkB,AAAAkN,AAAA,AAAA,AAAUC;AAAV,AACEA;;AAIJ,AAAA,AAAKC,AACF,AAAAC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACpL,AAAAA,AAAAA;AAA0B,AAAA,AAAAqL,AAAC3Q;AAAD,AAAc,AAAA,AAAA2Q,AAACnN;;AAE7C,AAAA,AAACgC,AAECiL,AACA,AAAKG,AAAMtN;AAAX,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACZ,AAAMkO,AAAM,AAAChL;;AAclB,AAAA,AAACJ,AAECiL,AACA,AAAAI,AAAKD;AAAL,AAAA,AAAAE,AAAAD;AAAA,AAAAxN,AAAAyN,AAAA,AAAA,AAAYxN;AAAZ,AAAAD,AAAAyN,AAAA,AAAA,AAAcC;AAAd,AAAA1N,AAAAyN,AAAA,AAAA,AAAsBE;AAAtB,AACE,AAAMC,AAAM,AAACrO,AAAkBoO;AACzBJ,AAAM,AAAA,AAAA,AAACjN,AAASiN,AAAOG,AAAmBC;AADhD,AAEE,AAAI,AAAI,AAAK,AAAA,AAAA,AAAOC,AACP,AAACC,AAAYD,AAClB,AAACE,AAAWH;AACdJ,AACA,AAAA,AAAA,AAACjN,AAAUoN,AAAeE,AAC1B,AAAA,AAAA,AAAA,AAACtN,AAAUoN;;AACf,AAAA,AAAA,AAAA,AAACpN,AAASiN,AAAOG;;;AAEzB,AAAA,AAACvL,AAECiL,AACA,AAAAW,AAAKR;AAAL,AAAA,AAAAS,AAAAD;AAAA,AAAA/N,AAAAgO,AAAA,AAAA,AAAY/N;AAAZ,AAAAD,AAAAgO,AAAA,AAAA,AAAcN;AAAd,AACE,AAAAO,AAAiC,AAAC9O,AAAIoO,AAAMG;AAA5CO,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApI,AAAA,AAAAoI,AAAA,AAAA,AAAA,AAAA,AAAAnI,AAAAC,AAAAkI,AAAAA;AAAA,AAAA9O,AAAA8O,AAAA,AAAcC;AAAd,AAAA/O,AAAA8O,AAAA,AAA0BL;AAA1B,AACE,AAAIM;AACFX;;AACI,AAAA,AAAA,AAACjN,AAASiN,AAAOG,AAAmB,AAACS,AAAOP,AAC5C,AAAA,AAAA,AAAA,AAACtN,AAAUoN;;;AAEvB,AAAA,AAACvL,AAECiL,AACA,AAAAgB,AAAKb;AAAL,AAAA,AAAAc,AAAAD;AAAA,AAAApO,AAAAqO,AAAA,AAAA,AAAYpO;AAAZ,AAAAD,AAAAqO,AAAA,AAAA,AAAcX;AAAd,AAAA1N,AAAAqO,AAAA,AAAA,AAAsBC;AAAtB,AACE,AAAA,AAAA,AAAChO,AAASiN,AAAOG,AAAgBY;;AAErC,AAAA,AAACnM,AAECiL,AACA,AAAAmB,AAAKhB;AAAL,AAAA,AAAAiB,AAAAD;AAAA,AAAAvO,AAAAwO,AAAA,AAAA,AAAYvO;AAAZ,AAAAD,AAAAwO,AAAA,AAAA,AAAcd;AAAd,AAAA1N,AAAAwO,AAAA,AAAA,AAAsBC;AAAtB,AACE,AAAMH,AAAM,AAAA,AAAIG,AAEF,AAAA,AAAA,AAACpR,AAAOkQ,AAAOG;AAF7B,AAGMH,AACA,AAAA,AAAA,AAACjN,AAAUoN,AAAgBe,AAE3B,AAAA,AAAA,AAACnO,AAAUoN,AAAgBY;;AAErC,AAAA,AAACnM,AAECiL,AACA,AAAAsB,AAAKnB;AAAL,AAAA,AAAAoB,AAAAD;AAAA,AAAA1O,AAAA2O,AAAA,AAAA,AAAY1O;AAAZ,AAAAD,AAAA2O,AAAA,AAAA,AAAcjB;AAAd,AACE,AAACpO,AAAOiO,AAAMG;;AAElB,AAAA,AAACvL,AAECiL,AACA,AAAAwB,AAAKzR;AAAL,AAAA,AAAA0R,AAAAD;AAAA,AAAA5O,AAAA6O,AAAA,AAAA,AAAS5O;AAAT,AAAAD,AAAA6O,AAAA,AAAA,AAAWtB;AAAX,AACEA;;AA2BJ,AAAA,AAAC1N,AAEC,AAAAiP,AAAK3R;AAAL,AAAA,AAAA4R,AAAAD;AAAA,AAAA9O,AAAA+O,AAAA,AAAA,AAAS9O;AAAT,AAAAD,AAAA+O,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAAA,AAAA,AAAC1O,AAASnD,AAA4B6R;;AAE1C,AAAA,AAAA,AAAC7M,AAEE,AAAA8M,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChN,AAAAA,AAAAA;AACF,AAAAiN,AAAK/R;AAAL,AAAA,AAAAgS,AAAAD;AAAA,AAAAlP,AAAAmP,AAAA,AAAA,AAASlP;AAAT,AAAAD,AAAAmP,AAAA,AAAA,AAAW5B;AAAX,AACE,AAAA,AAACpN,AAA+CoN;;AAChDA;;AAEJ,AAAA,AAAA,AAACpL,AAEE,AAAAiN,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnN,AAAAA,AAAAA;AACF,AAAAoN,AAAK9B;AAAL,AAAA,AAAA+B,AAAAD;AAAA,AAAArP,AAAAsP,AAAA,AAAA,AAAYrP;AAAZ,AAAAD,AAAAsP,AAAA,AAAA,AAAc1B;AAAd,AACE,AAAM2B,AAAU,AAAI,AAACnS,AAAUmQ,AAAMK,AACnB,AAAC4B,AAAKjC,AAAMK,AACZ,AAACzC,AAAKoC,AAAMK;AAF9B,AAGE,AAAA,AAACzN,AAA+CoP;;AAChDA;;AAEN,AAAA,AAAA,AAACpN,AAEE,AAAAsN,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACxN,AAAAA,AAAAA;AACF,AAAKsL,AAAMtN;AAAX,AACE,AAACyP,AAA4BC;;AAEjC,AAAA,AAAC9P,AAEC,AAAA+P,AAAKzS;AAAL,AAAA,AAAA0S,AAAAD;AAAA,AAAA5P,AAAA6P,AAAA,AAAA,AAAS5P;AAAT,AAAAD,AAAA6P,AAAA,AAAA,AAAWC;AAAX,AACE,AAAM,AAAA,AAAA,AAAA,AAACzS,AAAOF;AAAd,AACE,AAAM4S,AAAS,AAAA,AAAS5S;AAClB6S,AAAS,AAAAzO,AAAIuO;AAAJ,AAAA,AAAAvO;AAAAA;;AAEI,AAAC0O,AAAkB,AAAA,AAAC9Q,AAAI4Q;;;AACrCG,AAAS,AAAA,AAAA,AAAC7S,AAAO0S,AAAuBC;AACxC1S,AAAS,AAAC6S,AAAoB,AAAA,AAAaD;AALjD,AAOE,AAAAE,AAAmB,AAACC,AAAmB/S;AAAvC,AAAA,AAAA,AAAA8S,AAAA;AAAA;AAAA,AAAAA,AAAYvF;AAAZ,AACE,AAACpF,AAAOkK,AAAmB9E;;;AATjC;;AAUA1N;;AAIJ,AAAA,AAAMmT,AACHzR;AADH,AAEE,AAAA,AAAA,AAAA,AAAA,AAAIA,AAAcH;;AAEpB,AAAA,AAAC6J,AAEC,AAAAgI,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5K,AAAA,AAAA4K,AAAA,AAAA,AAAA,AAAA,AAAA3K,AAAAC,AAAA0K,AAAAA;AAAA,AAAAtR,AAAAsR,AAAA,AAAatT;AAAbuT,AAAAF;AAAA,AAAAxQ,AAAA0Q,AAAA,AAAA,AAAmBzQ;AAAnB,AAAAD,AAAA0Q,AAAA,AAAA,AAAqBC;AAArB,AACE,AAAA1R,AAA8B,AAAC4R,AAAOtT,AAAWoT,AACnB,AAAA,AAACG;AAD/B,AAAA,AAAA7R;AAAA,AAAAA,AAAS2R;AAAT,AAEE,AAAMI,AAA2B,AAAA,AAAA,AAAA,AAAC3T,AAAOF;AACnC8T,AAA2B,AAAK,AAAA,AAAA,AAAA,AAAC5T,AAAOF,AAAgC+T,AAAK,AAAA,AAAA,AAACC,AAAeC;AAC7FC,AAA2B,AAAA,AAAA,AAAA,AAAA,AAACzT,AAAOT;AACnCmU,AAA2B,AAAA,AAAA,AAAA,AAAC1T,AAAOT,AAA0BoU;AAHnER,AAIsD,AAAA,AAAA,AAAA,AAAC1T,AAAOF;AAJ9D4T,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlL,AAAA,AAAAkL,AAAA,AAAA,AAAA,AAAA,AAAAjL,AAAAC,AAAAgL,AAAAA;AAAA,AAAA5R,AAAA4R,AAAA,AAIOS;AAJP,AAAArS,AAAA4R,AAAA,AAI+BU;AACzBC,AAA2B,AAACC,AAAOC,AAAKP,AAAgBT;AACxDU,AAA2B,AAACO,AAAmBP,AAAYV;AAG3DkB,AAA2B,AAAA,AAAaR;AACxCS,AAA2B,AAAA,AAAA,AAAA,AAAA,AAACnU,AAAOT;AACnCmU,AAA2B,AAAA,AAAA,AAACjS,AAAMiS;AAClCQ,AAA2B,AAAC5G,AAAO,AAAKgF;AAAL,AACE,AAAM5S,AAAM,AAAA,AAAA,AAAA,AAACD,AAAO,AAAC8S,AAAoBD;AAAzC,AACE,AAAC9S,AAAU6T,AAAiB,AAACvS,AAAMpB;AAAUwU;AAMpFE,AAA2B,AAACC,AAAwB,AAAA,AAAA,AAAA,AAAA,AAACrU,AAAOT,AAAoCyT,AAAgB,AAAA,AAAA,AAAA,AAACvT,AAAOF;AACxH+U,AAA2B,AAAA,AAAA,AAAA,AAACtU,AAAOT,AAAwBgV;AAC3DC,AAA2B,AAACC,AAA+BH,AAAUR,AAAWI;AAChFQ,AAA2B,AAACC,AAAKH;AAEjCI,AAA2B,AAACC,AAAKL;AACjCM,AAA2B,AAACC,AAAK,AAAKzC;AAAL,AACE,AAAM0C,AAAoB,AAAA,AAACC,AACK,AAACC,AACC,AAACC,AAAoB,AAAA,AAAK,AAACrU,AAAMwR,AAAQ,AAAA,AAAK,AAACuC,AAAKvC,AACtDwB;AAE1BsB,AAAoB,AAAA,AAACC,AAAIL;AAEzBM,AAAoB,AAACxU,AAAM,AAACmS,AAAOsC,AAAqBP;AACxDQ,AAAoB,AAAC1U,AAAM,AAACmS,AAAOwC,AAAkBT;AACrDU,AAAoB,AAAC5U,AAAM,AAACmS,AAAO0C,AAAiBX;AACpDY,AAAoB,AAAAjS,AAAI,AAAC7C,AAAM,AAACmS,AAAO4C,AAAkBb;AAArC,AAAA,AAAArR;AAAAA;;AACI,AAAC0O,AAAkB2C;;;AAXjD,AAAA,AAAA,AAAA,AAAA,AAAA,AAYgC,AAACc,AAAmBV,AAAeQ,AACnC,AAAA,AAAWF,AACX,AAAA,AAAWJ,AACX,AAAA,AAAWE;AAC7CtB;AAEjCA,AAA2B,AAAC6B,AAAI,AAAKzD,AAAM0D,AAAUC;AAArB,AAAA,AAAA,AAAA,AAAA,AAAqC3D,AACA0D,AACAC;AACrC/B,AAAYQ,AAAqBI;AAIjEoB,AAA2B,AAAAvS,AAAI,AAAC/C,AAAIsT;AAAT,AAAA,AAAAvQ;AAAAA;;AACI,AAACsP,AAAOkD,AAAiBnD;;;AACxDoD,AAA2B,AAACrC,AAAOC,AAAKG,AAAiBD;AACzDmC,AAA2B,AAAA,AAACC,AAAQ,AAACC,AAAUnD,AAA2BgD;AAC1EI,AAA2B,AAAC9D,AAAe,AAAC5R,AAAMuV;AAClDI,AAA2B,AAAA,AAACxB,AAAQ,AAACyB,AAAK,AAAA,AAAAC,AAACC;AAAD,AAAa,AAAG,AAAA,AAAAD,AAAQH;AACxB,AAACK,AAAO,AAAKjX;AAAL,AACE,AAAA+D,AAAI,AAAA,AAAA,AAAMkQ,AAAa,AAACiD,AAA+BlX;AAAvD,AAAA,AAAA+D;AAAAA;;AACI,AAAMiQ;AAAN,AAAoB,AAACmD,AAAgCnX;;AAArD;;;AAAiEkU;AA5D/H,AAAA,AAAA,AA6DiBvU,AACA,AAAA,AAAA,AAAA,AAACmD,AAA+B+T,AAChC,AAAA,AAACxI,AAAe,AAAKkE;AAAL,AACE,AAAM6E,AAAc,AAAA,AAAsB7E;AACpC8E,AAAc,AAAA,AAAmB9E;AADvC,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACxG,AAAMwG,AACIkE,AACM,AAAA,AAACpB,AAAQ,AAACiC,AAAI,AAACC,AAAKzE,AAAe0E,AAAWf,AAClD,AAACtB,AAAKrC,AAAe2D,AACnB3C,AACFkB,AACQR,AAED,AAAA,AAAI,AAACxT,AAAIsT,AAAiB+C,AACvB,AAAA,AAAI,AAACrW,AAAIsT,AAAiB8C;AA3EtF,AA4Ea,AAAA,AAAA,AAAA,AAAA,AAAMd;;AA9ErB,AAAA,AAgFO3W;;;AAGX,AAAA,AAAA,AAAC8X,AAEE,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACjT,AAAAA,AAAAA;AACF,AAAAkT,AAAkBlV;AAAlB,AAAA,AAAAmV,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvP,AAAA,AAAAuP,AAAA,AAAA,AAAA,AAAA,AAAAtP,AAAAC,AAAAqP,AAAAA;AAAA,AAAAjW,AAAAiW,AAAA,AAAajY;AAAb,AACE,AAAAkY,AAAqB,AAAA,AAAmBlY;AAAxC,AAAA,AAAA,AAAAkY,AAAA;AAME,AAAMvF,AAAO,AAACmD,AAAI,AAAA,AAAY9V,AACZ,AAAA,AAAG,AAACuY,AAAM,AAAA,AAAYvY;AADxC,AAAA,AAAA,AAAA,AAAA,AAAA,AAEa,AAAA,AAACkC,AAAMlC,AAAqB2S,AACUA;;AATrD,AAAAuF,AAAUR;AAAV,AACE,AAAMS,AAAkB,AAAA,AAAYnY;AAC9BoY,AAAkB,AAACC,AAAwB,AAAKC;AAAL,AAAQ,AAAC/X,AAAEmX,AAAWY;AAAIH;AACrExF,AAAkB,AAACmD,AAAIqC,AAAU,AAAA,AAAKC;AAF5C,AAAA,AAAA,AAAA,AAAA,AAAA,AAGa,AAAA,AAAClW,AAAMlC,AAAqB2S,AACUA;;;AAMzD,AAAA,AAAA,AAACmF,AAEE,AAAAU,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1T,AAAAA,AAAAA;AACF,AAAA2T,AAAkB3V;AAAlB,AAAA,AAAA4V,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhQ,AAAA,AAAAgQ,AAAA,AAAA,AAAA,AAAA,AAAA/P,AAAAC,AAAA8P,AAAAA;AAAA,AAAA1W,AAAA0W,AAAA,AAAa1Y;AAAb,AACE,AAAAkY,AAAqB,AAAA,AAAmBlY;AAAxC,AAAA,AAAA,AAAAkY,AAAA;AAME,AAAMvF,AAAO,AAACG,AAAkB,AAAA,AAAY9S;AAA5C,AAAA,AAAA,AAAA,AAAA,AAAA,AACe,AAAA,AAACkC,AAAMlC,AAAqB2S,AACUA;;AARvD,AAAAuF,AAAUR;AAAV,AACE,AAAMS,AAAkB,AAAA,AAAYnY;AAC9BoY,AAAkB,AAACC,AAAwB,AAAKC;AAAL,AAAQ,AAAC/X,AAAEmX,AAAWY;AAAIH;AACrExF,AAAkB,AAACmD,AAAIqC,AAAU,AAAA,AAAKC;AAF5C,AAAA,AAAA,AAAA,AAAA,AAAA,AAGe,AAAA,AAAClW,AAAMlC,AAAqB2S,AACUA;;;AAK3D,AAAA,AAAA,AAACmF,AAEE,AAAAa,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7T,AAAAA,AAAAA;AACF,AAAA8T,AAAkB9V;AAAlB,AAAA,AAAA+V,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnQ,AAAA,AAAAmQ,AAAA,AAAA,AAAA,AAAA,AAAAlQ,AAAAC,AAAAiQ,AAAAA;AAAA,AAAA7W,AAAA6W,AAAA,AAAa7Y;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AACO,AAAA,AAAA,AAAA,AAAA,AAACoM,AAAMpM,AAEqC,AAAC8S,AAAkB,AAAA,AAAY9S;;AAEpF,AAAA,AAAA,AAACgF,AAEE,AAAA8T,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChU,AAAAA,AAAAA;AACF,AAAK8N,AAAO9P;AAAZ,AACE,AAAMiW,AAAiB,AAAA3U,AAAI,AAAA,AAACpC,AAAI4Q;AAAT,AAAA,AAAAxO;AAAAA;;AACI,AAAC0O,AAAkB,AAAA,AAAC9Q,AAAI4Q;;;AAC7CuD,AAAqB,AAAA,AAAA,AAAA,AAACjW,AAAO0S,AAAuBmG,AAC/B,AAAC/F;AACtBgG,AAAiB,AAACC,AAAoB9C;AACtChW,AAAiB,AAAA,AAAA,AAAA,AAACD,AAAOiW;AAL/B,AAME,AAAC7N,AAAOkK,AAAmBwG;;AAE3B,AAAA,AAAC9W,AAAM0Q,AAAezS;;AAE5B,AAAA,AAAA,AAAC6E,AAEE,AAAAkU,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACpU,AAAAA,AAAAA;AACF,AAAK9E,AAAG8C;AAAR,AACE,AAAAoV,AAA0B,AAAA,AAASlY;AAAnC,AAAA,AAAA,AAAAkY,AAAA;AAGElY;;AAHF,AAAAkY,AAAUiB;AAAV,AACE,AAAI,AAACC,AAAAA,AAAAA,AAAuBD,AAAAA;;AACxB,AAAA,AAAChX,AAAOnC;;;AAGlB,AAAA,AAAC0C,AAEC,AAAK1C;AAAL,AACE,AAACqZ;;AACD,AAAA,AAAA,AAACC,AAAOtZ;;AAIZ,AAAA,AAAA,AAACgF,AAEE,AAAAuU,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzU,AAAAA,AAAAA;AACF,AAAA0U,AAAK1W;AAAL,AAAA,AAAA2W,AAAAD;AAAA,AAAA3W,AAAA4W,AAAA,AAAA,AAAQ3W;AAAR,AAAAD,AAAA4W,AAAA,AAAA,AAAUC;AAAV,AACEA;;AAEJ,AAAA,AAAA,AAAC1U,AAEE,AAAA2U,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC7U,AAAAA,AAAAA;AACF,AAAA8U,AAAK9K;AAAL,AAAA,AAAA+K,AAAAD;AAAA,AAAA/W,AAAAgX,AAAA,AAAA,AAAiB/W;AAAjB,AAAAD,AAAAgX,AAAA,AAAA,AAAmB3U;AAAnB,AAAArC,AAAAgX,AAAA,AAAA,AAAsB1I;AAAtB,AACE,AAAA,AAAA,AAAChO,AAAS2L,AAAY5J,AAAWiM;;AAErC,AAAA,AAAA,AAACnM,AAEE,AAAA8U,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAChV,AAAAA,AAAAA;AACF,AAAAiV,AAAKjL;AAAL,AAAA,AAAAkL,AAAAD;AAAA,AAAAlX,AAAAmX,AAAA,AAAA,AAAiBlX;AAAjB,AAAAD,AAAAmX,AAAA,AAAA,AAAmB9U;AAAnB,AAAArC,AAAAmX,AAAA,AAAA,AAAsB1I;AAAtB,AACE,AAAMH,AAAM,AAAA,AAAIG,AAEF,AAAA,AAAA,AAACpR,AAAO4O,AAAY5J;AAFlC,AAGM4J,AACA,AAAA,AAAA,AAAC3L,AAAU+B,AAAWoM,AAEtB,AAAA,AAAA,AAACnO,AAAU+B,AAAWiM;;AAEhC,AAAA,AAAA,AAACnM,AAEC,AAAAiV,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnV,AAAAA,AAAAA;AACF,AAAAoV,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAArX,AAAAsX,AAAA,AAAA,AAAarX;AAAb,AAAAD,AAAAsX,AAAA,AAAA,AAAejV;AAAf,AAAArC,AAAAsX,AAAA,AAAA,AAAkBE;AAAlB,AACE,AAAA,AAAA,AAAClX,AAASiX,AAAQlV,AAAUmV;;AAE/B,AAAA,AAAA,AAACrV,AAEE,AAAAsV,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACxV,AAAAA,AAAAA;AACF,AAAAyV,AAAKzX;AAAL,AAAA,AAAA0X,AAAAD;AAAA,AAAA1X,AAAA2X,AAAA,AAAA,AAAQ1X;AAAR,AAAAD,AAAA2X,AAAA,AAAA,AAAUC;AAAV,AACEA;;AAIJ,AAAA,AAAA,AAACzV,AAEE,AAAA0V,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC5V,AAAAA,AAAAA;AACF,AAAA6V,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAA9X,AAAA+X,AAAA,AAAA,AAAiB9X;AAAjB,AAAAD,AAAA+X,AAAA,AAAA,AAAmBE;AAAnB,AAAAjY,AAAA+X,AAAA,AAAA,AAA8BzJ;AAA9B,AACE,AAAChO,AAAS0X,AAAWC,AAAW3J;;AAEpC,AAAA,AAAA,AAACnM,AAEE,AAAA+V,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACjW,AAAAA,AAAAA;AACF,AAAAkW,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAnY,AAAAoY,AAAA,AAAA,AAAWnY;AAAX,AAAAD,AAAAoY,AAAA,AAAA,AAAaE;AAAb,AACEA;;AAEJ,AAAA,AAAA,AAACnW,AAEE,AAAAoW,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACtW,AAAAA,AAAAA;AACF,AAAAuW,AAAKH;AAAL,AAAA,AAAAI,AAAAD;AAAA,AAAAxY,AAAAyY,AAAA,AAAA,AAAWxY;AAAX,AAAAD,AAAAyY,AAAA,AAAA,AAAaH;AAAb,AACE,AAAI,AAAC5a,AAAE2a,AAAKC;AAAZ;;AAEEA;;;AAEN,AAAA,AAAA,AAACnW,AAEE,AAAAuW,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzW,AAAAA,AAAAA;AACF,AAAA0W,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAA3Y,AAAA4Y,AAAA,AAAA,AAAsB3Y;AAAtB,AAAAD,AAAA4Y,AAAA,AAAA,AAAwBE;AAAxB,AACEA;;AAEJ,AAAA,AAAA,AAAC3W,AAEE,AAAA4W,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC9W,AAAAA,AAAAA;AACF,AAAA+W,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAhZ,AAAAiZ,AAAA,AAAA,AAAoBhZ;AAApB,AAAAD,AAAAiZ,AAAA,AAAA,AAAsBE;AAAtB,AACE,AAAI,AAAK,AAAA,AAACzb,AAAEwb,AAAwB,AAAA,AAACxb,AAAEyb;AAAvC;;AAEE,AAAI,AAAA,AAACzb,AAAEyb;AAAP;;AAAA;;;;AAIN,AAAA,AAAA,AAAChX,AAEE,AAAAiX,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnX,AAAAA,AAAAA;AACF,AAAAoX,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAArZ,AAAAsZ,AAAA,AAAA,AAAgBrZ;AAAhB,AAAAD,AAAAsZ,AAAA,AAAA,AAAkBE;AAAlB,AACE,AAAA,AAACna,AAAMka,AAAqBC;;AAIhC,AAAA,AAAA,AAACrX,AAEE,AAAAsX,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACxX,AAAAA,AAAAA;AACF,AAAKyX,AAAOzZ;AAAZ,AACE,AAAA,AAACX,AAAOoa","names":["day8.re-frame-10x.events/fixed-after","f","G__53819","G__53820","G__53821","G__53822","mranderson048.re-frame.v0v10v6.re-frame.core/->interceptor","context","db","cljs.core/contains?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","event","day8.re-frame-10x.events/log-trace?","trace","render-operation?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","component-path","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","clojure.string/includes?","day8.re-frame-10x.events/disable-tracing!","re-frame.trace/remove-trace-cb","day8.re-frame-10x.events/enable-tracing!","p1__53827#","re-frame.trace/register-trace-cb","G__53828","mranderson048.re-frame.v0v10v6.re-frame.core/dispatch","p__53830","vec__53831","seq__53832","cljs.core/seq","first__53833","cljs.core/first","cljs.core/next","day8.re-frame-10x.events/dissoc-in","m","k","ks","keys","temp__5733__auto__","nextmap","cljs.core.get.cljs$core$IFn$_invoke$arity$2","newmap","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.events/read-string-maybe","s","e53835","cljs.tools.reader.edn.read_string.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.utils.utils/default-readers","e","mranderson048.re_frame.v0v10v6.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__53837","vec__53839","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","width%","day8.re-frame-10x.utils.localstorage/save!","x__4273__auto__","y__4274__auto__","cljs.core/assoc-in","p__53842","vec__53843","width","p__53846","vec__53847","selected-tab","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__53852","vec__53854","show-panel?","day8.re-frame-10x.utils.localstorage/delete-all-keys!","js/location.reload","now-showing?","external-panel?","using-trace?","or__4185__auto__","p__53865","vec__53866","num-str","num","js/parseInt","js/isNaN","cljs.core/pos-int?","day8.re-frame-10x.events/ignored-event-mw","G__53874","mranderson048.re-frame.v0v10v6.re-frame.core/path","p1__53869#","mranderson048.re_frame.v0v10v6.re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","ignored-events","id","cljs.core/random-uuid","js/Date.now","p__53879","vec__53886","p__53897","vec__53903","event-str","old-event","p__53916","vec__53917","day8.re-frame-10x.events/filtered-view-trace-mw","G__53922","p1__53920#","filtered-view-trace","p__53929","vec__53930","p__53934","vec__53935","ns-str","p__53941","vec__53942","day8.re-frame-10x.events/low-level-trace-mw","G__53950","p1__53945#","p__53951","vec__53956","low-level","p__53959","vec__53964","trace-type","capture?","p__53967","vec__53968","debug?","G__53972","p1__53971#","p__53973","vec__53974","follows-events?","day8.re-frame-10x.events/mount","popup-window","popup-document","app","resize-update-scheduled?","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","handle-window-resize","cljs.core/deref","G__53989","reagent.impl.batching/next-tick","height","G__53994","cljs.core/reset!","handle-window-position","pos","map__53999","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","left","top","screen-left","screen-top","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__54005","window-position-interval","unmount","G__54006","js/clearInterval","day8.re-frame-10x.styles/inject-trace-styles","G__54009","G__54010","G__54011","goog.object/set","G__54012","mranderson048.reagent.v0v8v0.reagent.core.render.cljs$core$IFn$_invoke$arity$2","mranderson048.reagent.v0v8v0.reagent.core/create-class","js/setInterval","day8.re-frame-10x.view.container/devtools-inner","p__54021","map__54022","day8.re-frame-10x.events/open-debugger-window","dimensions","doc-title","js/document.title","new-window-title","G__54032","goog.string/escapeString","new-window-html","w","js/window.open","d","temp__5735__auto__","el","mranderson048.reagent.v0v8v0.reagent.core/unmount-component-at-node","G__54033","G__54034","G__54035","mranderson048.re_frame.v0v10v6.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","ctx","G__54037","G__54038","p1__54036#","mranderson048.re-frame.v0v10v6.re-frame.core/after","p__54043","vec__54044","dim","new-dim","G__54048","G__54049","p1__54047#","p__54057","vec__54060","map__54063","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__54076","G__54077","p1__54074#","p__54079","vec__54084","map__54087","js/window.addEventListener","G__54098","mranderson048.re-frame.v0v10v6.re-frame.core/dispatch-sync","p__54099","vec__54101","unloading?","day8.re-frame-10x.events/save-filter-items","filter-items","p__54114","vec__54119","G__54127","p__54135","vec__54136","filter-input","filter-type","new-db","p1__54122#","cljs.core/some","p1__54125#","p1__54126#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.string/lower-case","js/parseFloat","G__54152","p__54157","vec__54159","filter-id","p1__54149#","G__54170","trace-detail-expansions","cljs.core.update.cljs$core$IFn$_invoke$arity$3","G__54182","p__54187","vec__54189","expansions","showing?","p1__54181#","G__54198","p__54199","vec__54200","categories","new-categories","clojure.set/superset?","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","clojure.set.union.cljs$core$IFn$_invoke$arity$2","G__54214","p__54220","vec__54221","G__54230","p1__54229#","p__54235","vec__54236","show-epoch-traces?","day8.re-frame-10x.events/app-db-path-mw","G__54245","p1__54244#","paths","p__54262","vec__54263","path-id","path-str","path","cljs.core/sequential?","clojure.string/blank?","p__54282","vec__54283","map__54288","valid-path?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","p__54307","vec__54310","open?","p__54322","vec__54324","diff?","p__54342","vec__54343","p__54355","vec__54360","p__54380","vec__54384","search-string","G__54391","p__54400","vec__54401","G__54410","p__54418","vec__54419","new-paths","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","G__54427","re-frame.interop/reagent-id","re-frame.db/app-db","p__54448","vec__54452","new-id","epochs","match-id","day8.re-frame-10x.utils.utils/last-in-vec","match","day8.re-frame-10x.metamorphic/matched-event","temp__5739__auto__","day8.re-frame-10x.metamorphic/app-db-after","day8.re-frame-10x.events/first-match-id","p__54504","p__54505","map__54506","vec__54507","new-traces","filtered-traces","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","map__54525","number-of-epochs-to-retain","events-to-ignore","cljs.core/vals","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/set","previous-traces","parse-state","day8.re-frame-10x.metamorphic/initial-parse-state","drop-re-frame","drop-reagent","all-traces","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","day8.re-frame-10x.metamorphic/parse-traces","new-matches","previous-matches","subscription-info","day8.re-frame-10x.metamorphic/subscription-info","sub-state","day8.re-frame-10x.metamorphic/initial-sub-state","subscription-match-state","day8.re-frame-10x.metamorphic/subscription-match-state","subscription-matches","cljs.core/rest","new-sub-state","cljs.core/last","timing","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","epoch-traces","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.utils.utils/id-between-xf","start-of-epoch","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","event-handler-trace","day8.re-frame-10x.metamorphic/event-handler?","dofx-trace","day8.re-frame-10x.metamorphic/event-dofx?","event-trace","day8.re-frame-10x.metamorphic/event-run?","finish-run","day8.re-frame-10x.metamorphic/finish-run?","day8.re-frame-10x.metamorphic/elapsed-time","cljs.core.map.cljs$core$IFn$_invoke$arity$4","sub-match","t","quiescent?","day8.re-frame-10x.metamorphic/quiescent?","all-matches","retained-matches","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/take-last","first-id-to-retain","retained-traces","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","p1__54493#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.metamorphic/low-level-reagent-trace?","day8.re-frame-10x.metamorphic/low-level-re-frame-trace?","current-index","current-id","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","mranderson048.re_frame.v0v10v6.re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__54609","p__54610","map__54611","temp__5737__auto__","match-ids","match-array-index","day8.re-frame-10x.utils.utils/find-index-in-vec","x","cljs.core/count","G__54623","p__54625","map__54626","G__54654","p__54659","map__54661","G__54674","current-epoch-id","app-db-before","day8.re-frame-10x.metamorphic/app-db-before","G__54683","event-to-replay","re-frame.core/dispatch","re-frame.trace/reset-tracing!","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__54694","p__54707","vec__54712","ignore?","G__54715","p__54717","vec__54719","G__54722","p__54723","vec__54728","G__54731","p__54732","vec__54735","pinned","pinned?","G__54738","p__54739","vec__54740","filter-value","G__54743","p__54745","vec__54750","code-open?","open?-path","G__54756","p__54759","vec__54762","form","new-form","G__54768","p__54769","vec__54770","G__54774","p__54778","vec__54779","_show-all-code?","new-show-all-code?","G__54784","p__54785","vec__54787","current-state","new-state","G__54790","p__54793","vec__54794","component","new-direction","G__54797","errors"],"sourcesContent":["(ns day8.re-frame-10x.events\n  (:require [mranderson048.re-frame.v0v10v6.re-frame.core :as rf]\n            [mranderson048.reagent.v0v8v0.reagent.core :as r]\n            [cljs.tools.reader.edn]\n            [day8.re-frame-10x.utils.utils :as utils :refer [spy]]\n            [day8.re-frame-10x.utils.localstorage :as localstorage]\n            [reagent.impl.batching :as batching]\n            [clojure.string :as str]\n            [goog.object]\n            [goog.string]\n            [re-frame.db]\n            [re-frame.interop]\n            [re-frame.core]\n            [re-frame.trace]\n            [day8.re-frame-10x.view.container :as container]\n            [day8.re-frame-10x.styles :as styles]\n            [clojure.set :as set]\n            [day8.re-frame-10x.metamorphic :as metam]))\n\n(defn fixed-after\n  ;; Waiting on https://github.com/Day8/re-frame/issues/447\n  [f]\n  (rf/->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (:effects context) :db)\n                           (get-in context [:effects :db])\n                           (get-in context [:coeffects :db]))\n                   event (get-in context [:coeffects :event])]\n               (f db event)                                 ;; call f for side effects\n               context))))                                  ;; context is unchanged\n\n(defn log-trace? [trace]\n  (let [render-operation? (or (= (:op-type trace) :render)\n                              (= (:op-type trace) :componentWillUnmount))\n        component-path    (get-in trace [:tags :component-path] \"\")]\n    (if-not render-operation?\n      true\n      (not (str/includes? component-path \"devtools outer\")))))\n\n(defn disable-tracing! []\n  (re-frame.trace/remove-trace-cb ::cb))\n\n(defn enable-tracing! []\n  (re-frame.trace/register-trace-cb ::cb #(rf/dispatch [:epochs/receive-new-traces %])))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn read-string-maybe [s]\n  (try (cljs.tools.reader.edn/read-string {:readers utils/default-readers} s)\n       (catch :default e\n         nil)))\n\n(rf/reg-event-db\n  :settings/panel-width%\n  (fn [db [_ width%]]\n    (localstorage/save! \"panel-width-ratio\" (max width% 0.05))\n    (assoc-in db [:settings :panel-width%] (max width% 0.05))))\n\n(rf/reg-event-db\n  :settings/window-width\n  (fn [db [_ width]]\n    (assoc-in db [:settings :window-width] width)))\n\n(rf/reg-event-db\n  :settings/selected-tab\n  (fn [db [_ selected-tab]]\n    (localstorage/save! \"selected-tab\" selected-tab)\n    (assoc-in db [:settings :selected-tab] selected-tab)))\n\n(rf/reg-event-db\n  :settings/toggle-settings\n  (fn [db _]\n    (update-in db [:settings :showing-settings?] not)))\n\n(rf/reg-event-db\n  :settings/show-panel?\n  (fn [db [_ show-panel?]]\n    (localstorage/save! \"show-panel\" show-panel?)\n    (assoc-in db [:settings :show-panel?] show-panel?)))\n\n(rf/reg-event-db\n  :settings/factory-reset\n  (fn [db _]\n    (localstorage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  :settings/user-toggle-panel\n  (fn [db _]\n    (let [now-showing?    (not (get-in db [:settings :show-panel?]))\n          external-panel? (get-in db [:settings :external-window?])\n          using-trace?    (or external-panel? now-showing?)]\n      (if now-showing?\n        (enable-tracing!)\n        (when-not external-panel?\n          (disable-tracing!)))\n      (localstorage/save! \"using-trace?\" using-trace?)\n      (localstorage/save! \"show-panel\" now-showing?)\n      (-> db\n          (assoc-in [:settings :using-trace?] using-trace?)\n          (assoc-in [:settings :show-panel?] now-showing?)))))\n\n(rf/reg-event-db\n  :settings/set-number-of-retained-epochs\n  (fn [db [_ num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      (localstorage/save! \"retained-epochs\" num)\n      (assoc-in db [:settings :number-of-epochs] num))))\n\n(def ignored-event-mw\n  [(rf/path [:settings :ignored-events]) (fixed-after #(localstorage/save! \"ignored-events\" %))])\n\n(rf/reg-event-db\n  :settings/add-ignored-event\n  ignored-event-mw\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  :settings/update-ignored-event\n  ignored-event-mw\n  (fn [ignored-events [_ id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-ignored-events\n  ignored-event-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-mw\n  [(rf/path [:settings :filtered-view-trace]) (fixed-after #(localstorage/save! \"filtered-view-trace\" %))])\n\n(rf/reg-event-db\n  :settings/add-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  :settings/remove-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  :settings/update-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [filtered-view-trace [_ id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  :settings/set-filtered-view-trace\n  filtered-view-trace-mw\n  (fn [_ [_ ignored-events]]\n    ignored-events))\n\n(def low-level-trace-mw [(rf/path [:settings :low-level-trace]) (fixed-after #(localstorage/save! \"low-level-trace\" %))])\n\n(rf/reg-event-db\n  :settings/set-low-level-trace\n  low-level-trace-mw\n  (fn [_ [_ low-level]]\n    low-level))\n\n(rf/reg-event-db\n  :settings/low-level-trace\n  low-level-trace-mw\n  (fn [low-level [_ trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  :settings/debug?\n  (fn [db [_ debug?]]\n    (assoc-in db [:settings :debug?] debug?)))\n\n(rf/reg-event-db\n  :settings/app-db-follows-events?\n  [(rf/path [:settings :app-db-follows-events?]) (fixed-after #(localstorage/save! \"app-db-follows-events?\" %))]\n  (fn [db [_ follows-events?]]\n    follows-events?))\n\n;; Global\n\n(defn mount [popup-window popup-document]\n  ;; When programming here, we need to be careful about which document and window\n  ;; we are operating on, and keep in mind that the window can close without going\n  ;; through standard react lifecycle, so we hook the beforeunload event.\n  (let [app                      (.getElementById popup-document \"--re-frame-10x--\")\n        resize-update-scheduled? (atom false)\n        handle-window-resize     (fn [e]\n                                   (when-not @resize-update-scheduled?\n                                     (batching/next-tick\n                                       (fn []\n                                         (let [width  (.-innerWidth popup-window)\n                                               height (.-innerHeight popup-window)]\n                                           (rf/dispatch [:settings/external-window-resize {:width width :height height}]))\n                                         (reset! resize-update-scheduled? false)))\n                                     (reset! resize-update-scheduled? true)))\n        handle-window-position   (let [pos (atom {})]\n                                   (fn []\n                                     ;; Only update re-frame if the windows position has changed.\n                                     (let [{:keys [left top]} @pos\n                                           screen-left (.-screenX popup-window)\n                                           screen-top  (.-screenY popup-window)]\n                                       (when (or (not= left screen-left)\n                                                 (not= top screen-top))\n                                         (rf/dispatch [:settings/external-window-position {:left screen-left :top screen-top}])\n                                         (reset! pos {:left screen-left :top screen-top})))))\n        window-position-interval (atom nil)\n        unmount                  (fn [_]\n                                   (.removeEventListener popup-window \"resize\" handle-window-resize)\n                                   (some-> @window-position-interval js/clearInterval)\n                                   nil)]\n\n\n    (styles/inject-trace-styles popup-document)\n    (goog.object/set popup-window \"onunload\" #(rf/dispatch [:global/external-closed]))\n    (r/render\n      [(r/create-class\n         {:display-name           \"devtools outer external\"\n          :component-did-mount    (fn []\n                                    (.addEventListener popup-window \"resize\" handle-window-resize)\n                                    (.addEventListener popup-window \"beforeunload\" unmount)\n                                    ;; Check the window position every 10 seconds\n                                    (reset! window-position-interval\n                                            (js/setInterval\n                                              handle-window-position\n                                              2000)))\n          :component-will-unmount unmount\n          :reagent-render         (fn [] [container/devtools-inner {:panel-type :popup}])})]\n      app)))\n\n(defn open-debugger-window\n  \"Originally copied from re-frisk.devtool/open-debugger-window\"\n  [{:keys [width height top left] :as dimensions}]\n  (let [doc-title        js/document.title\n        new-window-title (goog.string/escapeString (str \"re-frame-10x | \" doc-title))\n        new-window-html  (str \"<head><title>\"\n                              new-window-title\n                              \"</title></head><body style=\\\"margin: 0px;\\\"><div id=\\\"--re-frame-10x--\\\" class=\\\"external-window\\\"></div></body>\")]\n    ;; We would like to set the windows left and top positions to match the monitor that it was on previously, but Chrome doesn't give us\n    ;; control over this, it will only position it within the same display that it was popped out on.\n    (if-let [w (js/window.open \"about:blank\" \"re-frame-10x-popout\"\n                               (str \"width=\" width \",height=\" height \",left=\" left \",top=\" top\n                                    \",resizable=yes,scrollbars=yes,status=no,directories=no,toolbar=no,menubar=no\"))]\n      (let [d (.-document w)]\n        (when-let [el (.getElementById d \"--re-frame-10x--\")]\n          (r/unmount-component-at-node el))\n        (.open d)\n        (.write d new-window-html)\n        (goog.object/set w \"onload\" #(mount w d))\n        (.close d)\n        true)\n      false)))\n\n(rf/reg-event-fx\n  :global/launch-external\n  (fn [ctx _]\n    (if (open-debugger-window (get-in ctx [:db :settings :external-window-dimensions]))\n      (do\n        (localstorage/save! \"external-window?\" true)\n        {:db             (-> (:db ctx)\n                             (assoc-in [:settings :external-window?] true)\n                             (dissoc-in [:errors :popup-failed?]))\n         :dispatch-later [{:ms 200 :dispatch [:settings/show-panel? false]}]})\n      {:db (assoc-in (:db ctx) [:errors :popup-failed?] true)\n       :dispatch [:global/external-closed]})))\n\n(rf/reg-event-fx\n  :global/external-closed\n  (fn [ctx _]\n    (localstorage/save! \"external-window?\" false)\n    {:db             (assoc-in (:db ctx) [:settings :external-window?] false)\n     :dispatch-later [{:ms 400 :dispatch [:settings/show-panel? true]}]}))\n\n(rf/reg-event-db\n  :settings/external-window-dimensions\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ new-dim]]\n    new-dim))\n\n(rf/reg-event-db\n  :settings/external-window-resize\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {width :width height :height}]]\n    (assoc dim :width width :height height)))\n\n(rf/reg-event-db\n  :settings/external-window-position\n  [(rf/path [:settings :external-window-dimensions]) (rf/after #(localstorage/save! \"external-window-dimensions\" %))]\n  (fn [dim [_ {left :left top :top}]]\n    (assoc dim :left left :top top)))\n\n(rf/reg-event-fx\n  :global/enable-tracing\n  (fn [ctx _]\n    (enable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/disable-tracing\n  (fn [ctx _]\n    (disable-tracing!)\n    nil))\n\n(rf/reg-event-fx\n  :global/add-unload-hook\n  (fn [_ _]\n    (js/window.addEventListener \"beforeunload\" #(rf/dispatch-sync [:global/unloading? true]))\n    nil))\n\n(rf/reg-event-db\n  :global/unloading?\n  (fn [db [_ unloading?]]\n    (assoc-in db [:global :unloading?] unloading?)))\n\n;; Traces\n\n(defn save-filter-items [filter-items]\n  (localstorage/save! \"filter-items\" filter-items))\n\n(rf/reg-event-db\n  :traces/filter-items\n  (fn [db [_ filter-items]]\n    (save-filter-items filter-items)\n    (assoc-in db [:traces :filter-items] filter-items)))\n\n(rf/reg-event-db\n  :traces/add-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-input filter-type]]\n    (let [new-db (when-not (some #(= filter-input (:query %)) filter-items) ;; prevent duplicate filter strings\n                   ;; if existing, remove prior filter for :slower-than\n                   ;; TODO: rework how time filters are used.\n                   (let [filter-items (if (and (= :slower-than filter-type)\n                                               (some #(= filter-type (:filter-type %)) filter-items))\n                                        (remove #(= :slower-than (:filter-type %)) filter-items)\n                                        filter-items)]\n                     ;; add new filter\n                     (conj filter-items {:id          (random-uuid)\n                                         :query       (if (= filter-type :contains)\n                                                        (str/lower-case filter-input)\n                                                        (js/parseFloat filter-input))\n                                         :filter-type filter-type})))]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/remove-filter\n  [(rf/path [:traces :filter-items])]\n  (fn [filter-items [_ filter-id]]\n    (let [new-db (remove #(= (:id %) filter-id) filter-items)]\n      (save-filter-items new-db)\n      new-db)))\n\n(rf/reg-event-db\n  :traces/reset-filter-items\n  (fn [db _]\n    (let [new-db (dissoc-in db [:traces :filter-items])]\n      (save-filter-items (get-in new-db [:traces :filter-items]))\n      new-db)))\n\n(rf/reg-event-db\n  :traces/toggle-all-expansions\n  [(rf/path [:traces :expansions])]\n  (fn [trace-detail-expansions _]\n    (-> trace-detail-expansions\n        (assoc :overrides {})\n        (update :show-all? not))))\n\n(rf/reg-event-db\n  :traces/toggle-trace\n  [(rf/path [:traces :expansions])]\n  (fn [expansions [_ id]]\n    (let [showing? (get-in expansions [:overrides id] (:show-all? expansions))]\n      (update-in expansions [:overrides id] #(if showing? false (not %))))))\n\n(rf/reg-event-db\n  :traces/toggle-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    (let [new-categories (if (set/superset? categories new-categories)\n                           (set/difference categories new-categories)\n                           (set/union categories new-categories))]\n      (localstorage/save! \"categories\" new-categories)\n      new-categories)))\n\n(rf/reg-event-db\n  :traces/set-categories\n  [(rf/path [:traces :categories])]\n  (fn [categories [_ new-categories]]\n    new-categories))\n\n\n(rf/reg-event-db\n  :trace-panel/update-show-epoch-traces?\n  [(rf/path [:trace-panel :show-epoch-traces?]) (fixed-after #(localstorage/save! \"show-epoch-traces?\" %))]\n  (fn [_ [k show-epoch-traces?]]\n    show-epoch-traces?))\n\n;; App DB\n\n(def app-db-path-mw\n  [(rf/path [:app-db :paths]) (fixed-after #(localstorage/save! \"app-db-paths\" %))])\n\n(rf/reg-event-db\n  :app-db/create-path\n  app-db-path-mw\n  (fn [paths _]\n\n    (assoc paths (js/Date.now) {:diff? false :open? true :path nil :path-str \"\" :valid-path? true})))\n\n\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  :app-db/update-path\n  app-db-path-mw\n  (fn [paths [_ path-id path-str]]\n    (let [path  (read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (str/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n(rf/reg-event-db\n  :app-db/update-path-blur\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  :app-db/set-path-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  :app-db/set-diff-visibility\n  app-db-path-mw\n  (fn [paths [_ path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  :app-db/remove-path\n  app-db-path-mw\n  (fn [paths [_ path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  :app-db/paths\n  app-db-path-mw\n  (fn [db [_ paths]]\n    paths))\n\n#_(rf/reg-event-db\n    :app-db/remove-path\n    (fn [db [_ path]]\n      (let [new-db (update-in db [:app-db :paths] #(remove (fn [p] (= p path)) %))]\n        (localstorage/save! \"app-db-paths\" (get-in new-db [:app-db :paths]))\n        ;; TODO: remove from json-ml expansions too.\n        new-db)))\n\n#_(rf/reg-event-db\n    :app-db/add-path\n    (fn [db _]\n      (let [search-string (get-in db [:app-db :search-string])\n            path          (try\n                            (when-not (str/blank? search-string)\n                              (cljs.reader/read-string (str \"[\" search-string \"]\")))\n                            (catch :default e\n                              nil))]\n        (if (some? path)\n          (do (localstorage/save! \"app-db-paths\" (cons path (get-in db [:app-db :paths])))\n              (rf/dispatch [:app-db/toggle-expansion [path]])\n              (-> db\n                  (update-in [:app-db :paths] #(cons path %))\n                  (assoc-in [:app-db :search-string] \"\")))\n          db))))\n\n(rf/reg-event-db\n  :app-db/search-string\n  (fn [db [_ search-string]]\n    (assoc-in db [:app-db :search-string] search-string)))\n\n(rf/reg-event-db\n  :app-db/set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [db [_ paths]]\n    (localstorage/save! \"app-db-json-ml-expansions\" paths)\n    paths))\n\n(rf/reg-event-db\n  :app-db/toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions])]\n  (fn [paths [_ path]]\n    (let [new-paths (if (contains? paths path)\n                      (disj paths path)\n                      (conj paths path))]\n      (localstorage/save! \"app-db-json-ml-expansions\" new-paths)\n      new-paths)))\n\n(rf/reg-event-db\n  :app-db/reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [paths _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n  :snapshot/reset-current-epoch-app-db\n  (fn [db [_ new-id]]\n    (when (get-in db [:settings :app-db-follows-events?])\n      (let [epochs   (:epochs db)\n            match-id (or new-id\n                         ;; new-id may be nil when we call this event from :settings/play\n                         (utils/last-in-vec (get epochs :match-ids)))\n            match    (get-in epochs [:matches-by-id match-id])\n            event    (metam/matched-event (:match-info match))]\n        ;; Don't mess up the users app if there is a problem getting app-db-after.\n        (when-some [new-db (metam/app-db-after event)]\n          (reset! re-frame.db/app-db new-db))))\n    db))\n\n;;;\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-fx\n  :epochs/receive-new-traces\n  (fn [{:keys [db]} [_ new-traces]]\n    (if-let [filtered-traces (->> (filter log-trace? new-traces)\n                                  (sort-by :id))]\n      (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n            events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n            previous-traces            (get-in db [:traces :all-traces] [])\n            parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n            {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n            all-traces                 (reduce conj previous-traces filtered-traces)\n            parse-state                (metam/parse-traces parse-state filtered-traces)\n            ;; TODO:!!!!!!!!!!!!! We should be parsing everything else with the traces that span the newly matched\n            ;; epochs, not the filtered-traces, as these are only partial.\n            new-matches                (:partitions parse-state)\n            previous-matches           (get-in db [:epochs :matches] [])\n            parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n            new-matches                (remove (fn [match]\n                                                 (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                   (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n            subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) filtered-traces (get-in db [:app-db :reagent-id]))\n            sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n            subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n            subscription-matches       (rest subscription-match-state)\n\n            new-sub-state              (last subscription-match-state)\n            timing                     (mapv (fn [match]\n                                               (let [epoch-traces        (into []\n                                                                               (comp\n                                                                                 (utils/id-between-xf (:id (first match)) (:id (last match))))\n                                                                               all-traces)\n                                                     ;; TODO: handle case when there are no epoch-traces\n                                                     start-of-epoch      (nth epoch-traces 0)\n                                                     ;; TODO: optimise trace searching\n                                                     event-handler-trace (first (filter metam/event-handler? epoch-traces))\n                                                     dofx-trace          (first (filter metam/event-dofx? epoch-traces))\n                                                     event-trace         (first (filter metam/event-run? epoch-traces))\n                                                     finish-run          (or (first (filter metam/finish-run? epoch-traces))\n                                                                             (utils/last-in-vec epoch-traces))]\n                                                 {:re-frame/event-run-time     (metam/elapsed-time start-of-epoch finish-run)\n                                                  :re-frame/event-time         (:duration event-trace)\n                                                  :re-frame/event-handler-time (:duration event-handler-trace)\n                                                  :re-frame/event-dofx-time    (:duration dofx-trace)}))\n                                             new-matches)\n\n            new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                     :sub-state  sub-match\n                                                                     :timing     t})\n                                            new-matches subscription-matches timing)\n            ;; If there are new matches found, then by definition, a quiescent trace must have been received\n            ;; However in cases where we reset the db in a replay, we won't get an event match.\n            ;; We short circuit here to avoid iterating over the traces when it's unnecessary.\n            quiescent?                 (or (seq new-matches)\n                                           (filter metam/quiescent? filtered-traces))\n            all-matches                (reduce conj previous-matches new-matches)\n            retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n            first-id-to-retain         (first-match-id (first retained-matches))\n            retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                      (remove (fn [trace]\n                                                                (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                    (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)]\n        {:db       (-> db\n                       (assoc-in [:traces :all-traces] retained-traces)\n                       (update :epochs (fn [epochs]\n                                         (let [current-index (:current-epoch-index epochs)\n                                               current-id    (:current-epoch-id epochs)]\n                                           (assoc epochs\n                                             :matches retained-matches\n                                             :matches-by-id (into {} (map (juxt first-match-id identity)) retained-matches)\n                                             :match-ids (mapv first-match-id retained-matches)\n                                             :parse-state parse-state\n                                             :sub-state new-sub-state\n                                             :subscription-info subscription-info\n                                             ;; Reset current epoch to the head of the list if we got a new event in.\n                                             :current-epoch-id (if (seq new-matches) nil current-id)\n                                             :current-epoch-index (if (seq new-matches) nil current-index))))))\n         :dispatch (when quiescent? [:epochs/quiescent])})\n      ;; Else\n      {:db db})))\n\n;; TODO: this code is a bit messy, needs refactoring and cleaning up.\n(rf/reg-event-fx\n  :epochs/previous-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (dec match-array-index))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (nth (:match-ids db)\n                        (- (count (:match-ids db)) 2))]\n        {:db       (assoc db :current-epoch-id new-id)\n         :dispatch [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/next-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [current-id (:current-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (utils/find-index-in-vec (fn [x] (= current-id x)) match-ids)\n            new-id            (nth match-ids (inc match-array-index))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch   [:snapshot/reset-current-epoch-app-db new-id]})\n      (let [new-id (utils/last-in-vec (:match-ids db))]\n        {:db         (assoc db :current-epoch-id new-id)\n         :dispatch   [:snapshot/reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  :epochs/most-recent-epoch\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    {:db (assoc db :current-epoch-index nil\n                   :current-epoch-id nil)\n     :dispatch [:snapshot/reset-current-epoch-app-db (utils/last-in-vec (:match-ids db))]}))\n\n(rf/reg-event-db\n  :epochs/replay\n  [(rf/path [:epochs])]\n  (fn [epochs _]\n    (let [current-epoch-id (or (get epochs :current-epoch-id)\n                               (utils/last-in-vec (get epochs :match-ids)))\n          event-trace      (-> (get-in epochs [:matches-by-id current-epoch-id :match-info])\n                               (metam/matched-event))\n          app-db-before    (metam/app-db-before event-trace)\n          event            (get-in event-trace [:tags :event])]\n      (reset! re-frame.db/app-db app-db-before)\n      ;; Wait for quiescence\n      (assoc epochs :replay event))))\n\n(rf/reg-event-db\n  :epochs/quiescent\n  [(rf/path [:epochs])]\n  (fn [db _]\n    (if-some [event-to-replay (:replay db)]\n      (do (re-frame.core/dispatch event-to-replay)\n          (dissoc db :replay))\n      db)))\n\n(rf/reg-event-db\n  :epochs/reset\n  (fn [db]\n    (re-frame.trace/reset-tracing!)\n    (dissoc db :epochs :traces)))\n\n;;\n\n(rf/reg-event-db\n  :subs/ignore-unchanged-l2-subs?\n  [(rf/path [:subs :ignore-unchanged-subs?])]\n  (fn [_ [_ ignore?]]\n    ignore?))\n\n(rf/reg-event-db\n  :subs/open-pod?\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id open?]]\n    (assoc-in expansions [id :open?] open?)))\n\n(rf/reg-event-db\n  :subs/set-diff-visibility\n  [(rf/path [:subs :expansions])]\n  (fn [expansions [_ id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in expansions [id :open?]))]\n      (-> expansions\n          (assoc-in [id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [id :open?] open?)))))\n\n(rf/reg-event-db\n :subs/set-pinned\n [(rf/path [:subs :pinned])]\n (fn [pinned [_ id pinned?]]\n   (assoc-in pinned [id :pin?] pinned?)))\n\n(rf/reg-event-db\n  :subs/set-filter\n  [(rf/path [:subs :filter-str])]\n  (fn [_ [_ filter-value]]\n    filter-value))\n\n;;\n\n(rf/reg-event-db\n  :code/set-code-visibility\n  [(rf/path [:code :code-open?])]\n  (fn [code-open? [_ open?-path open?]]\n    (assoc-in code-open? open?-path open?)))\n\n(rf/reg-event-db\n  :code/hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    new-form))\n\n(rf/reg-event-db\n  :code/exit-hover-form\n  [(rf/path [:code :highlighted-form])]\n  (fn [form [_ new-form]]\n    (if (= form new-form)\n      nil\n      new-form)))\n\n(rf/reg-event-db\n  :code/set-show-all-code?\n  [(rf/path [:code :show-all-code?])]\n  (fn [_show-all-code? [_ new-show-all-code?]]\n    new-show-all-code?))\n\n(rf/reg-event-db\n  :code/repl-msg-state\n  [(rf/path [:code :repl-msg-state])]\n  (fn [current-state [_ new-state]]\n    (if (and (= current-state :running) (= new-state :start)) ;; Toggles between :running and :re-running to guarantee rerenderig when you continuously call this event\n      :re-running\n      (if (= new-state :start) :running :end))))\n\n;;\n\n(rf/reg-event-db\n  :component/set-direction\n  [(rf/path [:component])]\n  (fn [component [_ new-direction]]\n    (assoc component :direction new-direction)))\n\n;;\n\n(rf/reg-event-db\n  :errors/dismiss-popup-failed\n  [(rf/path [:errors])]\n  (fn [errors _]\n    (dissoc errors :popup-failed?)))\n"]}