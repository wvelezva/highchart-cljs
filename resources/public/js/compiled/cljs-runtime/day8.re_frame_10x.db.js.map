{"version":3,"sources":["day8/re_frame_10x/db.cljs"],"mappings":"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","names":["day8.re-frame-10x.db/init-db","debug?","panel-width%","day8.re_frame_10x.utils.localstorage.get.cljs$core$IFn$_invoke$arity$2","show-panel?","selected-tab","filter-items","app-db-paths","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map","json-ml-paths","external-window?","external-window-dimensions","show-epoch-traces?","using-trace?","ignored-events","low-level-trace","filtered-view-trace","id1","cljs.core/random-uuid","id2","num-epochs","follows-events?","categories","G__52988","mranderson048.re-frame.v0v10v6.re-frame.core/dispatch","G__52990","G__52991","G__52992","G__52993","G__52994","G__52995","G__52996","G__52997","G__52998","G__52999","G__53000","G__53001","G__53002","G__53003","G__53004","G__53005","G__53006","G__53007"],"sourcesContent":["(ns day8.re-frame-10x.db\n  (:require [mranderson048.re-frame.v0v10v6.re-frame.core :as rf]\n            [day8.re-frame-10x.utils.localstorage :as localstorage]))\n\n(defn init-db [debug?]\n  (let [panel-width% (localstorage/get \"panel-width-ratio\" 0.35)\n        show-panel? (localstorage/get \"show-panel\" true)\n        selected-tab (localstorage/get \"selected-tab\" :event)\n        filter-items (localstorage/get \"filter-items\" [])\n        app-db-paths (into (sorted-map) (localstorage/get \"app-db-paths\" {}))\n        json-ml-paths (localstorage/get \"app-db-json-ml-expansions\" #{})\n        external-window? (localstorage/get \"external-window?\" false)\n        external-window-dimensions (localstorage/get \"external-window-dimensions\" {:width 800 :height 800 :top 0 :left 0})\n        show-epoch-traces? (localstorage/get \"show-epoch-traces?\" true)\n        using-trace? (localstorage/get \"using-trace?\" true)\n        ignored-events (localstorage/get \"ignored-events\" {})\n        low-level-trace (localstorage/get \"low-level-trace\" {:reagent true :re-frame true})\n        filtered-view-trace (localstorage/get \"filtered-view-trace\" (let [id1 (random-uuid)\n                                                                          id2 (random-uuid)]\n                                                                      {id1 {:id id1 :ns-str \"re-com.box\" :ns 're-com.box :sort 0}\n                                                                       id2 {:id id2 :ns-str \"re-com.input-text\" :ns 're-com.input-text :sort 1}}))\n        num-epochs (localstorage/get \"retained-epochs\" 25)\n        follows-events? (localstorage/get \"app-db-follows-events?\" true)\n        categories (localstorage/get \"categories\" #{:event :sub/run :sub/create :sub/dispose})]\n    (when using-trace?\n      (rf/dispatch [:global/enable-tracing]))\n    (rf/dispatch [:settings/panel-width% panel-width%])\n    (rf/dispatch [:settings/show-panel? show-panel?])\n    (rf/dispatch [:settings/selected-tab selected-tab])\n    (rf/dispatch [:settings/set-ignored-events ignored-events])\n    (rf/dispatch [:settings/set-filtered-view-trace filtered-view-trace])\n    (rf/dispatch [:settings/set-low-level-trace low-level-trace])\n    (rf/dispatch [:settings/set-number-of-retained-epochs num-epochs])\n    (rf/dispatch [:settings/app-db-follows-events? follows-events?])\n    (rf/dispatch [:settings/debug? debug?])\n    ;; Important that window dimensions are set before we open an external window.\n    (rf/dispatch [:settings/external-window-dimensions external-window-dimensions])\n    (when external-window?\n      (rf/dispatch [:global/launch-external]))\n    (rf/dispatch [:traces/filter-items filter-items])\n    (rf/dispatch [:traces/set-categories categories])\n    (rf/dispatch [:trace-panel/update-show-epoch-traces? show-epoch-traces?])\n    (rf/dispatch [:app-db/paths app-db-paths])\n    (rf/dispatch [:app-db/set-json-ml-paths json-ml-paths])\n    (rf/dispatch [:global/add-unload-hook])\n    (rf/dispatch [:app-db/reagent-id])))\n"]}