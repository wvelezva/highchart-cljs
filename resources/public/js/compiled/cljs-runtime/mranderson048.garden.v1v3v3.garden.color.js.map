{"version":3,"sources":["mranderson048/garden/v1v3v3/garden/color.cljc"],"mappings":"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","names":["this__4439__auto__","k__4440__auto__","this__4441__auto__","k44514","else__4442__auto__","G__44537","cljs.core/Keyword","red","green","blue","hue","saturation","lightness","alpha","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__44549","vec__44550","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__44513","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__44581","coll__4436__auto__","cljs.core/hash-unordered-coll","this44515","other44516","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__44607","cljs.core/keyword-identical?","expr__44608","G__44611","G__44612","G__44614","G__44615","G__44617","G__44618","G__44620","G__44621","G__44622","G__44623","G__44625","G__44626","G__44627","G__44628","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","unused__10523__auto__","self__","G__44641","js/Error","args44523","cljs.core/aclone","mranderson048.garden.v1v3v3.garden.color/CSSColor","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__44518","extmap__4478__auto__","G__44674","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","mranderson048.garden.v1v3v3.garden.color/->CSSColor","mranderson048.garden.v1v3v3.garden.color/map->CSSColor","this","k","cljs.core.get.cljs$core$IFn$_invoke$arity$2","missing","mranderson048.garden.v1v3v3.garden.color/as-color","var_args","G__44696","mranderson048.garden.v1v3v3.garden.color/rgb","p__44702","vec__44703","r","g","b","vs","p1__44688#","cljs.core/every?","mranderson048.garden.v1v3v3.garden.util/between?","G__44706","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","mranderson048.garden.v1v3v3.garden.color.rgb.cljs$core$IFn$_invoke$arity$1","G__44716","mranderson048.garden.v1v3v3.garden.color/rgba","p__44723","vec__44727","a","G__44736","mranderson048.garden.v1v3v3.garden.color.rgba.cljs$core$IFn$_invoke$arity$1","G__44753","mranderson048.garden.v1v3v3.garden.color/hsl","p__44758","vec__44759","h","s","l","vec__44764","p1__44744#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","G__44775","cljs.core/mod","mranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$1","G__44794","mranderson048.garden.v1v3v3.garden.color/hsla","p__44806","vec__44810","G__44814","mranderson048.garden.v1v3v3.garden.color.hsla.cljs$core$IFn$_invoke$arity$1","mranderson048.garden.v1v3v3.garden.color/rgb?","color","cljs.core/map?","mranderson048.garden.v1v3v3.garden.color/hsl?","mranderson048.garden.v1v3v3.garden.color/color?","x","mranderson048.garden.v1v3v3.garden.color/hex-re","mranderson048.garden.v1v3v3.garden.color/hex?","cljs.core/boolean","cljs.core/re-matches","mranderson048.garden.v1v3v3.garden.color/hex->rgb","temp__5735__auto__","vec__44878","_","hex","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","p1__44870#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/re-seq","p1__44875#","mranderson048.garden.v1v3v3.garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic","p__44895","map__44896","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","mranderson048.garden.v1v3v3.garden.color/rgb->hex","v","mranderson048.garden.v1v3v3.garden.util.format.cljs$core$IFn$_invoke$arity$variadic","mranderson048.garden.v1v3v3.garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic","clojure.string/replace","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","hex-part","mranderson048.garden.v1v3v3.garden.color/trim-one","p__44936","map__44937","mranderson048.garden.v1v3v3.garden.color/rgb->hsl","vec__44943","p1__44932#","mx","x__4273__auto__","y__4274__auto__","mn","x__4276__auto__","y__4277__auto__","d","pred__44964","expr__44965","cljs.core/=","mranderson048.garden.v1v3v3.garden.color.hsl.cljs$core$IFn$_invoke$arity$3","p__44978","map__44979","mranderson048.garden.v1v3v3.garden.color/hsl->rgb","vec__44982","m2","m1","p1__44977#","G__44985","Math/round","G__44987","G__44988","G__44989","mranderson048.garden.v1v3v3.garden.color/hue->rgb","G__44990","G__44991","G__44992","mranderson048.garden.v1v3v3.garden.color/hsl->hex","mranderson048.garden.v1v3v3.garden.color/hex->hsl","mranderson048.garden.v1v3v3.garden.color/percent-clip","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","mranderson048.garden.v1v3v3.garden.util/clip","mranderson048.garden.v1v3v3.garden.color/rgb-clip","mranderson048.garden.v1v3v3.garden.color/as-hex","mranderson048.garden.v1v3v3.garden.color/as-rgb","mranderson048.garden.v1v3v3.garden.color/as-hsl","mranderson048.garden.v1v3v3.garden.color/restrict-rgb","m","cljs.core/select-keys","mranderson048.garden.v1v3v3.garden.color/make-color-operation","op","o","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","G__45027","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","more","color-op","mranderson048$garden$v1v3v3$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2","mranderson048.garden.v1v3v3.garden.color/color+","cljs.core/+","mranderson048.garden.v1v3v3.garden.color/color-","cljs.core/-","mranderson048.garden.v1v3v3.garden.color/color*","cljs.core/*","cljs.core//","mranderson048.garden.v1v3v3.garden.color/color-div","mranderson048.garden.v1v3v3.garden.color/update-color","field","f","or__4185__auto__","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","mranderson048.garden.v1v3v3.garden.color/rotate-hue","amount","p1__45050#","mranderson048.garden.v1v3v3.garden.color/saturate","mranderson048.garden.v1v3v3.garden.color/desaturate","mranderson048.garden.v1v3v3.garden.color/lighten","mranderson048.garden.v1v3v3.garden.color/darken","mranderson048.garden.v1v3v3.garden.color/invert","G__45058","G__45065","mranderson048.garden.v1v3v3.garden.color/mix","args-arr__4810__auto__","len__4789__auto__","i__4790__auto__","argseq__4811__auto__","cljs.core/IndexedSeq","seq45062","G__45063","cljs.core/first","cljs.core/next","G__45064","self__4776__auto__","color-1","color-2","c1","c2","G__45067","mranderson048.garden.v1v3v3.garden.util/average","mranderson048.garden.v1v3v3.garden.color.mix.cljs$core$IFn$_invoke$arity$2","mranderson048.garden.v1v3v3.garden.color/complement","args__4795__auto__","argseq__4796__auto__","mranderson048.garden.v1v3v3.garden.color/hue-rotations","seq45077","G__45078","amounts","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","G__45087","mranderson048.garden.v1v3v3.garden.color/analogous","mranderson048.garden.v1v3v3.garden.color.analogous.cljs$core$IFn$_invoke$arity$2","clockwise?","sign","mranderson048.garden.v1v3v3.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic","mranderson048.garden.v1v3v3.garden.color/triad","G__45093","mranderson048.garden.v1v3v3.garden.color/split-complement","mranderson048.garden.v1v3v3.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2","distance-from-complement","G__45097","mranderson048.garden.v1v3v3.garden.color/tetrad","mranderson048.garden.v1v3v3.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2","angle","G__45099","Math/abs","G__45105","mranderson048.garden.v1v3v3.garden.color/shades","mranderson048.garden.v1v3v3.garden.color.shades.cljs$core$IFn$_invoke$arity$2","step","c","iter__4582__auto__","s__45111","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__45113","cljs.core/chunk-buffer","i__45112","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45110","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","i","cljs.core.range.cljs$core$IFn$_invoke$arity$2","G__45123","Math/floor","mranderson048.garden.v1v3v3.garden.color/color-name->hex","mranderson048.garden.v1v3v3.garden.color/ex-info-color-name","n","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/set","cljs.core/keys","mranderson048.garden.v1v3v3.garden.color/color-name->color","cljs.core/memoize","mranderson048.garden.v1v3v3.garden.color/from-name","temp__5733__auto__","G__45139","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","mranderson048.garden.v1v3v3.garden.color/scale-color-value","value","mranderson048.garden.v1v3v3.garden.color/scale-lightness","mranderson048.garden.v1v3v3.garden.color/scale-saturation","mranderson048.garden.v1v3v3.garden.color/decrown-hex","mranderson048.garden.v1v3v3.garden.color/crown-hex","cljs.core/re-find","mranderson048.garden.v1v3v3.garden.color/expand-hex","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core/vector","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","mranderson048.garden.v1v3v3.garden.color/hex->long","js/parseInt","mranderson048.garden.v1v3v3.garden.color/long->hex","long","mranderson048.garden.v1v3v3.garden.color/weighted-mix","weight","vec__45162","vec__45165","weight-1","weight-2","p1__45161#","long-1","long-2","cljs.core/chunk-first"],"sourcesContent":["(ns mranderson048.garden.v1v3v3.garden.color\n  \"Utilities for color creation, conversion, and manipulation.\"\n  (:refer-clojure :exclude [complement])\n  #?(:cljs\n     (:require-macros\n      [mranderson048.garden.v1v3v3.garden.color :refer [defcolor-operation]]))\n  (:require\n   [clojure.string :as string]\n   [mranderson048.garden.v1v3v3.garden.util :as util])\n  #?(:clj\n     (:import clojure.lang.IFn)))\n\n;; Many of the functions in this namespace were ported or inspired by\n;; the implementations included with Sass\n;; (http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html).\n;; Some additional functions have been added such as `triad` and\n;; `tetrad` for generating sets of colors. \n\n;; Converts a color to a hexadecimal string (implementation below). \n(declare as-hex)\n\n(defrecord CSSColor [red green blue hue saturation lightness alpha]\n  IFn\n  #?(:clj\n      (invoke [this] this))\n  #?(:clj\n      (invoke [this k]\n              (get this k)))\n  #?(:clj\n      (invoke [this k missing]\n              (get this k missing)))\n  #?(:cljs\n      (-invoke [this] this))\n  #?(:cljs\n      (-invoke [this k]\n               (get this k)))\n  #?(:cljs\n      (-invoke [this k missing]\n               (get this k missing)))\n  #?(:clj\n      (applyTo [this args]\n               (clojure.lang.AFn/applyToHelper this args))))\n\n(def as-color map->CSSColor)\n\n(defn rgb\n  \"Create an RGB color.\"\n  ([[r g b :as vs]]\n     (if (every? #(util/between? % 0 255) vs)\n       (as-color {:red r :green g :blue b})\n       (throw\n        (ex-info \"RGB values must be between 0 and 255\" {}))))\n  ([r g b]\n     (rgb [r g b])))\n\n(defn rgba\n  \"Create an RGBA color.\"\n  ([[r g b a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (rgb [r g b]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([r g b a]\n     (rgba [r g b a])))\n\n(defn hsl\n  \"Create an HSL color.\"\n  ([[h s l]]\n     ;; Handle CSSUnits. \n     (let [[h s l] (map #(get % :magnitude %) [h s l])]\n       (if (and (util/between? s 0 100)\n                (util/between? l 0 100))\n         (as-color {:hue (mod h 360) :saturation s :lightness l})\n         (throw\n          (ex-info \"Saturation and lightness must be between 0(%) and 100(%)\" {})))))\n  ([h s l]\n     (hsl [h s l])))\n\n(defn hsla\n  \"Create an HSLA color.\"\n  ([[h s l a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (hsl [h s l]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([h s l a]\n     (hsla [h s l a])))\n\n(defn rgb?\n  \"Return true if color is an RGB color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:red :green :blue})))\n\n(defn hsl?\n  \"Return true if color is an HSL color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:hue :saturation :lightness})))\n\n(defn color?\n  \"Return true if x is a color.\"\n  [x]\n  (or (rgb? x) (hsl? x)))\n\n(def ^{:doc \"Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \\\"#\\\". The color portion is captured.\"}\n  ;; Quantifier must be in this order or JavaScript engines will match\n  ;; 3 chars even when 6 are provided (failing re-matches).\n  hex-re #\"#?([\\da-fA-F]{6}|[\\da-fA-F]{3})\")\n\n(defn hex?\n  \"Returns true if x is a hexadecimal color.\"\n  [x]\n  (boolean (and (string? x) (re-matches hex-re x))))\n\n(defn hex->rgb\n  \"Convert a hexadecimal color to an RGB color map.\"\n  [s]\n  (when-let [[_ hex] (re-matches hex-re s)]\n    (let [hex (if (= 3 (count hex))\n                (apply str (mapcat #(list % %) hex))\n                hex)]\n      (->> (re-seq #\"[\\da-fA-F]{2}\" hex)\n           (map #(util/string->int % 16))\n           (rgb)))))\n\n(defn rgb->hex\n  \"Convert an RGB color map to a hexadecimal color.\"\n  [{r :red g :green b :blue}]\n  (letfn [(hex-part [v]\n            (-> (util/format \"%2s\" (util/int->string v 16))\n                (string/replace \" \" \"0\")))]\n    (apply str \"#\" (map hex-part [r g b]))))\n\n(defn trim-one [x]\n  (if (< 1 x) 1 x))\n\n(defn rgb->hsl\n  \"Convert an RGB color map to an HSL color map.\"\n  [{:keys [red green blue] :as color}]\n  (if (hsl? color)\n    color\n    (let [[r g b] (map #(/ % 255) [red green blue])\n          mx (max r g b)\n          mn (min r g b)\n          d (- mx mn)\n          h (condp = mx\n              mn 0\n              r (* 60 (/ (- g b) d))\n              g (+ (* 60 (/ (- b r) d)) 120)\n              b (+ (* 60 (/ (- r g) d)) 240))\n          l (trim-one (/ (+ mx mn) 2))\n          s (trim-one\n              (cond\n                (= mx mn) 0\n                (< l 0.5) (/ d (* 2 l))\n                :else (/ d (- 2 (* 2 l)))))]\n      (hsl (mod h 360) (* 100 s) (* 100 l)))))\n\n(declare hue->rgb)\n\n;; SEE: http://www.w3.org/TR/css3-color/#hsl-color.\n(defn hsl->rgb\n  \"Convert an HSL color map to an RGB color map.\"\n  [{:keys  [hue saturation lightness] :as color}]\n  (if (rgb? color)\n    color\n    (let [h (/ hue 360.0)\n          s (/ saturation 100.0)\n          l (/ lightness 100.0)\n          m2 (if (<= l 0.5)\n               (* l (inc s))\n               (- (+ l s) (* l s)))\n          m1 (- (* 2 l) m2)\n          [r g b] (map #(Math/round (* % 0xff))\n                       [(hue->rgb m1 m2 (+ h (/ 1.0 3)))\n                        (hue->rgb m1 m2 h)\n                        (hue->rgb m1 m2 (- h (/ 1.0 3)))])]\n      (rgb [r g b]))))\n\n(defn- hue->rgb\n  [m1 m2 h]\n  (let [h (cond\n           (< h 0) (inc h)\n           (> h 1) (dec h)\n           :else h)]\n    (cond\n     (< (* 6 h) 1) (+ m1 (* (- m2 m1) h 6))\n     (< (* 2 h) 1) m2\n     (< (* 3 h) 2) (+ m1 (* (- m2 m1) (- (/ 2.0 3) h) 6))\n     :else m1)))\n\n(defn hsl->hex\n  \"Convert an HSL color map to a hexadecimal string.\"\n  [color]\n  (-> color hsl->rgb rgb->hex))\n\n(defn hex->hsl\n  \"Convert a hexadecimal color to an HSL color.\"\n  [color]\n  (-> color hex->rgb rgb->hsl))\n\n(def percent-clip\n  (partial util/clip 0 100))\n\n(def rgb-clip\n  (partial util/clip 0 255))\n\n(defn as-hex\n  \"Convert a color to a hexadecimal string.\"\n  [x]\n  (cond\n   (hex? x) x\n   (rgb? x) (rgb->hex x)\n   (hsl? x) (hsl->hex x)\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-rgb\n  \"Convert a color to a RGB.\"\n  [x]\n  (cond\n   (rgb? x) x\n   (hsl? x) (hsl->rgb x)\n   (hex? x) (hex->rgb x)\n   (number? x) (rgb (map rgb-clip [x x x]))\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-hsl\n  \"Convert a color to a HSL.\"\n  [x]\n  (cond\n   (hsl? x) x\n   (rgb? x) (rgb->hsl x)\n   (hex? x) (hex->hsl x)\n   (number? x) (hsl [x (percent-clip x) (percent-clip x)])\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn- restrict-rgb\n  [m]\n  (select-keys m [:red :green :blue]))\n\n(defn- make-color-operation\n  [op]\n  (fn color-op\n    ([a] a)\n    ([a b]\n       (let [o (comp rgb-clip op)\n             a (restrict-rgb (as-rgb a))\n             b (restrict-rgb (as-rgb b))]\n         (as-color (merge-with o a b))))\n    ([a b & more]\n       (reduce color-op (color-op a b) more))))\n\n#?(:clj\n   (defmacro ^:private defcolor-operation [name operator]\n     `(def ~name (make-color-operation ~operator))))\n\n(defcolor-operation\n  ^{:doc \"Add the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color+ +)\n\n(defcolor-operation\n  ^{:doc \"Subtract the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color- -)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color* *)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color-div /)\n\n(defn- update-color [color field f v]\n  (let [v (or (:magnitude v) v)]\n    (update-in (as-hsl color) [field] f v)))\n\n(defn rotate-hue\n  \"Rotates the hue value of a given color by amount.\"\n  [color amount]\n  (update-color color :hue (comp #(mod % 360) +) amount))\n\n(defn saturate\n  \"Increase the saturation value of a given color by amount.\"\n  [color amount]\n  (update-color color :saturation (comp percent-clip +) amount))\n\n(defn desaturate\n  \"Decrease the saturation value of a given color by amount.\"\n  [color amount]\n  (update-color color :saturation (comp percent-clip -) amount))\n\n(defn lighten\n  \"Increase the lightness value a given color by amount.\"\n  [color amount]\n  (update-color color :lightness (comp percent-clip +) amount))\n\n(defn darken\n  \"Decrease the lightness value a given color by amount.\"\n  [color amount]\n  (update-color color :lightness (comp percent-clip -) amount))\n\n(defn invert\n  \"Return the inversion of a color.\"\n  [color]\n  (as-color (merge-with - {:red 255 :green 255 :blue 255} (as-rgb color))))\n\n(defn mix\n  \"Mix two or more colors by averaging their RGB channels.\"\n  ([color-1 color-2]\n     (let [c1 (restrict-rgb (as-rgb color-1))\n           c2 (restrict-rgb (as-rgb color-2))]\n       (as-color (merge-with util/average c1 c2))))\n  ([color-1 color-2 & more]\n     (reduce mix (mix color-1 color-2) more)))\n\n;;;; Color wheel functions. \n\n(defn complement\n  \"Return the complement of a color.\"\n  [color]\n  (rotate-hue color 180))\n\n(defn- hue-rotations\n  ([color & amounts]\n     (map (partial rotate-hue color) amounts)))\n\n(defn analogous\n  \"Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction.\"\n  ([color]\n     (analogous color true))\n  ([color clockwise?]\n     (let [sign (if clockwise? + -)]\n       (hue-rotations color 0 (sign 30) (sign 60)))))\n\n(defn triad\n  \"Given a color return a triple of colors which are equidistance apart\n  on the color wheel.\"\n  [color]\n  (hue-rotations color 0 120 240))\n\n(defn split-complement\n  \"Given a color return a triple of the color and the two colors on\n  either side of it's complement.\"\n  ([color]\n     (split-complement color 130))\n  ([color distance-from-complement]\n     (let [d (util/clip 1 179 distance-from-complement)]\n         (hue-rotations color 0 d (- d)))))\n\n(defn tetrad\n  \"Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed).\"\n  ([color]\n     (tetrad color 90))\n  ([color angle]\n     (let [a (util/clip 1 90 (Math/abs (:magnitude angle angle)))\n           color-2 (rotate-hue color a)]\n       [(rotate-hue color 0)\n        (complement color)\n        color-2\n        (complement color-2)])))\n\n(defn shades\n  \"Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list.\"\n  ([color]\n     (shades color 10))\n  ([color step]\n     (let [c (as-hsl color)]\n       (for [i (range 1 (Math/floor (/ 100.0 step)))]\n         (assoc c :lightness (* i step))))))\n\n;; ---------------------------------------------------------------------\n;; CSS color name conversion\n\n(def color-name->hex\n  {:aquamarine \"#7fffd4\"\n   :aliceblue \"#f0f8ff\"\n   :antiquewhite \"#faebd7\"\n   :aqua \"#00ffff\"\n   :azure \"#f0ffff\"\n   :beige \"#f5f5dc\"\n   :bisque \"#ffe4c4\"\n   :black \"#000000\"\n   :blanchedalmond \"#ffebcd\"\n   :blue \"#0000ff\"\n   :blueviolet \"#8a2be2\"\n   :brown \"#a52a2a\"\n   :burlywood \"#deb887\"\n   :cadetblue \"#5f9ea0\"\n   :chartreuse \"#7fff00\"\n   :chocolate \"#d2691e\"\n   :coral \"#ff7f50\"\n   :cornflowerblue \"#6495ed\"\n   :cornsilk \"#fff8dc\"\n   :crimson \"#dc143c\"\n   :cyan \"#00ffff\"\n   :darkblue \"#00008b\"\n   :darkcyan \"#008b8b\"\n   :darkgoldenrod \"#b8860b\"\n   :darkgray \"#a9a9a9\"\n   :darkgreen \"#006400\"\n   :darkgrey \"#a9a9a9\"\n   :darkkhaki \"#bdb76b\"\n   :darkmagenta \"#8b008b\"\n   :darkolivegreen \"#556b2f\"\n   :darkorange \"#ff8c00\"\n   :darkorchid \"#9932cc\"\n   :darkred \"#8b0000\"\n   :darksalmon \"#e9967a\"\n   :darkseagreen \"#8fbc8f\"\n   :darkslateblue \"#483d8b\"\n   :darkslategray \"#2f4f4f\"\n   :darkslategrey \"#2f4f4f\"\n   :darkturquoise \"#00ced1\"\n   :darkviolet \"#9400d3\"\n   :deeppink \"#ff1493\"\n   :deepskyblue \"#00bfff\"\n   :dimgray \"#696969\"\n   :dimgrey \"#696969\"\n   :dodgerblue \"#1e90ff\"\n   :firebrick \"#b22222\"\n   :floralwhite \"#fffaf0\"\n   :forestgreen \"#228b22\"\n   :fuchsia \"#ff00ff\"\n   :gainsboro \"#dcdcdc\"\n   :ghostwhite \"#f8f8ff\"\n   :gold \"#ffd700\"\n   :goldenrod \"#daa520\"\n   :gray \"#808080\"\n   :green \"#008000\"\n   :greenyellow \"#adff2f\"\n   :honeydew \"#f0fff0\"\n   :hotpink \"#ff69b4\"\n   :indianred \"#cd5c5c\"\n   :indigo \"#4b0082\"\n   :ivory \"#fffff0\"\n   :khaki \"#f0e68c\"\n   :lavender \"#e6e6fa\"\n   :lavenderblush \"#fff0f5\"\n   :lawngreen \"#7cfc00\"\n   :lemonchiffon \"#fffacd\"\n   :lightblue \"#add8e6\"\n   :lightcoral \"#f08080\"\n   :lightcyan \"#e0ffff\"\n   :lightgoldenrodyellow \"#fafad2\"\n   :lightgray \"#d3d3d3\"\n   :lightgreen \"#90ee90\"\n   :lightgrey \"#d3d3d3\"\n   :lightpink \"#ffb6c1\"\n   :lightsalmon \"#ffa07a\"\n   :lightseagreen \"#20b2aa\"\n   :lightskyblue \"#87cefa\"\n   :lightslategray \"#778899\"\n   :lightslategrey \"#778899\"\n   :lightsteelblue \"#b0c4de\"\n   :lightyellow \"#ffffe0\"\n   :lime \"#00ff00\"\n   :limegreen \"#32cd32\"\n   :linen \"#faf0e6\"\n   :magenta \"#ff00ff\"\n   :maroon \"#800000\"\n   :mediumaquamarine \"#66cdaa\"\n   :mediumblue \"#0000cd\"\n   :mediumorchid \"#ba55d3\"\n   :mediumpurple \"#9370db\"\n   :mediumseagreen \"#3cb371\"\n   :mediumslateblue \"#7b68ee\"\n   :mediumspringgreen \"#00fa9a\"\n   :mediumturquoise \"#48d1cc\"\n   :mediumvioletred \"#c71585\"\n   :midnightblue \"#191970\"\n   :mintcream \"#f5fffa\"\n   :mistyrose \"#ffe4e1\"\n   :moccasin \"#ffe4b5\"\n   :navajowhite \"#ffdead\"\n   :navy \"#000080\"\n   :oldlace \"#fdf5e6\"\n   :olive \"#808000\"\n   :olivedrab \"#6b8e23\"\n   :orange \"#ffa500\"\n   :orangered \"#ff4500\"\n   :orchid \"#da70d6\"\n   :palegoldenrod \"#eee8aa\"\n   :palegreen \"#98fb98\"\n   :paleturquoise \"#afeeee\"\n   :palevioletred \"#db7093\"\n   :papayawhip \"#ffefd5\"\n   :peachpuff \"#ffdab9\"\n   :peru \"#cd853f\"\n   :pink \"#ffc0cb\"\n   :plum \"#dda0dd\"\n   :powderblue \"#b0e0e6\"\n   :purple \"#800080\"\n   :red \"#ff0000\"\n   :rosybrown \"#bc8f8f\"\n   :royalblue \"#4169e1\"\n   :saddlebrown \"#8b4513\"\n   :salmon \"#fa8072\"\n   :sandybrown \"#f4a460\"\n   :seagreen \"#2e8b57\"\n   :seashell \"#fff5ee\"\n   :sienna \"#a0522d\"\n   :silver \"#c0c0c0\"\n   :skyblue \"#87ceeb\"\n   :slateblue \"#6a5acd\"\n   :slategray \"#708090\"\n   :slategrey \"#708090\"\n   :snow \"#fffafa\"\n   :springgreen \"#00ff7f\"\n   :steelblue \"#4682b4\"\n   :tan \"#d2b48c\"\n   :teal \"#008080\"\n   :thistle \"#d8bfd8\"\n   :tomato \"#ff6347\"\n   :turquoise \"#40e0d0\"\n   :violet \"#ee82ee\"\n   :wheat \"#f5deb3\"\n   :white \"#ffffff\"\n   :whitesmoke \"#f5f5f5\"\n   :yellow \"#ffff00\"\n   :yellowgreen \"#9acd32\"})\n\n(defn- ex-info-color-name\n  \"Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors.\"\n  [n]\n  (ex-info\n   (str \"Unknown color \" (pr-str n) \" see (:expected (ex-data e)) for a list of color names\")\n   {:given n\n    :expected (set (keys color-name->hex))}))\n\n(def\n  ^{:private true\n    :doc \"Helper function for from-name.\"}\n  color-name->color\n  (memoize (fn [k] (color-name->hex k))))\n\n(defn from-name\n  \"Given a CSS color name n return an instance of CSSColor.\"\n  [n]\n  (if-let [h (color-name->color (keyword n))]\n    h\n    (throw (ex-info-color-name n))))\n\n(defn- scale-color-value\n  [value amount]\n  (+ value (if (pos? amount)\n             (* (- 100 value) (/ amount 100))\n             (/ (* value amount) 100))))\n\n(defn scale-lightness\n  \"Scale the lightness of a color by amount\"\n  [color amount]\n  (update-color color :lightness scale-color-value amount))\n\n(defn scale-saturation\n  \"Scale the saturation of a color by amount\"\n  [color amount]\n  (update-color color :saturation scale-color-value amount))\n\n(defn- decrown-hex [hex]\n  (string/replace hex #\"^#\" \"\"))\n\n(defn- crown-hex [hex]\n  (if (re-find #\"^#\" hex)\n    hex\n    (str \"#\" hex)))\n\n(defn- expand-hex\n  \"(expand-hex \\\"#abc\\\") -> \\\"aabbcc\\\"\n   (expand-hex \\\"333333\\\") -> \\\"333333\\\"\"\n  [hex]\n  (as-> (decrown-hex hex) _\n        (cond\n         (= 3 (count _)) (string/join (mapcat vector _ _))\n         (= 1 (count _)) (string/join (repeat 6 _))\n         :else _)))\n\n(defn- hex->long\n  \"(hex->long \\\"#abc\\\") -> 11189196\"\n  [hex]\n  (-> hex\n      (string/replace #\"^#\" \"\")\n      (expand-hex)\n      #?(:clj (Long/parseLong 16)\n         :cljs (js/parseInt 16))))\n\n(defn- long->hex\n  \"(long->hex 11189196) -> \\\"aabbcc\\\"\"\n  [long]\n  #?(:clj (Integer/toHexString long)\n     :cljs (.toString long 16)))\n\n(defn weighted-mix\n  \"`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string.\"\n  [color-1 color-2 weight]\n  (let [[weight-1 weight-2] (map #(/ % 100) [(- 100 weight) weight])\n        [long-1 long-2] (map (comp hex->long as-hex)\n                             [color-1 color-2])]\n    (-> (+ (* long-1 weight-1) (* long-2 weight-2))\n        (long->hex)\n        (expand-hex)\n        (crown-hex))))\n"]}