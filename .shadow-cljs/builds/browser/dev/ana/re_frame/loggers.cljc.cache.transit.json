["^ ","~:output",["^ ","~:js","goog.provide('re_frame.loggers');\ngoog.require('cljs.core');\ngoog.require('clojure.set');\n/**\n * Holds the current set of logging functions.\n * By default, re-frame uses the functions provided by js/console.\n * Use `set-loggers!` to change these defaults\n *   \n */\nre_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\nreturn cljs.core.List.EMPTY;\n}))], null));\nre_frame.loggers.console = (function re_frame$loggers$console(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___51816 = arguments.length;\nvar i__4790__auto___51817 = (0);\nwhile(true){\nif((i__4790__auto___51817 < len__4789__auto___51816)){\nargs__4795__auto__.push((arguments[i__4790__auto___51817]));\n\nvar G__51818 = (i__4790__auto___51817 + (1));\ni__4790__auto___51817 = G__51818;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((1) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((1)),(0),null)):null);\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4796__auto__);\n});\n\n(re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\nif(cljs.core.contains_QMARK_(cljs.core.deref(re_frame.loggers.loggers),level)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"re-frame: log called with unknown level: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(level)].join(''),\"\\n\",\"(contains? (clojure.core/deref loggers) level)\"].join('')));\n}\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__51801 = cljs.core.deref(re_frame.loggers.loggers);\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__51801) : level.call(null,G__51801));\n})(),args);\n}));\n\n(re_frame.loggers.console.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(re_frame.loggers.console.cljs$lang$applyTo = (function (seq51793){\nvar G__51794 = cljs.core.first(seq51793);\nvar seq51793__$1 = cljs.core.next(seq51793);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__51794,seq51793__$1);\n}));\n\n/**\n * Change the set (or a subset) of logging functions used by re-frame.\n *   `new-loggers` should be a map with the same keys as `loggers` (above)\n */\nre_frame.loggers.set_loggers_BANG_ = (function re_frame$loggers$set_loggers_BANG_(new_loggers){\nif(cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(new_loggers)),cljs.core.set(cljs.core.keys(cljs.core.deref(re_frame.loggers.loggers)))))){\n} else {\nthrow (new Error([\"Assert failed: \",\"Unknown keys in new-loggers\",\"\\n\",\"(empty? (difference (set (keys new-loggers)) (-> (clojure.core/deref loggers) keys set)))\"].join('')));\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.loggers.loggers,cljs.core.merge,new_loggers);\n});\n/**\n * Get the current logging functions used by re-frame.\n */\nre_frame.loggers.get_loggers = (function re_frame$loggers$get_loggers(){\nreturn cljs.core.deref(re_frame.loggers.loggers);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.loggers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^M","~$cljs.core","^N","~$goog","^O"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$difference","^M"],"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^H",["^V",["^Q",["^M","~:refer",["^S"]]]]]],"~:flags",["^ ","^Q",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^O","^N","^M"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","re_frame/loggers.cljc"],"~:compiled-at",1581954190944,"~:resource-name","re_frame/loggers.cljc","~:warnings",[],"~:source","(ns re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;AAaA;;;;;;AAAeA,AAKb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA0B,AAACC,AAAsBC,AACvB,AAACC,AAAsBD,AACvB,AAACE,AAAsBF,AACvB,AAAI,AAASA,AACX,AAACG,AAAsBH,AACvB,AAACD,AAAsBC,AACzB,AAAA,AAAI,AAAYA,AACd,AAACI,AAAyBJ;AAD5B,AAAA;;AAU7B,AAAA,AAAA,AAAAK,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACHM,AAAQC;AADX,AAEE,AAAQ,AAAA,AAAAE,AAACC,AAAWxB,AAAQoB;AAA5B;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAmC,AAAA,AAAiDF;;;AACpF,AAACK,AAAM,AAAAC,AAAA,AAAAH,AAAQvB;AAAR,AAAA,AAAA0B,AAAAA,AAACN,AAAAA,AAAAA;AAAgBC;;;AAH1B,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAMA;;;;AAAA,AAAMY,AAGHC;AAHH,AAIE,AAAS,AAACC,AAAO,AAACC,AAAW,AAACC,AAAI,AAACC,AAAKJ,AAAc,AAAA,AAAA,AAAAL,AAAKvB,AAAQgC,AAAKD;AAAxE;AAAA,AAAA,AAAA,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAACW,AAAMjC,AAAQkC,AAAMN;;AAEvB;;;AAAA,AAAMO;AAAN,AAAA,AAAAZ,AAGGvB","names",["re-frame.loggers/loggers","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.group.bind","js/console.groupEnd.bind","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","re-frame.loggers/console","seq51793","G__51794","cljs.core/first","cljs.core/next","self__4776__auto__","level","args","js/Error","cljs.core/deref","cljs.core/contains?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__51801","re-frame.loggers/set-loggers!","new-loggers","cljs.core/empty?","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core/set","cljs.core/keys","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","re-frame.loggers/get-loggers"]]],"~:cache-keys",["~#cmap",[["^11","goog/dom/tagname.js"],[1573583361000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^O","~$goog.dom.HtmlElement"]]],["^11","goog/math/math.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","~$goog.array","~$goog.asserts"]]],["^11","goog/html/trustedtypes.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/labs/useragent/browser.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1C","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^11","goog/html/safeurl.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1D","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1G"]]],["^11","re_frame/loggers.cljc"],[1568735301000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^N","^M"]]],["^11","goog/array/array.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1D"]]],["^11","goog/debug/error.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/dom/nodetype.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/string/typedstring.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/object/object.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/dom/asserts.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1D"]]],"~:SHADOW-TIMESTAMP",[1580514166000,1576261309000],["^11","goog/math/long.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1D","~$goog.reflect"]]],["^11","goog/html/trustedresourceurl.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1D","~$goog.html.trustedtypes","^1J","^1K","^1L","^1M"]]],["^11","goog/string/internal.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/functions/functions.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/html/safestyle.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1C","^1D","~$goog.html.SafeUrl","^1L","^1M","^1G"]]],["^11","goog/dom/safe.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1D","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^1Q","^1I","~$goog.html.uncheckedconversions","^1L","^1G"]]],["^11","goog/structs/map.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^11","goog/html/safehtml.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1C","^1D","~$goog.dom.TagName","~$goog.dom.tags","^1U","^1V","~$goog.html.SafeStyleSheet","^1Q","^1I","^1P","^1J","^1K","~$goog.labs.userAgent.browser","^1F","^1L","^1M","^1G"]]],["^11","goog/dom/tags.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1F"]]],["^11","goog/asserts/asserts.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^11","goog/uri/uri.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1C","^1D","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^11","goog/i18n/bidi.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/fs/url.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/base.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",[]]],["^11","goog/structs/structs.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1C","^1F"]]],["^11","goog/string/string.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","~$goog.dom.safe","^1W","^1L","^1G"]]],["^11","goog/reflect/reflect.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/labs/useragent/util.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1G"]]],["^11","goog/string/stringbuffer.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","goog/iter/iter.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1C","^1D","^1S","~$goog.math"]]],["^11","goog/html/uncheckedconversions.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1D","^1T","^1U","^1V","^20","^1Q","^1I","^1L","^1G"]]],["^11","goog/dom/htmlelement.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O"]]],["^11","cljs/core.cljs"],[1576261309000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["~$goog.math.Long","~$goog.math.Integer","^24","^1F","^1C","~$goog.Uri","~$goog.string.StringBuffer"]]],["^11","goog/html/safescript.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1D","^1P","^1L","^1M"]]],["^11","goog/html/safestylesheet.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1C","^1D","^1V","^1F","^1L","^1M","^1G"]]],["^11","goog/math/integer.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1O"]]],["^11","clojure/set.cljs"],[1576261309000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^N"]]],["^11","goog/uri/utils.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1C","^1D","^24"]]],["^11","goog/string/const.js"],[1573583361000,"^1>",["^ ","^1?",null,"^1@",["^F",[]],"^1A",["^O","^1D","^1M"]]]]],"~:clj-info",["^ ","jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1551455708000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1551455708000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1540637940000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1551455708000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1551455708000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1501012539000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1551455708000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1576261309000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",21],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^N","^O","^O"],"^P",["^F",["^Q"]],"~:shadow/js-access-global",["^F",["Error"]],"^R",["^ ","^S","^M"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^32",true,"^G","~$re-frame.loggers/loggers","^6","re_frame/loggers.cljc","^:",23,"^8",1,"^7",14,"^9",14,"~:tag","~$cljs.core/Atom","~:doc","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",35,"^8",7,"^9",35,"^:",14,"~:arglists",["^V",["~$quote",["^V",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^V",["^3;","^3<"]]],"^39",["^V",[["^3;","~$&","^3<"]]],"~:arglists-meta",["^V",[null]]]],"^G","~$re-frame.loggers/console","^6","re_frame/loggers.cljc","^:",14,"^3=",["^ ","^3>",true,"^3?",1,"^3@",1,"^3A",[["^V",["^3;","^3<"]]],"^39",["^V",[["^3;","~$&","^3<"]]],"^3B",["^V",[null]]],"^3A",[["^V",["^3;","^3<"]]],"~:protocol-impl",null,"^3?",1,"^3B",["^V",[null]],"^8",1,"^3>",true,"~:methods",[["^ ","^3?",1,"^3>",true,"^34","~$any"]],"^7",35,"~:ret-tag","^3F","^9",35,"^3@",1,"~:fn-var",true,"^39",["^V",[["^3;","~$&","^3<"]]]],"~$set-loggers!",["^ ","^38",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",41,"^8",7,"^9",41,"^:",19,"^39",["^V",["^3:",["^V",[["~$new-loggers"]]]]],"^36","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^G","~$re-frame.loggers/set-loggers!","^6","re_frame/loggers.cljc","^:",19,"^3A",["^V",[["^3J"]]],"^3D",null,"^3B",["^V",[null,null]],"^8",1,"^3>",false,"^7",41,"^3G",["^F",[null,"^3F"]],"^9",41,"^3@",1,"^3H",true,"^39",["^V",["^3:",["^V",[["^3J"]]]]],"^36","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$get-loggers",["^ ","^38",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",48,"^8",7,"^9",48,"^:",18,"^39",["^V",["^3:",["^V",[[]]]]],"^36","Get the current logging functions used by re-frame."],"^G","~$re-frame.loggers/get-loggers","^6","re_frame/loggers.cljc","^:",18,"^3A",["^V",[[]]],"^3D",null,"^3B",["^V",[null,null]],"^8",1,"^3>",false,"^7",48,"^3G","^3F","^9",48,"^3@",0,"^3H",true,"^39",["^V",["^3:",["^V",[[]]]]],"^36","Get the current logging functions used by re-frame."]],"^T",["^ ","^N","^N"],"~:cljs.analyzer/constants",["^ ","^P",["^F",["~:group","~:warn","~:error","~:groupEnd","~:log"]],"~:order",["^3S","^3P","^3Q","^3O","^3R"]],"^Y",["^ ","^Q",["^F",[]]],"^Z",["^ "],"^[",["^O","^N","^M"]],"^J","^H","~:ns-specs",["^ "],"~:ns-spec-vars",["^F",[]],"~:compiler-options",["^1=",[["^3W","~:static-fns"],true,["^3W","~:shadow-tweaks"],null,["^3W","~:elide-asserts"],false,["^3W","~:optimize-constants"],null,["^3W","^14"],null,["^3W","~:external-config"],null,["^3W","~:tooling-config"],null,["^3W","~:emit-constants"],null,["^3W","~:load-tests"],null,["^3W","~:form-size-threshold"],null,["^3W","~:infer-externs"],true,["^3W","^16"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3W","~:fn-invoke-direct"],null,["^3W","~:source-map"],"/dev/null"]]]