["^ ","~:output",["^ ","~:js","goog.provide('zprint.zprint');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('zprint.zfns');\ngoog.require('zprint.ansi');\ngoog.require('zprint.config');\ngoog.require('zprint.zutil');\ngoog.require('rewrite_clj.parser');\ngoog.require('rewrite_clj.zip');\n/**\n * Produce a blank string of desired size.\n */\nzprint.zprint.blanks = (function zprint$zprint$blanks(n){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\" \"));\n});\n/**\n * Produce a dot string of desired size.\n */\nzprint.zprint.dots = (function zprint$zprint$dots(n){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\".\"));\n});\n/**\n * error\n */\nzprint.zprint.indent = (function zprint$zprint$indent(){\nreturn null;\n});\n/**\n * Make a version of conj! that take multiple arguments.\n */\nzprint.zprint.conj_it_BANG_ = (function zprint$zprint$conj_it_BANG_(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___53167 = arguments.length;\nvar i__4790__auto___53168 = (0);\nwhile(true){\nif((i__4790__auto___53168 < len__4789__auto___53167)){\nargs__4795__auto__.push((arguments[i__4790__auto___53168]));\n\nvar G__53169 = (i__4790__auto___53168 + (1));\ni__4790__auto___53168 = G__53169;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((0) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((0)),(0),null)):null);\nreturn zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(argseq__4796__auto__);\n});\n\n(zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (rest){\nvar out = cljs.core.first(rest);\nvar more = cljs.core.next(rest);\nwhile(true){\nif(more){\nvar G__53170 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(more));\nvar G__53171 = cljs.core.next(more);\nout = G__53170;\nmore = G__53171;\ncontinue;\n} else {\nreturn out;\n}\nbreak;\n}\n}));\n\n(zprint.zprint.conj_it_BANG_.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(zprint.zprint.conj_it_BANG_.cljs$lang$applyTo = (function (seq51635){\nvar self__4777__auto__ = this;\nreturn self__4777__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq51635));\n}));\n\n/**\n * Do split for newlines, instead of using regular expressions.\n */\nzprint.zprint.split_lf = (function zprint$zprint$split_lf(s){\nvar input = s;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(input)){\nreturn out;\n} else {\nvar next_lf = clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(input,\"\\n\");\nvar chunk = (cljs.core.truth_(next_lf)?cljs.core.subs.cljs$core$IFn$_invoke$arity$3(input,(0),next_lf):input);\nvar G__53172 = (cljs.core.truth_(next_lf)?cljs.core.subs.cljs$core$IFn$_invoke$arity$2(input,(next_lf + (1))):null);\nvar G__53173 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,chunk);\ninput = G__53172;\nout = G__53173;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Do split for newlines, instead of using regular expressions.\n *   Maximum split is 2.\n */\nzprint.zprint.split_lf_2 = (function zprint$zprint$split_lf_2(s){\nvar temp__5733__auto__ = clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(s,\"\\n\");\nif(cljs.core.truth_(temp__5733__auto__)){\nvar next_lf = temp__5733__auto__;\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.subs.cljs$core$IFn$_invoke$arity$3(s,(0),next_lf),cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s,(next_lf + (1)))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);\n}\n});\nzprint.zprint.zpmap = (function zprint$zprint$zpmap(var_args){\nvar G__51666 = arguments.length;\nswitch (G__51666) {\ncase 3:\nreturn zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$3 = (function (options,f,coll){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,coll);\n}));\n\n(zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$4 = (function (options,f,coll1,coll2){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$3(f,coll1,coll2);\n}));\n\n(zprint.zprint.zpmap.cljs$lang$maxFixedArity = 4);\n\n/**\n * Takes an option map and the return from zfuture.  If the\n *   options map has (:parallel? options) as true, then deref\n *   the value, otherwise just pass it through.\n */\nzprint.zprint.zat = (function zprint$zprint$zat(options,value){\nreturn value;\n});\nzprint.zprint.fzprint_dbg = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\n/**\n * Accept a style-vec that we are about to hand to style-lines, and\n *   output it if called for, to aid in debugging.\n */\nzprint.zprint.log_lines = (function zprint$zprint$log_lines(p__51678,dbg_output,ind,style_vec){\nvar map__51680 = p__51678;\nvar map__51680__$1 = (((((!((map__51680 == null))))?(((((map__51680.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51680.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51680):map__51680);\nvar options = map__51680__$1;\nvar dbg_print_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51680__$1,new cljs.core.Keyword(null,\"dbg-print?\",\"dbg-print?\",-660113872));\nvar dbg_indent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51680__$1,new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778));\nvar in_hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51680__$1,new cljs.core.Keyword(null,\"in-hang?\",\"in-hang?\",-1065695639));\nif(cljs.core.truth_(dbg_print_QMARK_)){\nif(cljs.core.truth_(style_vec)){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([dbg_indent,dbg_output,\"--------------\",\"in-hang?\",in_hang_QMARK_], 0));\n\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.str,zprint.zprint.blanks(ind),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,style_vec))], 0));\n} else {\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([dbg_indent,dbg_output,\"--------------- no style-vec\"], 0));\n}\n} else {\nreturn null;\n}\n});\n/**\n * Show this thing as a function?\n */\nzprint.zprint.showfn_QMARK_ = (function zprint$zprint$showfn_QMARK_(fn_map,f){\nif((!(typeof f === 'string'))){\nvar f_str = cljs.core.str.cljs$core$IFn$_invoke$arity$1(f);\nvar or__4185__auto__ = (fn_map.cljs$core$IFn$_invoke$arity$1 ? fn_map.cljs$core$IFn$_invoke$arity$1(f_str) : fn_map.call(null,f_str));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nvar or__4185__auto____$1 = cljs.core.re_find(/clojure/,f_str);\nif(cljs.core.truth_(or__4185__auto____$1)){\nreturn or__4185__auto____$1;\n} else {\nif((f instanceof cljs.core.Symbol)){\ntry{var or__4185__auto____$2 = cljs.core.re_find(/clojure/,cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(f))));\nif(cljs.core.truth_(or__4185__auto____$2)){\nreturn or__4185__auto____$2;\n} else {\nvar G__51687 = cljs.core.name(f);\nreturn (fn_map.cljs$core$IFn$_invoke$arity$1 ? fn_map.cljs$core$IFn$_invoke$arity$1(G__51687) : fn_map.call(null,G__51687));\n}\n}catch (e51686){var e = e51686;\nreturn null;\n}} else {\nreturn null;\n}\n}\n}\n} else {\nreturn null;\n}\n});\n/**\n * Show this thing as a user defined function?  Assumes that we\n *   have already handled any clojure defined functions!\n */\nzprint.zprint.show_user_fn_QMARK_ = (function zprint$zprint$show_user_fn_QMARK_(options,f){\nif((!(typeof f === 'string'))){\nvar f_str = cljs.core.str.cljs$core$IFn$_invoke$arity$1(f);\nvar user_fn_map = new cljs.core.Keyword(null,\"user-fn-map\",\"user-fn-map\",-908243227).cljs$core$IFn$_invoke$arity$1(options);\nvar or__4185__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(user_fn_map,f_str);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nif((f instanceof cljs.core.Symbol)){\ntry{var or__4185__auto____$1 = (!(cljs.core.empty_QMARK_(cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ns\",\"ns\",441598760).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(f))))));\nif(or__4185__auto____$1){\nreturn or__4185__auto____$1;\n} else {\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(user_fn_map,cljs.core.name(f));\n}\n}catch (e51712){var e = e51712;\nreturn null;\n}} else {\nreturn null;\n}\n}\n} else {\nreturn null;\n}\n});\nzprint.zprint.right_separator_map = new cljs.core.PersistentArrayMap(null, 3, [\")\",(1),\"]\",(1),\"}\",(1)], null);\n/**\n * Given the fn-style, is the first output good enough to be worth\n *   doing. p is pretty, which is typically hanging, and b is basic, which\n *   is typically flow. p-count is the number of elements in the hang.\n */\nzprint.zprint.good_enough_QMARK_ = (function zprint$zprint$good_enough_QMARK_(caller,p__51722,fn_style,p_count,indent_diff,p__51723,p__51724){\nvar map__51727 = p__51722;\nvar map__51727__$1 = (((((!((map__51727 == null))))?(((((map__51727.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51727.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51727):map__51727);\nvar options = map__51727__$1;\nvar map__51728 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51727__$1,new cljs.core.Keyword(null,\"tuning\",\"tuning\",-48660925));\nvar map__51728__$1 = (((((!((map__51728 == null))))?(((((map__51728.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51728.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51728):map__51728);\nvar hang_flow = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51728__$1,new cljs.core.Keyword(null,\"hang-flow\",\"hang-flow\",428126548));\nvar hang_type_flow = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51728__$1,new cljs.core.Keyword(null,\"hang-type-flow\",\"hang-type-flow\",-1585576590));\nvar hang_flow_limit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51728__$1,new cljs.core.Keyword(null,\"hang-flow-limit\",\"hang-flow-limit\",389146586));\nvar general_hang_adjust = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51728__$1,new cljs.core.Keyword(null,\"general-hang-adjust\",\"general-hang-adjust\",-1631406987));\nvar hang_if_equal_flow_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51728__$1,new cljs.core.Keyword(null,\"hang-if-equal-flow?\",\"hang-if-equal-flow?\",-1113113992));\nvar map__51729 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51727__$1,caller);\nvar map__51729__$1 = (((((!((map__51729 == null))))?(((((map__51729.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51729.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51729):map__51729);\nvar hang_expand = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51729__$1,new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559));\nvar hang_diff = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51729__$1,new cljs.core.Keyword(null,\"hang-diff\",\"hang-diff\",-1575205424));\nvar hang_size = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51729__$1,new cljs.core.Keyword(null,\"hang-size\",\"hang-size\",-347944063));\nvar hang_adjust = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51729__$1,new cljs.core.Keyword(null,\"hang-adjust\",\"hang-adjust\",-613514382));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51727__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51727__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar dbg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51727__$1,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771));\nvar vec__51730 = p__51723;\nvar p_lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51730,(0),null);\nvar p_maxwidth = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51730,(1),null);\nvar p_length_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51730,(2),null);\nvar p_what = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51730,(3),null);\nvar vec__51733 = p__51724;\nvar b_lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51733,(0),null);\nvar b_maxwidth = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51733,(1),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51733,(2),null);\nvar b_what = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51733,(3),null);\nvar p_last_maxwidth = cljs.core.last(p_length_seq);\nvar hang_diff__$1 = (function (){var or__4185__auto__ = hang_diff;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (0);\n}\n})();\nvar hang_expand__$1 = (function (){var or__4185__auto__ = hang_expand;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn 1000.0;\n}\n})();\nvar hang_adjust__$1 = (function (){var or__4185__auto__ = hang_adjust;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn general_hang_adjust;\n}\n})();\nvar options__$1 = (cljs.core.truth_((function (){var or__4185__auto__ = p_what;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn b_what;\n}\n})())?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771),true):options);\nvar result = ((cljs.core.not(b_lines))?true:(function (){var and__4174__auto__ = p_lines;\nif(cljs.core.truth_(and__4174__auto__)){\nif((p_last_maxwidth <= (width - (zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1(rightcnt) : zprint.zprint.fix_rightcnt.call(null,rightcnt))))){\nif((p_maxwidth <= width)){\nvar or__4185__auto__ = (p_lines === (0));\nif(or__4185__auto__){\nreturn or__4185__auto__;\n} else {\nif((b_lines > (0))){\nif((p_count > (0))){\nif(cljs.core.truth_(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(p_lines,b_lines))?hang_if_equal_flow_QMARK_:false))){\nreturn true;\n} else {\nif((((indent_diff <= hang_diff__$1))?true:(((p_lines - (1)) / p_count) <= hang_expand__$1))){\nif((cljs.core.truth_(hang_size)?(p_lines < hang_size):true)){\nvar factor = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style,new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173)))?hang_type_flow:hang_flow);\nif((p_lines > hang_flow_limit)){\nreturn ((p_lines - (1)) <= b_lines);\n} else {\nreturn (((p_lines + hang_adjust__$1) / b_lines) < factor);\n}\n} else {\nreturn false;\n}\n} else {\nreturn false;\n}\n}\n} else {\nreturn false;\n}\n} else {\nreturn false;\n}\n}\n} else {\nreturn false;\n}\n} else {\nreturn false;\n}\n} else {\nreturn and__4174__auto__;\n}\n})());\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),(cljs.core.truth_(result)?\"++++++\":\"XXXXXX\"),\"p-what\",p_what,\"good-enough? caller:\",caller,\"fn-style:\",fn_style,\"width:\",width,\"rightcnt:\",rightcnt,\"hang-expand:\",hang_expand__$1,\"p-count:\",p_count,\"p-lines:\",p_lines,\"p-maxwidth:\",p_maxwidth,\"indent-diff:\",indent_diff,\"hang-diff:\",hang_diff__$1,\"p-last-maxwidth:\",p_last_maxwidth,\"b-lines:\",b_lines,\"b-maxwidth:\",b_maxwidth], 0));\n} else {\n}\n\nreturn result;\n});\n/**\n * Add :in-hang? true to the options map.\n */\nzprint.zprint.in_hang = (function zprint$zprint$in_hang(options){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"in-hang?\",\"in-hang?\",-1065695639).cljs$core$IFn$_invoke$arity$1(options))){\nreturn options;\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"do-in-hang?\",\"do-in-hang?\",-1235364947).cljs$core$IFn$_invoke$arity$1(options))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"in-hang?\",\"in-hang?\",-1065695639),(function (){var or__4185__auto__ = new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn true;\n}\n})());\n} else {\nreturn options;\n}\n}\n});\n/**\n * Scan a collection, and return the number of nils or empty collections\n *   present (if any), and nil otherwise.\n */\nzprint.zprint.contains_nil_QMARK_ = (function zprint$zprint$contains_nil_QMARK_(coll){\nvar n = cljs.core.count(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__51783_SHARP_){\nif(cljs.core.coll_QMARK_(p1__51783_SHARP_)){\nreturn cljs.core.empty_QMARK_(p1__51783_SHARP_);\n} else {\nreturn (p1__51783_SHARP_ == null);\n}\n}),coll));\nif((!((n === (0))))){\nreturn n;\n} else {\nreturn null;\n}\n});\n/**\n * Concatentate multiple sequences, but if any of them are nil, return nil.\n *   This version is 15-20% slower than the version below. Keeping it around\n *   just for illustrative purposes.\n */\nzprint.zprint.concat_no_nil_alt = (function zprint$zprint$concat_no_nil_alt(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___53202 = arguments.length;\nvar i__4790__auto___53203 = (0);\nwhile(true){\nif((i__4790__auto___53203 < len__4789__auto___53202)){\nargs__4795__auto__.push((arguments[i__4790__auto___53203]));\n\nvar G__53210 = (i__4790__auto___53203 + (1));\ni__4790__auto___53203 = G__53210;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((0) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((0)),(0),null)):null);\nreturn zprint.zprint.concat_no_nil_alt.cljs$core$IFn$_invoke$arity$variadic(argseq__4796__auto__);\n});\n\n(zprint.zprint.concat_no_nil_alt.cljs$core$IFn$_invoke$arity$variadic = (function (rest){\nvar coll = rest;\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nvar c = cljs.core.first(coll);\nif(cljs.core.not(c)){\nreturn cljs.core.persistent_BANG_(out);\n} else {\nif(((((cljs.core.coll_QMARK_(c)) && ((!(cljs.core.empty_QMARK_(c)))))) || ((!((c == null)))))){\nvar G__53212 = cljs.core.next(coll);\nvar G__53213 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,c);\ncoll = G__53212;\nout = G__53213;\ncontinue;\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\n\n(zprint.zprint.concat_no_nil_alt.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(zprint.zprint.concat_no_nil_alt.cljs$lang$applyTo = (function (seq51784){\nvar self__4777__auto__ = this;\nreturn self__4777__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq51784));\n}));\n\n/**\n * Concatentate multiple sequences, but if any of them are nil or empty\n *   collections, return nil.\n */\nzprint.zprint.concat_no_nil = (function zprint$zprint$concat_no_nil(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___53220 = arguments.length;\nvar i__4790__auto___53221 = (0);\nwhile(true){\nif((i__4790__auto___53221 < len__4789__auto___53220)){\nargs__4795__auto__.push((arguments[i__4790__auto___53221]));\n\nvar G__53223 = (i__4790__auto___53221 + (1));\ni__4790__auto___53221 = G__53223;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((0) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((0)),(0),null)):null);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(argseq__4796__auto__);\n});\n\n(zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic = (function (rest){\nvar result = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (v,o){\nif(cljs.core.coll_QMARK_(o)){\nif(cljs.core.empty_QMARK_(o)){\nreturn cljs.core.reduced(null);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj_BANG_,v,o);\n}\n} else {\nif((o == null)){\nreturn cljs.core.reduced(null);\n} else {\nreturn cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v,o);\n}\n}\n}),cljs.core.transient$(cljs.core.PersistentVector.EMPTY),rest);\nif(cljs.core.truth_(result)){\nreturn cljs.core.persistent_BANG_(result);\n} else {\nreturn null;\n}\n}));\n\n(zprint.zprint.concat_no_nil.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(zprint.zprint.concat_no_nil.cljs$lang$applyTo = (function (seq51787){\nvar self__4777__auto__ = this;\nreturn self__4777__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq51787));\n}));\n\n/**\n * Ensure that whatever we have is a vector.\n */\nzprint.zprint.force_vector = (function zprint$zprint$force_vector(coll){\nif(cljs.core.vector_QMARK_(coll)){\nreturn coll;\n} else {\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,coll);\n}\n});\n/**\n * Takes a string, and returns the fn-style if it is a keyword and\n *   without the : it can be found in the fn-map.\n */\nzprint.zprint.keyword_fn_QMARK_ = (function zprint$zprint$keyword_fn_QMARK_(options,s){\nvar vec__51804 = clojure.string.split.cljs$core$IFn$_invoke$arity$2(s,/^:/);\nvar left = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51804,(0),null);\nvar right = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51804,(1),null);\nif(cljs.core.truth_(right)){\nvar fexpr__51807 = new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146).cljs$core$IFn$_invoke$arity$1(options);\nreturn (fexpr__51807.cljs$core$IFn$_invoke$arity$1 ? fexpr__51807.cljs$core$IFn$_invoke$arity$1(right) : fexpr__51807.call(null,right));\n} else {\nreturn null;\n}\n});\n/**\n * Given the options map, return the max length.  This might be\n *   a constant number, but it might be based on the depth as well.\n *   Returns nil of there is no max-length set.\n */\nzprint.zprint.get_max_length = (function zprint$zprint$get_max_length(p__51808){\nvar map__51811 = p__51808;\nvar map__51811__$1 = (((((!((map__51811 == null))))?(((((map__51811.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51811.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51811):map__51811);\nvar options = map__51811__$1;\nvar max_length = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51811__$1,new cljs.core.Keyword(null,\"max-length\",\"max-length\",-254826109));\nvar depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51811__$1,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640));\nif(cljs.core.truth_(max_length)){\nif(cljs.core.vector_QMARK_(max_length)){\nreturn cljs.core.nth.cljs$core$IFn$_invoke$arity$2(max_length,(function (){var x__4276__auto__ = (depth - (1));\nvar y__4277__auto__ = (cljs.core.count(max_length) - (1));\nreturn ((x__4276__auto__ < y__4277__auto__) ? x__4276__auto__ : y__4277__auto__);\n})());\n} else {\nreturn max_length;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given an options map, return another options map with no\n *   :max-length key.  This is to that you can call a routine that\n *   normally deals with :max-length and get it to do the normal\n *   thing.\n */\nzprint.zprint.no_max_length = (function zprint$zprint$no_max_length(options){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"max-length\",\"max-length\",-254826109),(10000));\n});\n/**\n * Take the vector carrying the intermediate results, and\n *   do the right thing with a new string. Vector is\n *   [ 0 out - vector accumulating line lengths \n *  1 cur-len - length of current line\n *  just-eol? - did we just do an eol?\n *  ]\n *   s - string to add to current line\n *   tag - element type of string (comment's don't count in length)\n *   eol? - should we terminate line after adding count of s\n */\nzprint.zprint.accumulate_ll = (function zprint$zprint$accumulate_ll(count_comment_QMARK_,p__51820,s,tag,eol_QMARK_){\nvar vec__51821 = p__51820;\nvar out = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51821,(0),null);\nvar cur_len = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51821,(1),null);\nvar just_eol_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51821,(2),null);\nvar just_comment_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51821,(3),null);\nvar in$ = vec__51821;\nvar comment_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))));\nvar count_s = ((((comment_QMARK_) && (cljs.core.not(count_comment_QMARK_))))?(0):cljs.core.count(s));\nif(cljs.core.truth_((function (){var or__4185__auto__ = (function (){var and__4174__auto__ = eol_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core.not((function (){var and__4174__auto____$1 = just_eol_QMARK_;\nif(cljs.core.truth_(and__4174__auto____$1)){\nreturn (count_s === (0));\n} else {\nreturn and__4174__auto____$1;\n}\n})());\n} else {\nreturn and__4174__auto__;\n}\n})();\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn comment_QMARK_;\n}\n})())){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,(cur_len + count_s)),(0),true,comment_QMARK_], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [out,(cur_len + count_s),null,comment_QMARK_], null);\n\n}\n});\nzprint.zprint.generate_ll = (function zprint$zprint$generate_ll(count_comment_QMARK_,p__51840,p__51841){\nvar vec__51844 = p__51840;\nvar out = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51844,(0),null);\nvar cur_len = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51844,(1),null);\nvar just_eol_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51844,(2),null);\nvar just_comment_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51844,(3),null);\nvar in$ = vec__51844;\nvar vec__51847 = p__51841;\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51847,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51847,(1),null);\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51847,(2),null);\nvar element = vec__51847;\nvar vec__51854 = ((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)))))?zprint.zprint.split_lf_2(s):(new cljs.core.List(null,s,null,(1),null)));\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51854,(0),null);\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51854,(1),null);\nvar in$__$1 = zprint.zprint.accumulate_ll(count_comment_QMARK_,in$,l,tag,(!((r == null))));\nvar in$__$2 = ((cljs.core.empty_QMARK_(r))?in$__$1:zprint.zprint.accumulate_ll(count_comment_QMARK_,in$__$1,r,tag,null));\nreturn in$__$2;\n});\n/**\n * Take a style-vec, and output a sequence of numbers, one for each\n *   line, which contains the actual length. Must take the current\n *   indent to have a prayer of getting this right, but it is used\n *   only for the first line.  The ind can be an integer or a seq of\n *   integers, in which case only the first integer is used. Newlines\n *   can come anywhere in an element in a style-vec, it will account\n *   for both sides.  Will break lines on comments even if no newlines\n *   in them.  This doesn't count the length of comment lines unless\n *   [:comment :count?] is true, so that we don't format based on\n *   comment size -- that is handled with the wrap-comments elsewhere.\n *   Note that only vectors with :whitespace, :indent, or :newline are scanned\n *   for newlines, and if consecutive newlines appear, only the first\n *   is counted as a newline -- the second is counted as a regular \n *   character. A single comment is counted as two lines. Lots of edge\n *   conditions that are really quite important.\n */\nzprint.zprint.line_lengths_iter = (function zprint$zprint$line_lengths_iter(options,ind,style_vec){\nvar count_comment_QMARK_ = new cljs.core.Keyword(null,\"count?\",\"count?\",-122202128).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"comment\",\"comment\",532206069).cljs$core$IFn$_invoke$arity$1(options));\nvar ind__$1 = ((cljs.core.coll_QMARK_(ind))?cljs.core.first(ind):ind);\nvar next_vec = style_vec;\nvar current_string = null;\nvar line_length = ind__$1;\nvar previous_comment_QMARK_ = null;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(((cljs.core.empty_QMARK_(next_vec)) && (cljs.core.empty_QMARK_(current_string)))){\nif((((line_length === (0))) && (cljs.core.not(previous_comment_QMARK_)))){\nreturn out;\n} else {\nif(cljs.core.truth_(previous_comment_QMARK_)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(out,line_length,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(0)], 0));\n} else {\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,line_length);\n\n}\n}\n} else {\nvar advance_QMARK_ = cljs.core.empty_QMARK_(current_string);\nvar vec__51877 = ((advance_QMARK_)?cljs.core.first(next_vec):null);\nvar next_string = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51877,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51877,(1),null);\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51877,(2),null);\nvar comment_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))));\nvar s = ((advance_QMARK_)?next_string:current_string);\nvar vec__51880 = (cljs.core.truth_(s)?((((comment_QMARK_) && (cljs.core.not(count_comment_QMARK_))))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\"], null):(cljs.core.truth_((function (){var or__4185__auto__ = ((advance_QMARK_) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))))));\nif(or__4185__auto__){\nreturn or__4185__auto__;\n} else {\nreturn current_string;\n}\n})())?zprint.zprint.split_lf_2(s):new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null)\n)):null);\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51880,(0),null);\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51880,(1),null);\nvar force_newline_QMARK_ = (function (){var and__4174__auto__ = previous_comment_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn (!(cljs.core.empty_QMARK_(l)));\n} else {\nreturn and__4174__auto__;\n}\n})();\nvar r__$1 = (cljs.core.truth_(force_newline_QMARK_)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(l),cljs.core.str.cljs$core$IFn$_invoke$arity$1(r)].join(''):r);\nvar l__$1 = (cljs.core.truth_(force_newline_QMARK_)?null:l);\nvar new_line_length = (line_length + cljs.core.count(l__$1));\nvar G__53284 = ((advance_QMARK_)?cljs.core.next(next_vec):next_vec);\nvar G__53285 = r__$1;\nvar G__53286 = (cljs.core.truth_(r__$1)?(0):new_line_length);\nvar G__53287 = comment_QMARK_;\nvar G__53288 = (cljs.core.truth_(r__$1)?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,new_line_length):out);\nnext_vec = G__53284;\ncurrent_string = G__53285;\nline_length = G__53286;\nprevious_comment_QMARK_ = G__53287;\nout = G__53288;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Take a style-vec, and output a sequence of numbers, one for each\n *   line, which contains the actual length. Must take the current\n *   indent to have a prayer of getting this right, but it is used\n *   only for the first line.  The ind can be an integer or a seq of\n *   integers, in which case only the first integer is used. Newlines\n *   can come anywhere in an element in a style-vec, it will account\n *   for both sides.  Will break lines on comments even if no newlines\n *   in them.  This doesn't count the length of comment lines unless\n *   [:comment :count?] is true, so that we don't format based on\n *   comment size -- that is handled with the wrap-comments at the\n *   end. Note that only vectors with :whitespace or :indent are scanned\n *   for newlines, and if consecutive newlines appear, only the first\n *   is counted as a newline -- the second is counted as a regular \n *   character.\n */\nzprint.zprint.line_lengths = (function zprint$zprint$line_lengths(options,ind,style_vec){\nvar length_vec = cljs.core.first((function (){var count_comment_QMARK_ = new cljs.core.Keyword(null,\"count?\",\"count?\",-122202128).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"comment\",\"comment\",532206069).cljs$core$IFn$_invoke$arity$1(options));\nvar vec__51888 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.zprint.generate_ll,count_comment_QMARK_),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,((cljs.core.coll_QMARK_(ind))?cljs.core.first(ind):ind),null,null], null),style_vec);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51888,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51888,(1),null);\nvar just_eol_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51888,(2),null);\nvar just_comment_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51888,(3),null);\nvar result = vec__51888;\nif(cljs.core.truth_((function (){var and__4174__auto__ = just_eol_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core.not(just_comment_QMARK_);\n} else {\nreturn and__4174__auto__;\n}\n})())){\nreturn result;\n} else {\nreturn zprint.zprint.accumulate_ll(count_comment_QMARK_,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,(2),null),\"\",null,true);\n}\n})());\nreturn length_vec;\n});\n/**\n * This looks at a style vec and doesn't do all that style-lines does.\n *   It just looks for a new-line in the strings, and returns true if it\n *   doesn't find one.\n */\nzprint.zprint.single_line_QMARK_ = (function zprint$zprint$single_line_QMARK_(style_vec){\nreturn cljs.core.not(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__51891_SHARP_,p2__51892_SHARP_){\nvar or__4185__auto__ = p1__51891_SHARP_;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn p2__51892_SHARP_;\n}\n}),false,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__51893_SHARP_){\nreturn clojure.string.includes_QMARK_(cljs.core.first(p1__51893_SHARP_),\"\\n\");\n}),style_vec)));\n});\n/**\n * Given a style-vec, come up with a string that gives some hint of \n *   where this style-vec came from.\n */\nzprint.zprint.find_what = (function zprint$zprint$find_what(style_vec){\nvar s_vec = style_vec;\nwhile(true){\nif(cljs.core.truth_(s_vec)){\nvar vec__51894 = cljs.core.first(s_vec);\nvar what = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51894,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51894,(1),null);\nvar this$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51894,(2),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this$,new cljs.core.Keyword(null,\"element\",\"element\",1974019749))){\nreturn what;\n} else {\nvar G__53307 = cljs.core.next(s_vec);\ns_vec = G__53307;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});\n/**\n * Take a style output, and tell us how many lines it takes to print it\n *   and the maximum width that it reaches. Returns \n *   [<line-count> <max-width> [line-lengths]].\n *   Doesn't require any max-width inside the style-vec. Also returns the\n *   line lengths in case that is helpful (since we have them anyway).\n *   If (:dbg-ge options) has value, then uses find-what to see if what it\n *   finds matches the value, and if it does, place the value in the\n *   resulting vector.\n */\nzprint.zprint.style_lines = (function zprint$zprint$style_lines(options,ind,style_vec){\nif(cljs.core.truth_((function (){var and__4174__auto__ = style_vec;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn (((!(cljs.core.empty_QMARK_(style_vec)))) && (cljs.core.not(zprint.zprint.contains_nil_QMARK_(style_vec))));\n} else {\nreturn and__4174__auto__;\n}\n})())){\nvar lengths = zprint.zprint.line_lengths_iter(options,ind,style_vec);\nvar result = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.count(lengths),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.max,lengths),lengths], null);\nvar dbg_ge = new cljs.core.Keyword(null,\"dbg-ge\",\"dbg-ge\",257927017).cljs$core$IFn$_invoke$arity$1(options);\nvar what = (cljs.core.truth_((function (){var and__4174__auto__ = dbg_ge;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zprint.zprint.find_what(style_vec),dbg_ge);\n} else {\nreturn and__4174__auto__;\n}\n})())?dbg_ge:null);\nif(cljs.core.truth_(what)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,what);\n} else {\nreturn result;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given output from style-lines and options, see if it fits the width.  \n *   Return the number of lines it takes if it fits, nil otherwise.\n */\nzprint.zprint.fzfit = (function zprint$zprint$fzfit(p__51898,p__51899){\nvar map__51900 = p__51898;\nvar map__51900__$1 = (((((!((map__51900 == null))))?(((((map__51900.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51900.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51900):map__51900);\nvar options = map__51900__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51900__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51900__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar dbg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51900__$1,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771));\nvar vec__51901 = p__51899;\nvar line_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51901,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51901,(1),null);\nvar style_lines_return = vec__51901;\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzfit: fixed-rightcnt:\",(zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1(rightcnt) : zprint.zprint.fix_rightcnt.call(null,rightcnt)),\"line-count:\",line_count,\"max-width:\",max_width,\"width:\",width], 0));\n} else {\n}\n\nif(cljs.core.truth_(style_lines_return)){\nif((max_width <= (width - (zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.fix_rightcnt.cljs$core$IFn$_invoke$arity$1(rightcnt) : zprint.zprint.fix_rightcnt.call(null,rightcnt))))){\nreturn line_count;\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Given the return from style-lines  and options, \n *   return true if it fits on a single line.\n */\nzprint.zprint.fzfit_one_line = (function zprint$zprint$fzfit_one_line(options,style_lines_return){\nvar lines = zprint.zprint.fzfit(options,style_lines_return);\nreturn ((typeof lines === 'number') && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(lines,(1))));\n});\n/**\n * Increase the rightmost count, if any, and return one if not.\n */\nzprint.zprint.rightmost = (function zprint$zprint$rightmost(options){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070),(new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070).cljs$core$IFn$_invoke$arity$2(options,(0)) + (1)));\n});\n/**\n * Remove the rightmost count.\n */\nzprint.zprint.not_rightmost = (function zprint$zprint$not_rightmost(options){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(options,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\n});\n/**\n * Handle the complexity of commas and rightmost-pair with options.\n *   If it isn't a rightmost, it loses rightmost status.\n *   If it is a rightmost, and in the rightmost pair, it gain one rightmost\n *   since it has the right end thing (and we don't care about the comma).\n *   If it is the rightmost of the non-rightmost-pair, then the comma\n *   matters, and we handle that appropriately.  Whew!\n */\nzprint.zprint.c_r_pair = (function zprint$zprint$c_r_pair(commas_QMARK_,rightmost_pair_QMARK_,rightmost_QMARK_,options){\nif(cljs.core.not(rightmost_QMARK_)){\nreturn zprint.zprint.not_rightmost(options);\n} else {\nif(cljs.core.truth_(rightmost_pair_QMARK_)){\nreturn options;\n} else {\nif(cljs.core.truth_(commas_QMARK_)){\nreturn zprint.zprint.rightmost(zprint.zprint.not_rightmost(options));\n} else {\nreturn zprint.zprint.not_rightmost(options);\n}\n}\n}\n});\n/**\n * Handle issue with rightcnt.\n */\nzprint.zprint.fix_rightcnt = (function zprint$zprint$fix_rightcnt(rightcnt){\nif(typeof rightcnt === 'number'){\nreturn rightcnt;\n} else {\nreturn (0);\n}\n});\nzprint.zprint.str__GT_key = cljs.core.PersistentHashMap.fromArrays([\"]\",\"'\",\")\",\"`\",\"~@\",\"~\",\"#{\",\"(\",\"#(\",\"{\",\"}\",\"[\",\"#_\",\"@\"],[new cljs.core.Keyword(null,\"bracket\",\"bracket\",-600276523),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),new cljs.core.Keyword(null,\"paren\",\"paren\",-294107600),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),new cljs.core.Keyword(null,\"hash-brace\",\"hash-brace\",-1522139685),new cljs.core.Keyword(null,\"paren\",\"paren\",-294107600),new cljs.core.Keyword(null,\"hash-paren\",\"hash-paren\",-1158425562),new cljs.core.Keyword(null,\"brace\",\"brace\",-1705077624),new cljs.core.Keyword(null,\"brace\",\"brace\",-1705077624),new cljs.core.Keyword(null,\"bracket\",\"bracket\",-600276523),new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707),new cljs.core.Keyword(null,\"deref\",\"deref\",-145586795)]);\n/**\n * Look up the thing in the zprint-color-map.  Accepts keywords or\n *   strings.\n */\nzprint.zprint.zcolor_map = (function zprint$zprint$zcolor_map(p__51912,key_or_str){\nvar map__51914 = p__51912;\nvar map__51914__$1 = (((((!((map__51914 == null))))?(((((map__51914.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51914.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51914):map__51914);\nvar options = map__51914__$1;\nvar color_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51914__$1,new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684));\nvar G__51920 = (((key_or_str instanceof cljs.core.Keyword))?key_or_str:(zprint.zprint.str__GT_key.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.str__GT_key.cljs$core$IFn$_invoke$arity$1(key_or_str) : zprint.zprint.str__GT_key.call(null,key_or_str)));\nreturn (color_map.cljs$core$IFn$_invoke$arity$1 ? color_map.cljs$core$IFn$_invoke$arity$1(G__51920) : color_map.call(null,G__51920));\n});\n/**\n * Take a style-vec, and if hangflow? is true, return a\n *   vector [hang-or-flow style-vec], else return style-vec.\n *   But a nil style-vec returns nil.\n */\nzprint.zprint.hangflow = (function zprint$zprint$hangflow(hangflow_QMARK_,hang_or_flow,style_vec){\nif(cljs.core.truth_(style_vec)){\nif(cljs.core.truth_(hangflow_QMARK_)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hang_or_flow,style_vec], null);\n} else {\nreturn style_vec;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Try to hang something and if it doesn't hang at all, then flow it,\n *   but strongly prefer hang.  Has hang and flow indents, and fzfn is the\n *   fzprint-? function to use with zloc.  Callers need to know whether this\n *   was hang or flow, so it returns [{:hang | :flow} style-vec] all the time.\n */\nzprint.zprint.fzprint_hang_unless_fail = (function zprint$zprint$fzprint_hang_unless_fail(options,hindent,findent,fzfn,zloc){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-unless-fail:\",(function (){var G__51929 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__51929) : zprint.zfns.zstring.call(null,G__51929));\n})()], 0));\n} else {\n}\n\nvar hanging = (function (){var G__51930 = zprint.zprint.in_hang(options);\nvar G__51931 = hindent;\nvar G__51932 = zloc;\nreturn (fzfn.cljs$core$IFn$_invoke$arity$3 ? fzfn.cljs$core$IFn$_invoke$arity$3(G__51930,G__51931,G__51932) : fzfn.call(null,G__51930,G__51931,G__51932));\n})();\nvar value__51598__auto__ = (cljs.core.truth_((function (){var and__4174__auto__ = hanging;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn zprint.zprint.fzfit(options,zprint.zprint.style_lines(options,hindent,hanging));\n} else {\nreturn and__4174__auto__;\n}\n})())?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),hanging], null):(function (){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-unless-fail: hang failed, doing flow\"], 0));\n} else {\n}\n\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(findent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(fzfn.cljs$core$IFn$_invoke$arity$3 ? fzfn.cljs$core$IFn$_invoke$arity$3(options,findent,zloc) : fzfn.call(null,options,findent,zloc))], 0))], null);\n})()\n);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-unless-fail: exit:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51598__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51598__auto__;\n});\n/**\n * Given a style-vec with exactly one thing in it, replace the color\n *   with whatever local color we have determined is correct.\n */\nzprint.zprint.replace_color = (function zprint$zprint$replace_color(local_color,style_vec){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(style_vec),(1))){\nvar vec__51937 = style_vec;\nvar vec__51940 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51937,(0),null);\nvar string = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51940,(0),null);\nvar color = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51940,(1),null);\nvar element = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51940,(2),null);\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [string,local_color,element], null)], null);\n} else {\nreturn style_vec;\n}\n});\n/**\n * Print a single pair of things (though it might not be exactly a\n *   pair, given comments and :extend and the like), like bindings in\n *   a let, clauses in a cond, keys and values in a map.  Controlled\n *   by various maps, the key of which is caller.  This will return a\n *   style-vec (or nil), unless hangflow? is true, in which case it\n *   will return [:hang <style-vec>] or [:flow <style-vec>] so that\n *   the upstream folks know whether this was a hang or flow and can\n *   do the right thing based on that.\n */\nzprint.zprint.fzprint_two_up = (function zprint$zprint$fzprint_two_up(caller,p__51951,ind,commas_QMARK_,justify_width,rightmost_pair_QMARK_,p__51952){\nvar map__51953 = p__51951;\nvar map__51953__$1 = (((((!((map__51953 == null))))?(((((map__51953.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51953.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51953):map__51953);\nvar options = map__51953__$1;\nvar map__51954 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51953__$1,caller);\nvar map__51954__$1 = (((((!((map__51954 == null))))?(((((map__51954.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__51954.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__51954):map__51954);\nvar hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51954__$1,new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854));\nvar flow_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51954__$1,new cljs.core.Keyword(null,\"flow?\",\"flow?\",96929057));\nvar indent_arg = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51954__$1,new cljs.core.Keyword(null,\"indent-arg\",\"indent-arg\",58691874));\nvar key_depth_color = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51954__$1,new cljs.core.Keyword(null,\"key-depth-color\",\"key-depth-color\",1448522819));\nvar indent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51954__$1,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125));\nvar key_value_color = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51954__$1,new cljs.core.Keyword(null,\"key-value-color\",\"key-value-color\",676042889));\nvar dbg_cnt_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51954__$1,new cljs.core.Keyword(null,\"dbg-cnt?\",\"dbg-cnt?\",-1638028976));\nvar dbg_local_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51954__$1,new cljs.core.Keyword(null,\"dbg-local?\",\"dbg-local?\",-895545325));\nvar key_color = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51954__$1,new cljs.core.Keyword(null,\"key-color\",\"key-color\",-209002572));\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51953__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar dbg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51953__$1,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771));\nvar dbg_indent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51953__$1,new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778));\nvar in_hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51953__$1,new cljs.core.Keyword(null,\"in-hang?\",\"in-hang?\",-1065695639));\nvar do_in_hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51953__$1,new cljs.core.Keyword(null,\"do-in-hang?\",\"do-in-hang?\",-1235364947));\nvar map_depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__51953__$1,new cljs.core.Keyword(null,\"map-depth\",\"map-depth\",-191378641));\nvar vec__51955 = p__51952;\nvar lloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51955,(0),null);\nvar rloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51955,(1),null);\nvar xloc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51955,(2),null);\nvar pair = vec__51955;\nif(cljs.core.truth_(dbg_cnt_QMARK_)){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"two-up: caller:\",caller,\"hang?\",hang_QMARK_,\"dbg?\",dbg_QMARK_], 0));\n} else {\n}\n\nif(cljs.core.truth_((function (){var or__4185__auto__ = dbg_QMARK_;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn dbg_local_QMARK_;\n}\n})())){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var or__4185__auto__ = dbg_indent;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn \"\";\n}\n})(),\"==========================\",[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4185__auto__ = dbg_indent;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn \"\";\n}\n})())].join(''),\"fzprint-two-up:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc) : zprint.zfns.zstring.call(null,lloc)),\"caller:\",caller,\"count:\",cljs.core.count(pair),\"ind:\",ind,\"indent:\",indent,\"indent-arg:\",indent_arg,\"justify-width:\",justify_width,\"one-line?:\",one_line_QMARK_,\"hang?:\",hang_QMARK_,\"in-hang?\",in_hang_QMARK_,\"do-in-hang?\",do_in_hang_QMARK_,\"flow?\",flow_QMARK_,\"commas?\",commas_QMARK_,\"rightmost-pair?\",rightmost_pair_QMARK_], 0));\n} else {\n}\n\nvar local_hang_QMARK_ = (function (){var or__4185__auto__ = one_line_QMARK_;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn hang_QMARK_;\n}\n})();\nvar indent__$1 = (function (){var or__4185__auto__ = indent;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn indent_arg;\n}\n})();\nvar local_options = ((cljs.core.not(local_hang_QMARK_))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111),true):options);\nvar loptions = zprint.zprint.c_r_pair(commas_QMARK_,rightmost_pair_QMARK_,null,options);\nvar roptions = zprint.zprint.c_r_pair(commas_QMARK_,rightmost_pair_QMARK_,new cljs.core.Keyword(null,\"rightmost\",\"rightmost\",800279518),options);\nvar local_roptions = zprint.zprint.c_r_pair(commas_QMARK_,rightmost_pair_QMARK_,new cljs.core.Keyword(null,\"rightmost\",\"rightmost\",800279518),local_options);\nvar value_color_map = (function (){var and__4174__auto__ = key_value_color;\nif(cljs.core.truth_(and__4174__auto__)){\nvar G__51969 = (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(lloc) : zprint.zfns.zsexpr.call(null,lloc));\nreturn (key_value_color.cljs$core$IFn$_invoke$arity$1 ? key_value_color.cljs$core$IFn$_invoke$arity$1(G__51969) : key_value_color.call(null,G__51969));\n} else {\nreturn and__4174__auto__;\n}\n})();\nvar local_roptions__$1 = (cljs.core.truth_(value_color_map)?zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([local_roptions,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),value_color_map], null)], 0)):local_roptions);\nvar roptions__$1 = (cljs.core.truth_(value_color_map)?zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([roptions,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),value_color_map], null)], 0)):roptions);\nvar modifier_set = new cljs.core.Keyword(null,\"modifiers\",\"modifiers\",50378834).cljs$core$IFn$_invoke$arity$1((options.cljs$core$IFn$_invoke$arity$1 ? options.cljs$core$IFn$_invoke$arity$1(caller) : options.call(null,caller)));\nvar modifier_QMARK_ = (function (){var or__4185__auto__ = (function (){var and__4174__auto__ = modifier_set;\nif(cljs.core.truth_(and__4174__auto__)){\nvar and__4174__auto____$1 = (function (){var G__51975 = (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc) : zprint.zfns.zstring.call(null,lloc));\nreturn (modifier_set.cljs$core$IFn$_invoke$arity$1 ? modifier_set.cljs$core$IFn$_invoke$arity$1(G__51975) : modifier_set.call(null,G__51975));\n})();\nif(cljs.core.truth_(and__4174__auto____$1)){\nreturn (cljs.core.count(pair) > (2));\n} else {\nreturn and__4174__auto____$1;\n}\n} else {\nreturn and__4174__auto__;\n}\n})();\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (zprint.zprint.middle_element_QMARK_.cljs$core$IFn$_invoke$arity$2 ? zprint.zprint.middle_element_QMARK_.cljs$core$IFn$_invoke$arity$2(options,rloc) : zprint.zprint.middle_element_QMARK_.call(null,options,rloc));\n}\n})();\nvar local_color = cljs.core.get.cljs$core$IFn$_invoke$arity$2(key_depth_color,(map_depth - (1)));\nvar local_color__$1 = (cljs.core.truth_(key_color)?(function (){var G__51976 = (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(lloc) : zprint.zfns.zsexpr.call(null,lloc));\nreturn (key_color.cljs$core$IFn$_invoke$arity$1 ? key_color.cljs$core$IFn$_invoke$arity$1(G__51976) : key_color.call(null,G__51976));\n})():local_color);\nvar arg_1 = (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(loptions,ind,lloc) : zprint.zprint.fzprint_STAR_.call(null,loptions,ind,lloc));\nvar arg_1__$1 = (cljs.core.truth_(local_color__$1)?zprint.zprint.replace_color(local_color__$1,arg_1):arg_1);\nvar vec__51962 = zprint.zprint.style_lines(options,ind,arg_1__$1);\nvar arg_1_line_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51962,(0),null);\nvar arg_1_max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51962,(1),null);\nvar arg_1_lines = vec__51962;\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-two-up before modifier: arg-1-line-count:\",arg_1_line_count,\"arg-1-max-width:\",arg_1_max_width], 0)):null);\nvar modifier_QMARK___$1 = (cljs.core.truth_((function (){var and__4174__auto__ = arg_1_line_count;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn (arg_1_line_count > (1));\n} else {\nreturn and__4174__auto__;\n}\n})())?null:modifier_QMARK_);\nvar combined_arg_1 = (cljs.core.truth_(modifier_QMARK___$1)?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),(function (){var G__51978 = zprint.zprint.in_hang(loptions);\nvar G__51979 = (ind + arg_1_max_width);\nvar G__51980 = rloc;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51978,G__51979,G__51980) : zprint.zprint.fzprint_STAR_.call(null,G__51978,G__51979,G__51980));\n})()], 0)):arg_1__$1);\nvar arg_1__$2 = (cljs.core.truth_(combined_arg_1)?combined_arg_1:arg_1__$1);\nvar modifier_QMARK___$2 = (cljs.core.truth_(combined_arg_1)?modifier_QMARK___$1:null);\nvar vec__51965 = (cljs.core.truth_(combined_arg_1)?zprint.zprint.style_lines(options,ind,arg_1__$2):arg_1_lines);\nvar arg_1_line_count__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51965,(0),null);\nvar arg_1_max_width__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51965,(1),null);\nvar arg_1_lines__$1 = vec__51965;\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-two-up after modifier: arg-1-line-count:\",arg_1_line_count__$1,\"arg-1-max-width:\",arg_1_max_width__$1], 0)):null);\nvar lloc__$1 = (cljs.core.truth_(modifier_QMARK___$2)?rloc:lloc);\nvar rloc__$1 = (cljs.core.truth_(modifier_QMARK___$2)?xloc:rloc);\nvar arg_1_fit_oneline_QMARK_ = ((cljs.core.not(flow_QMARK_)) && (zprint.zprint.fzfit_one_line(loptions,arg_1_lines__$1)));\nvar arg_1_fit_QMARK_ = (function (){var or__4185__auto__ = arg_1_fit_oneline_QMARK_;\nif(or__4185__auto__){\nreturn or__4185__auto__;\n} else {\nif(cljs.core.not(one_line_QMARK_)){\nreturn zprint.zprint.fzfit(loptions,arg_1_lines__$1);\n} else {\nreturn null;\n}\n}\n})();\nvar arg_1_width = ((function (){var or__4185__auto__ = arg_1_max_width__$1;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (0);\n}\n})() - ind);\nif(cljs.core.truth_((function (){var and__4174__auto__ = arg_1__$2;\nif(cljs.core.truth_(and__4174__auto__)){\nvar or__4185__auto__ = arg_1_fit_QMARK_;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn cljs.core.not(in_hang_QMARK_);\n}\n} else {\nreturn and__4174__auto__;\n}\n})())){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(pair),(1))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),(zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(roptions__$1,ind,lloc__$1) : zprint.zprint.fzprint_STAR_.call(null,roptions__$1,ind,lloc__$1))], null);\n} else {\nif(cljs.core.truth_((function (){var or__4185__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(pair),(2));\nif(or__4185__auto__){\nreturn or__4185__auto__;\n} else {\nvar and__4174__auto__ = modifier_QMARK___$2;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(pair),(3));\n} else {\nreturn and__4174__auto__;\n}\n}\n})())){\nvar hanging_width = (cljs.core.truth_(justify_width)?justify_width:arg_1_width);\nvar hanging_spaces = (cljs.core.truth_(justify_width)?((justify_width - arg_1_width) + (1)):(1));\nvar hanging_indent = (((1) + hanging_width) + ind);\nvar flow_indent = (indent__$1 + ind);\nif(cljs.core.truth_((function (){var and__4174__auto__ = (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc__$1) : zprint.zfns.zstring.call(null,lloc__$1));\nif(cljs.core.truth_(and__4174__auto__)){\nvar and__4174__auto____$1 = zprint.zprint.keyword_fn_QMARK_(options,(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc__$1) : zprint.zfns.zstring.call(null,lloc__$1)));\nif(cljs.core.truth_(and__4174__auto____$1)){\nreturn (zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(rloc__$1) : zprint.zfns.zvector_QMARK_.call(null,rloc__$1));\n} else {\nreturn and__4174__auto____$1;\n}\n} else {\nreturn and__4174__auto__;\n}\n})())){\nvar vec__51981 = zprint.zprint.fzprint_hang_unless_fail(loptions,hanging_indent,flow_indent,zprint.zprint.fzprint_binding_vec,rloc__$1);\nvar hang_or_flow = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51981,(0),null);\nvar style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__51981,(1),null);\nvar arg_1__$3 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(hang_or_flow,new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$2,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zprint.zprint.blanks(hanging_spaces),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null)], 0)):arg_1__$2);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hang_or_flow,zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$3,style_vec], 0))], null);\n} else {\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-two-up: before hang.  hanging tried?\",((arg_1_fit_oneline_QMARK_) && (((cljs.core.not(flow_QMARK_)) && ((flow_indent >= hanging_indent)))))], 0)):null);\nvar hanging = ((((arg_1_fit_oneline_QMARK_) || (((cljs.core.not(flow_QMARK_)) && ((flow_indent >= hanging_indent))))))?(function (){var G__51988 = (((flow_indent < hanging_indent))?zprint.zprint.in_hang(local_roptions__$1):local_roptions__$1);\nvar G__51989 = hanging_indent;\nvar G__51990 = rloc__$1;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__51988,G__51989,G__51990) : zprint.zprint.fzprint_STAR_.call(null,G__51988,G__51989,G__51990));\n})():null);\nvar hang_count = (zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(rloc__$1) : zprint.zfns.zcount.call(null,rloc__$1));\nvar ___$3 = zprint.zprint.log_lines(options,\"fzprint-two-up: hanging:\",hanging_indent,hanging);\nvar hanging_lines = zprint.zprint.style_lines(options,hanging_indent,hanging);\nvar fit_QMARK_ = zprint.zprint.fzfit_one_line(local_roptions__$1,hanging_lines);\nvar hanging_lines__$1 = ((fit_QMARK_)?hanging_lines:(cljs.core.truth_(((cljs.core.not(one_line_QMARK_))?hang_QMARK_:false))?hanging_lines:null));\nvar ___$4 = zprint.zprint.log_lines(options,\"fzprint-two-up: hanging-2:\",hanging_indent,hanging);\nvar flow_it_QMARK_ = ((((((cljs.core.not(hanging_lines__$1)) && (cljs.core.not(one_line_QMARK_)))) || (cljs.core.not((function (){var or__4185__auto__ = fit_QMARK_;\nif(or__4185__auto__){\nreturn or__4185__auto__;\n} else {\nreturn one_line_QMARK_;\n}\n})())))) && ((((flow_indent < hanging_indent)) || (cljs.core.not(hanging_lines__$1)))));\nvar ___$5 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-two-up: before flow. flow-it?\",flow_it_QMARK_], 0)):null);\nvar flow = ((flow_it_QMARK_)?(zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(roptions__$1,flow_indent,rloc__$1) : zprint.zprint.fzprint_STAR_.call(null,roptions__$1,flow_indent,rloc__$1)):null);\nvar ___$6 = zprint.zprint.log_lines(options,\"fzprint-two-up: flow:\",(indent__$1 + ind),flow);\nvar flow_lines = zprint.zprint.style_lines(options,(indent__$1 + ind),flow);\nif(cljs.core.truth_(dbg_local_QMARK_)){\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: local-hang:\",local_hang_QMARK_], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: one-line?:\",one_line_QMARK_], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: hanging-indent:\",hanging_indent], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: hanging-lines:\",hanging_lines__$1], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: flow?:\",flow_QMARK_], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: flow-it?:\",flow_it_QMARK_], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: fit?:\",fit_QMARK_], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: flow-indent:\",flow_indent], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: hanging:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc__$1) : zprint.zfns.zstring.call(null,lloc__$1)),hanging], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: (+ indent ind):\",(indent__$1 + ind)], 0));\n\ncljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-two-up: flow:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(lloc__$1) : zprint.zfns.zstring.call(null,lloc__$1)),flow], 0));\n} else {\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-two-up: before good-enough\"], 0));\n} else {\n}\n\nif(fit_QMARK_){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$2,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zprint.zprint.blanks(hanging_spaces),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),hanging], 0))], null);\n} else {\nif(cljs.core.truth_((function (){var or__4185__auto__ = hanging_lines__$1;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn flow_lines;\n}\n})())){\nif(cljs.core.truth_(zprint.zprint.good_enough_QMARK_(caller,roptions__$1,new cljs.core.Keyword(null,\"none-two-up\",\"none-two-up\",-457831686),hang_count,(hanging_indent - flow_indent),hanging_lines__$1,flow_lines))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$2,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zprint.zprint.blanks(hanging_spaces),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),hanging], 0))], null);\n} else {\nif(cljs.core.truth_(justify_width)){\nreturn null;\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$2,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),flow], 0))], null);\n}\n}\n} else {\nreturn null;\n}\n}\n}\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg_1__$2,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(function (){var G__51991 = options;\nvar G__51992 = (indent__$1 + ind);\nvar G__51993 = (cljs.core.truth_(modifier_QMARK___$2)?cljs.core.nnext(pair):cljs.core.next(pair));\nvar G__51994 = new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826);\nreturn (zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$4 ? zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$4(G__51991,G__51992,G__51993,G__51994) : zprint.zprint.fzprint_flow_seq.call(null,G__51991,G__51992,G__51993,G__51994));\n})()], 0))], null);\n\n}\n}\n} else {\nreturn null;\n}\n});\n/**\n * Figure the width for a justification of a set of pairs in coll.  \n *   Also, decide if it makes any sense to justify the pairs at all.\n *   For instance, they all need to be one-line.\n */\nzprint.zprint.fzprint_justify_width = (function zprint$zprint$fzprint_justify_width(caller,p__52000,ind,coll){\nvar map__52001 = p__52000;\nvar map__52001__$1 = (((((!((map__52001 == null))))?(((((map__52001.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52001.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52001):map__52001);\nvar options = map__52001__$1;\nvar map__52002 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52001__$1,caller);\nvar map__52002__$1 = (((((!((map__52002 == null))))?(((((map__52002.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52002.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52002):map__52002);\nvar justify_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52002__$1,new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148));\nvar firsts = cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__51995_SHARP_){\nif((cljs.core.count(p1__51995_SHARP_) > (1))){\nvar G__52005 = options;\nvar G__52006 = ind;\nvar G__52007 = cljs.core.first(p1__51995_SHARP_);\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52005,G__52006,G__52007) : zprint.zprint.fzprint_STAR_.call(null,G__52005,G__52006,G__52007));\n} else {\nreturn null;\n}\n}),coll));\nvar style_seq = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$3(zprint.zprint.style_lines,options,ind),firsts);\nvar each_one_line_QMARK_ = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__51996_SHARP_,p2__51997_SHARP_){\nif(cljs.core.truth_(p1__51996_SHARP_)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p2__51997_SHARP_),(1));\n} else {\nreturn null;\n}\n}),true,style_seq);\nvar justify_width = (cljs.core.truth_(each_one_line_QMARK_)?cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__51998_SHARP_,p2__51999_SHARP_){\nvar x__4273__auto__ = p1__51998_SHARP_;\nvar y__4274__auto__ = cljs.core.second(p2__51999_SHARP_);\nreturn ((x__4273__auto__ > y__4274__auto__) ? x__4273__auto__ : y__4274__auto__);\n}),(0),style_seq):null);\nif(cljs.core.truth_(justify_width)){\nreturn (justify_width - ind);\n} else {\nreturn null;\n}\n});\n/**\n * Take a size and a collection of vectors with two or more elements\n *   per vector.  The elements are zlocs, the vectors are not.  Return\n *   the remaining character count or nil if it for sure doesn't fit.\n *   In order to be sure it doesn't fit, this version doesn't assume\n *   *any* separators, so it really underestimates the size.\n */\nzprint.zprint.fit_within_QMARK_ = (function zprint$zprint$fit_within_QMARK_(var_args){\nvar G__52013 = arguments.length;\nswitch (G__52013) {\ncase 3:\nreturn zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$3 = (function (size,coll,depth){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (size__$1,element){\nvar or__4185__auto__ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(depth,(0)))?zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$3(size__$1,element,(depth + (1))):(function (){var remaining = (size__$1 - cljs.core.count((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(element) : zprint.zfns.zstring.call(null,element))));\nif((remaining > (0))){\nreturn remaining;\n} else {\nreturn null;\n}\n})());\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn cljs.core.reduced(null);\n}\n}),size,coll);\n}));\n\n(zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (size,coll){\nreturn zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$3(size,coll,(0));\n}));\n\n(zprint.zprint.fit_within_QMARK_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Convert a hangflow style-vec to a regular style-vec.\n */\nzprint.zprint.remove_hangflow = (function zprint$zprint$remove_hangflow(hf_style_vec){\nif(cljs.core.truth_(hf_style_vec)){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.second,hf_style_vec);\n} else {\nreturn null;\n}\n});\n/**\n * Accept a sequence of pairs, and map fzprint-two-up across those pairs.\n *   If you have :one-line? set, this will return nil if it is way over,\n *   but it can't accurately tell exactly what will fit on one line, since\n *   it doesn't know the separators and such.  So, :one-line? true is a\n *   performance optimization, so it doesn't do a whole huge map just to\n *   find out that it could not possibly have fit on one line.  So, this\n *   returns a sequence of style-vecs, where the indentation for the\n *   stuff inside of the pairs is already there, but the separators of\n *   the style-vecs (including indentation and commas) is done by the\n *   caller of fzprint-map-two-up. Always returns a sequence of vector pairs:\n *   [[:hang <style-vec-for-one-pair>] [:flow <style-vec-for-one-pair>] ...].\n *   If you want a style vec instead, call remove-hangflow on the return \n *   from fzprint-map-two-up.  This will use one-line?, but not check to see\n *   that it actually fits.  If you care about that, then you should check the\n *   return yourself.  It will, however, make an estimate of whether or not\n *   it will fit and if it clearly doesn't, it will return a nil.\n */\nzprint.zprint.fzprint_map_two_up = (function zprint$zprint$fzprint_map_two_up(caller,p__52024,ind,commas_QMARK_,coll){\nvar map__52025 = p__52024;\nvar map__52025__$1 = (((((!((map__52025 == null))))?(((((map__52025.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52025.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52025):map__52025);\nvar options = map__52025__$1;\nvar map__52026 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52025__$1,caller);\nvar map__52026__$1 = (((((!((map__52026 == null))))?(((((map__52026.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52026.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52026):map__52026);\nvar justify_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52026__$1,new cljs.core.Keyword(null,\"justify?\",\"justify?\",294994148));\nvar force_nl_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52026__$1,new cljs.core.Keyword(null,\"force-nl?\",\"force-nl?\",-1299761462));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52025__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52025__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52025__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar parallel_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52025__$1,new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892));\nvar caller_map = (caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options));\nvar len = cljs.core.count(coll);\nvar justify_width = (cljs.core.truth_((function (){var and__4174__auto__ = justify_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core.not(one_line_QMARK_);\n} else {\nreturn and__4174__auto__;\n}\n})())?zprint.zprint.fzprint_justify_width(caller,options,ind,coll):null);\nvar caller_options = (cljs.core.truth_(justify_width)?(options.cljs$core$IFn$_invoke$arity$1 ? options.cljs$core$IFn$_invoke$arity$1(caller) : options.call(null,caller)):null);\nif(cljs.core.truth_((function (){var or__4185__auto__ = new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"dbg-print?\",\"dbg-print?\",-660113872).cljs$core$IFn$_invoke$arity$1(options);\n}\n})())){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-map-two-up: one-line?\",new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111).cljs$core$IFn$_invoke$arity$1(options),\"justify?:\",justify_QMARK_], 0));\n} else {\n}\n\nif(cljs.core.not((function (){var and__4174__auto__ = one_line_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nvar and__4174__auto____$1 = force_nl_QMARK_;\nif(cljs.core.truth_(and__4174__auto____$1)){\nreturn (len > (1));\n} else {\nreturn and__4174__auto____$1;\n}\n} else {\nreturn and__4174__auto__;\n}\n})())){\nvar justify_width__$1 = justify_width;\nvar justify_options = (cljs.core.truth_(justify_width__$1)?zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options,cljs.core.PersistentArrayMap.createAsIfByAssoc([caller,(function (){var G__52043 = new cljs.core.Keyword(null,\"justify-hang\",\"justify-hang\",1083292243);\nreturn (caller_options.cljs$core$IFn$_invoke$arity$1 ? caller_options.cljs$core$IFn$_invoke$arity$1(G__52043) : caller_options.call(null,G__52043));\n})()])], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tuning\",\"tuning\",-48660925),(function (){var G__52044 = new cljs.core.Keyword(null,\"justify-tuning\",\"justify-tuning\",-958931675);\nreturn (caller_options.cljs$core$IFn$_invoke$arity$1 ? caller_options.cljs$core$IFn$_invoke$arity$1(G__52044) : caller_options.call(null,G__52044));\n})()], null)], 0)):options);\nwhile(true){\nvar beginning_coll = cljs.core.butlast(coll);\nvar beginning_remaining = (cljs.core.truth_(one_line_QMARK_)?zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$2((width - ind),beginning_coll):true);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-map-two-up: remaining:\",(width - ind),\"beginning-remaining:\",beginning_remaining], 0)):null);\nvar beginning = (cljs.core.truth_(beginning_remaining)?zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$3(options,cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(zprint.zprint.fzprint_two_up,caller,justify_options,ind,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([commas_QMARK_,justify_width__$1,null], 0)),beginning_coll):null);\nvar beginning__$1 = (cljs.core.truth_(zprint.zprint.contains_nil_QMARK_(beginning))?null:beginning);\nvar end_coll = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.last(coll)], null);\nvar end_remaining = (cljs.core.truth_(one_line_QMARK_)?(function (){var and__4174__auto__ = beginning__$1;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$2((beginning_remaining - rightcnt),end_coll);\n} else {\nreturn and__4174__auto__;\n}\n})():true);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-map-two-up: beginning-remaining:\",beginning_remaining,\"rightcnt:\",rightcnt,\"end-remaining:\",end_remaining], 0)):null);\nvar end = (cljs.core.truth_(end_remaining)?(function (){var temp__5735__auto__ = zprint.zprint.fzprint_two_up(caller,justify_options,ind,commas_QMARK_,justify_width__$1,new cljs.core.Keyword(null,\"rightmost-pair\",\"rightmost-pair\",-39229380),cljs.core.first(end_coll));\nif(cljs.core.truth_(temp__5735__auto__)){\nvar end_result = temp__5735__auto__;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [end_result], null);\n} else {\nreturn null;\n}\n})():null);\nvar result = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len,(1)))?end:zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([beginning__$1,end], 0))\n);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-map-two-up: len:\",len,\"(nil? end):\",(end == null),\"end:\",end,\"(nil? beginning):\",(beginning__$1 == null),\"beginning:\",beginning__$1,\"(count end):\",cljs.core.count(end),\"(count beginnging):\",cljs.core.count(beginning__$1),\"justify-width:\",justify_width__$1,\"result:\",result], 0));\n} else {\n}\n\nif(cljs.core.truth_((function (){var or__4185__auto__ = result;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn cljs.core.not(justify_width__$1);\n}\n})())){\nreturn result;\n} else {\nvar G__53572 = null;\nvar G__53573 = options;\njustify_width__$1 = G__53572;\njustify_options = G__53573;\ncontinue;\n}\nbreak;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Do a key comparison that works well for numbers as well as\n *   strings.\n */\nzprint.zprint.compare_keys = (function zprint$zprint$compare_keys(x,y){\nif(((typeof x === 'number') && (typeof y === 'number'))){\nreturn cljs.core.compare(x,y);\n} else {\nreturn cljs.core.compare(cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),cljs.core.str.cljs$core$IFn$_invoke$arity$1(y));\n\n}\n});\n/**\n * Do a key comparison that places ordered keys first.\n */\nzprint.zprint.compare_ordered_keys = (function zprint$zprint$compare_ordered_keys(key_value,zdotdotdot,x,y){\nif(cljs.core.truth_((function (){var and__4174__auto__ = (key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(x) : key_value.call(null,x));\nif(cljs.core.truth_(and__4174__auto__)){\nreturn (key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(y) : key_value.call(null,y));\n} else {\nreturn and__4174__auto__;\n}\n})())){\nreturn cljs.core.compare((key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(x) : key_value.call(null,x)),(key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(y) : key_value.call(null,y)));\n} else {\nif(cljs.core.truth_((key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(x) : key_value.call(null,x)))){\nreturn (-1);\n} else {\nif(cljs.core.truth_((key_value.cljs$core$IFn$_invoke$arity$1 ? key_value.cljs$core$IFn$_invoke$arity$1(y) : key_value.call(null,y)))){\nreturn (1);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zdotdotdot,x)){\nreturn (1);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zdotdotdot,y)){\nreturn (-1);\n} else {\nreturn zprint.zprint.compare_keys(x,y);\n\n}\n}\n}\n}\n}\n});\n/**\n * A variety of sorting and ordering options for the output of\n *   partition-all-2-nc.  It can sort, which is the default, but if\n *   the caller has a key-order vector, it will extract any keys in\n *   that vector and place them first (in order) before sorting the\n *   other keys.  If sorting is not called for, does nothing.\n */\nzprint.zprint.order_out = (function zprint$zprint$order_out(caller,p__52055,access,out){\nvar map__52056 = p__52055;\nvar map__52056__$1 = (((((!((map__52056 == null))))?(((((map__52056.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52056.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52056):map__52056);\nvar options = map__52056__$1;\nvar map__52057 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52056__$1,caller);\nvar map__52057__$1 = (((((!((map__52057 == null))))?(((((map__52057.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52057.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52057):map__52057);\nvar sort_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52057__$1,new cljs.core.Keyword(null,\"sort?\",\"sort?\",-567661924));\nvar sort_in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52057__$1,new cljs.core.Keyword(null,\"sort-in-code?\",\"sort-in-code?\",111878497));\nvar key_order = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52057__$1,new cljs.core.Keyword(null,\"key-order\",\"key-order\",-356936372));\nvar key_value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52057__$1,new cljs.core.Keyword(null,\"key-value\",\"key-value\",-34906839));\nvar in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52056__$1,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464));\nif(cljs.core.truth_((function (){var and__4174__auto__ = sort_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nif(cljs.core.truth_(in_code_QMARK_)){\nreturn sort_in_code_QMARK_;\n} else {\nreturn true;\n}\n} else {\nreturn and__4174__auto__;\n}\n})())){\nreturn cljs.core.sort.cljs$core$IFn$_invoke$arity$2((function (p1__52052_SHARP_,p2__52053_SHARP_){\nvar G__52065 = (function (){var G__52067 = (access.cljs$core$IFn$_invoke$arity$1 ? access.cljs$core$IFn$_invoke$arity$1(p1__52052_SHARP_) : access.call(null,p1__52052_SHARP_));\nreturn (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(G__52067) : zprint.zfns.zsexpr.call(null,G__52067));\n})();\nvar G__52066 = (function (){var G__52068 = (access.cljs$core$IFn$_invoke$arity$1 ? access.cljs$core$IFn$_invoke$arity$1(p2__52053_SHARP_) : access.call(null,p2__52053_SHARP_));\nreturn (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(G__52068) : zprint.zfns.zsexpr.call(null,G__52068));\n})();\nvar fexpr__52064 = cljs.core.partial.cljs$core$IFn$_invoke$arity$3(zprint.zprint.compare_ordered_keys,(function (){var or__4185__auto__ = key_value;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})(),(zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0 ? zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0() : zprint.zfns.zdotdotdot.call(null)));\nreturn (fexpr__52064.cljs$core$IFn$_invoke$arity$2 ? fexpr__52064.cljs$core$IFn$_invoke$arity$2(G__52065,G__52066) : fexpr__52064.call(null,G__52065,G__52066));\n}),out);\n} else {\nreturn out;\n}\n});\n/**\n * This checks to see if an element should be considered part of a\n *   pair if it comes between other elements, and a single element on\n *   its own if it would otherwise be the first part of a pair.  Mostly\n *   this will trigger on comments, but a #_(...) element will also\n *   trigger this.\n */\nzprint.zprint.pair_element_QMARK_ = (function zprint$zprint$pair_element_QMARK_(zloc){\nvar or__4185__auto__ = (zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcomment_QMARK_.call(null,zloc));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (zprint.zfns.zuneval_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zuneval_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zuneval_QMARK_.call(null,zloc));\n}\n});\n/**\n * This checks to see if an element should be considered the middle element\n *   of a pair.  At some point, we can expand this, but for now there is only\n *   one middle element.\n */\nzprint.zprint.middle_element_QMARK_ = (function zprint$zprint$middle_element_QMARK_(p__52073,zloc){\nvar map__52074 = p__52073;\nvar map__52074__$1 = (((((!((map__52074 == null))))?(((((map__52074.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52074.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52074):map__52074);\nvar options = map__52074__$1;\nvar in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52074__$1,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(in_code_QMARK_,\"condp\")){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\":>>\");\n} else {\nreturn null;\n}\n});\n/**\n * If given a non-collection, simply does a dissoc of the key, but\n *   if given a sequence of keys, will remove the final one.\n */\nzprint.zprint.remove_key_seq = (function zprint$zprint$remove_key_seq(m,ks){\nif(cljs.core.coll_QMARK_(ks)){\nvar this_key = cljs.core.first(ks);\nvar next_key = cljs.core.next(ks);\nif(next_key){\nvar removed_map = (function (){var G__52078 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,this_key);\nvar G__52079 = cljs.core.next(ks);\nreturn (zprint.zprint.remove_key_seq.cljs$core$IFn$_invoke$arity$2 ? zprint.zprint.remove_key_seq.cljs$core$IFn$_invoke$arity$2(G__52078,G__52079) : zprint.zprint.remove_key_seq.call(null,G__52078,G__52079));\n})();\nif(cljs.core.empty_QMARK_(removed_map)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,this_key);\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,this_key,removed_map);\n}\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,this_key);\n}\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,ks);\n}\n});\n/**\n * Given a map and a key sequence, remove that key sequence if\n *   it appears in the map, and terminate the reduce if it changes\n *   the map.\n */\nzprint.zprint.ignore_key_seq_silent = (function zprint$zprint$ignore_key_seq_silent(m,ks){\nif(cljs.core.coll_QMARK_(ks)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m,ks,new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411)),new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411))){\nreturn m;\n} else {\nreturn zprint.zprint.remove_key_seq(m,ks);\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ks,new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411)),new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411))){\nreturn m;\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,ks);\n}\n}\n});\n/**\n * Given a map and a key sequence, remove that key sequence if\n *   it appears in the map leaving behind a key :zprint-ignored, \n *   and terminate the reduce if it changes the map.\n */\nzprint.zprint.ignore_key_seq = (function zprint$zprint$ignore_key_seq(m,ks){\nif(cljs.core.coll_QMARK_(ks)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m,ks,new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411)),new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411))){\nreturn m;\n} else {\nreturn cljs.core.assoc_in(m,ks,new cljs.core.Keyword(null,\"zprint-ignored\",\"zprint-ignored\",434436784));\n}\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ks,new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411)),new cljs.core.Keyword(null,\"zprint-not-found\",\"zprint-not-found\",-198220411))){\nreturn m;\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ks,new cljs.core.Keyword(null,\"zprint-ignored\",\"zprint-ignored\",434436784));\n}\n}\n});\n/**\n * Take a map and remove any of the key sequences specified from it.\n *   Note that this only works for sexpressions, not for actual zippers.\n */\nzprint.zprint.map_ignore = (function zprint$zprint$map_ignore(caller,p__52086,zloc){\nvar map__52087 = p__52086;\nvar map__52087__$1 = (((((!((map__52087 == null))))?(((((map__52087.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52087.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52087):map__52087);\nvar options = map__52087__$1;\nvar map__52088 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52087__$1,caller);\nvar map__52088__$1 = (((((!((map__52088 == null))))?(((((map__52088.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52088.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52088):map__52088);\nvar key_ignore = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52088__$1,new cljs.core.Keyword(null,\"key-ignore\",\"key-ignore\",75506668));\nvar key_ignore_silent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52088__$1,new cljs.core.Keyword(null,\"key-ignore-silent\",\"key-ignore-silent\",-1720115060));\nvar ignored_silent = (cljs.core.truth_(key_ignore_silent)?cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(zprint.zprint.ignore_key_seq_silent,zloc,key_ignore_silent):zloc);\nvar ignored = (cljs.core.truth_(key_ignore)?cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(zprint.zprint.ignore_key_seq,ignored_silent,key_ignore):ignored_silent);\nreturn ignored;\n});\n/**\n * Input is (zseqnws zloc) where one assumes that these are pairs.\n *   Thus, a seq of zlocs.  Output is a sequence of seqs, where the\n *   seqs are usually pairs, but might be single things.  Doesn't pair\n *   up comments or #_(...) unevaled sexpressions.  The ones before\n *   the first part of a pair come as a single element in what would\n *   usually be a pair, and the ones between the first and second parts\n *   of a pair come inside the pair.  There may be an arbitrary number\n *   of elements between the first and second elements of the pair\n *   (one per line).  If there are any comments or unevaled sexpressions,\n *   don't sort the keys, as we might lose track of where the comments\n *   or unevaled s-expressions go.\n */\nzprint.zprint.partition_all_2_nc = (function zprint$zprint$partition_all_2_nc(options,coll){\nif(cljs.core.empty_QMARK_(coll)){\nreturn null;\n} else {\nvar max_length = zprint.zprint.get_max_length(options);\nvar remaining = coll;\nvar no_sort_QMARK_ = null;\nvar index = (0);\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core.not(remaining)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [no_sort_QMARK_,cljs.core.persistent_BANG_(out)], null);\n} else {\nvar vec__52107 = (cljs.core.truth_(zprint.zprint.pair_element_QMARK_(cljs.core.first(remaining)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.next(remaining),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(remaining)], null),true], null):(cljs.core.truth_((function (){var or__4185__auto__ = zprint.zprint.pair_element_QMARK_(cljs.core.second(remaining));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn zprint.zprint.middle_element_QMARK_(options,cljs.core.second(remaining));\n}\n})())?(function (){var vec__52110 = cljs.core.split_with(((function (remaining,no_sort_QMARK_,index,out,max_length){\nreturn (function (p1__52095_SHARP_){\nvar or__4185__auto__ = zprint.zprint.pair_element_QMARK_(p1__52095_SHARP_);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn zprint.zprint.middle_element_QMARK_(options,p1__52095_SHARP_);\n}\n});})(remaining,no_sort_QMARK_,index,out,max_length))\n,cljs.core.next(remaining));\nvar comment_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52110,(0),null);\nvar rest_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52110,(1),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.next(rest_seq),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(remaining)], null),comment_seq,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(rest_seq)], null)], 0))),true], null);\n})():((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(remaining),(1)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.next(remaining),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(remaining)], null),null], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.next(cljs.core.next(remaining)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(remaining),cljs.core.second(remaining)], null),null], null)\n)));\nvar new_remaining = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52107,(0),null);\nvar pair_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52107,(1),null);\nvar new_no_sort_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52107,(2),null);\nvar G__53677 = ((((index + (1)) < max_length))?new_remaining:(cljs.core.truth_(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((index + (1)),max_length))?new_remaining:false))?(new cljs.core.List(null,(zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0 ? zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0() : zprint.zfns.zdotdotdot.call(null)),null,(1),null)):null\n));\nvar G__53678 = (function (){var or__4185__auto__ = no_sort_QMARK_;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn new_no_sort_QMARK_;\n}\n})();\nvar G__53679 = (index + (1));\nvar G__53680 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,pair_vec);\nremaining = G__53677;\nno_sort_QMARK_ = G__53678;\nindex = G__53679;\nout = G__53680;\ncontinue;\n}\nbreak;\n}\n}\n});\n/**\n * Take a seq, and if it is contains a single symbol, simply return\n *   it in another seq.  If it contains something else, remove any non\n *   collections off of the end and return them in their own double seqs,\n *   as well as return the remainder (the beginning) as a double seq.\n */\nzprint.zprint.cleave_end = (function zprint$zprint$cleave_end(coll){\nif(cljs.core.truth_((function (){var or__4185__auto__ = (function (){var G__52118 = cljs.core.first(coll);\nreturn (zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52118) : zprint.zfns.zsymbol_QMARK_.call(null,G__52118));\n})();\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nvar G__52121 = cljs.core.first(coll);\nreturn (zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52121) : zprint.zfns.zreader_cond_w_symbol_QMARK_.call(null,G__52121));\n}\n})())){\nreturn (new cljs.core.List(null,coll,null,(1),null));\n} else {\nvar rev_seq = cljs.core.reverse(coll);\nvar vec__52123 = cljs.core.split_with((function (p1__52115_SHARP_){\nreturn cljs.core.not((function (){var or__4185__auto__ = (zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__52115_SHARP_) : zprint.zfns.zcoll_QMARK_.call(null,p1__52115_SHARP_));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (zprint.zfns.zreader_cond_w_coll_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zreader_cond_w_coll_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__52115_SHARP_) : zprint.zfns.zreader_cond_w_coll_QMARK_.call(null,p1__52115_SHARP_));\n}\n})());\n}),rev_seq);\nvar split_non_coll = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52123,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52123,(1),null);\nvar split_non_coll__$1 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.list,cljs.core.reverse(split_non_coll));\nvar remainder = cljs.core.take.cljs$core$IFn$_invoke$arity$2((cljs.core.count(coll) - cljs.core.count(split_non_coll__$1)),coll);\nif(cljs.core.empty_QMARK_(remainder)){\nreturn split_non_coll__$1;\n} else {\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,remainder,null,(1),null)),split_non_coll__$1);\n}\n}\n});\n/**\n * Similar to partition-all-2-nc, but instead of trying to pair things\n *   up (modulo comments and unevaled expressions), this begins things\n *   with a symbol, and then accumulates collections until the next symbol.\n *   Returns a seq of seqs, where the first thing in each internal seq is\n *   a protocol and the remaining thing in that seq are the expressions that\n *   follow.  If there is a single thing, it is returned in its own internal\n *   seq. ((P (foo [this a) (bar-me [this] b) (barx [this y] (+ c y))) ...)\n *   Made harder by the fact that the symbol might be inside of a #?() reader\n *   conditional.  It handles comments before symbols on the symbol indent, \n *   and the comments before the collections on the collection indent.  \n *   Since it doesn't know how many collections there are, this is not trivial.  \n *   Must be called with a sequence of z-things\n */\nzprint.zprint.partition_all_sym = (function zprint$zprint$partition_all_sym(options,modifier_set,coll){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"partition-all-sym: coll:\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zstring,coll)], 0));\n} else {\n}\n\nvar part_sym = cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2((function (p1__52127_SHARP_){\nvar or__4185__auto__ = (zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__52127_SHARP_) : zprint.zfns.zsymbol_QMARK_.call(null,p1__52127_SHARP_));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nvar or__4185__auto____$1 = (zprint.zfns.znil_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.znil_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__52127_SHARP_) : zprint.zfns.znil_QMARK_.call(null,p1__52127_SHARP_));\nif(cljs.core.truth_(or__4185__auto____$1)){\nreturn or__4185__auto____$1;\n} else {\nreturn (zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__52127_SHARP_) : zprint.zfns.zreader_cond_w_symbol_QMARK_.call(null,p1__52127_SHARP_));\n}\n}\n}),coll);\nvar split_non_coll = cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(zprint.zprint.cleave_end,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([part_sym], 0));\nvar remaining = split_non_coll;\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core.empty_QMARK_(remaining)){\nreturn cljs.core.persistent_BANG_(out);\n} else {\nvar vec__52162 = (cljs.core.truth_((function (){var and__4174__auto__ = (function (){var or__4185__auto__ = (function (){var G__52186 = cljs.core.ffirst(remaining);\nreturn (zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52186) : zprint.zfns.zsymbol_QMARK_.call(null,G__52186));\n})();\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nvar or__4185__auto____$1 = (function (){var G__52189 = cljs.core.ffirst(remaining);\nreturn (zprint.zfns.znil_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.znil_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52189) : zprint.zfns.znil_QMARK_.call(null,G__52189));\n})();\nif(cljs.core.truth_(or__4185__auto____$1)){\nreturn or__4185__auto____$1;\n} else {\nvar G__52190 = cljs.core.ffirst(remaining);\nreturn (zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zreader_cond_w_symbol_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52190) : zprint.zfns.zreader_cond_w_symbol_QMARK_.call(null,G__52190));\n}\n}\n})();\nif(cljs.core.truth_(and__4174__auto__)){\nreturn (!(cljs.core.empty_QMARK_(cljs.core.second(remaining))));\n} else {\nreturn and__4174__auto__;\n}\n})())?((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(cljs.core.first(remaining)),(1)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.nthnext(remaining,(2)),cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.first(remaining),cljs.core.second(remaining)))], null):(cljs.core.truth_((function (){var and__4174__auto__ = modifier_set;\nif(cljs.core.truth_(and__4174__auto__)){\nvar G__52191 = (function (){var G__52192 = cljs.core.ffirst(remaining);\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__52192) : zprint.zfns.zstring.call(null,G__52192));\n})();\nreturn (modifier_set.cljs$core$IFn$_invoke$arity$1 ? modifier_set.cljs$core$IFn$_invoke$arity$1(G__52191) : modifier_set.call(null,G__52191));\n} else {\nreturn and__4174__auto__;\n}\n})())?((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(cljs.core.first(remaining)),(2)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.nthnext(remaining,(2)),cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.first(remaining),cljs.core.second(remaining)))], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((cljs.core.next(cljs.core.next(cljs.core.first(remaining))))?cljs.core.cons(cljs.core.next(cljs.core.next(cljs.core.first(remaining))),cljs.core.next(remaining)):cljs.core.next(remaining)),cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,(new cljs.core.List(null,cljs.core.ffirst(remaining),(new cljs.core.List(null,cljs.core.second(cljs.core.first(remaining)),null,(1),null)),(2),null)))], null)):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cons(cljs.core.next(cljs.core.first(remaining)),cljs.core.next(remaining)),cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,(new cljs.core.List(null,cljs.core.ffirst(remaining),null,(1),null)))], null))):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.next(remaining),cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(remaining))], null)\n);\nvar next_remaining = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52162,(0),null);\nvar new_out = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52162,(1),null);\nvar G__53719 = next_remaining;\nvar G__53720 = new_out;\nremaining = G__53719;\nout = G__53720;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Create an r-str-vec with, possibly, a newline at the beginning if\n *   the last thing before it is a comment.\n */\nzprint.zprint.rstr_vec = (function zprint$zprint$rstr_vec(var_args){\nvar G__52203 = arguments.length;\nswitch (G__52203) {\ncase 5:\nreturn zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ncase 4:\nreturn zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$5 = (function (options,ind,zloc,r_str,r_type){\nvar nl = (cljs.core.truth_((function (){var G__52208 = (zprint.zfns.zlast.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zlast.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zlast.call(null,zloc));\nreturn (zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52208) : zprint.zfns.zcomment_QMARK_.call(null,G__52208));\n})())?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null):null);\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(nl,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r_str,zprint.zprint.zcolor_map(options,(function (){var or__4185__auto__ = r_type;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn r_str;\n}\n})()),(function (){var or__4185__auto__ = r_type;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"right\",\"right\",-452581833);\n}\n})()], null)], null));\n}));\n\n(zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4 = (function (options,ind,zloc,r_str){\nreturn zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$5(options,ind,zloc,r_str,null);\n}));\n\n(zprint.zprint.rstr_vec.cljs$lang$maxFixedArity = 5);\n\nzprint.zprint.fzprint_binding_vec = (function zprint$zprint$fzprint_binding_vec(p__52213,ind,zloc){\nvar map__52214 = p__52213;\nvar map__52214__$1 = (((((!((map__52214 == null))))?(((((map__52214.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52214.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52214):map__52214);\nvar options = map__52214__$1;\nvar map__52215 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52214__$1,new cljs.core.Keyword(null,\"binding\",\"binding\",539932593));\nvar map__52215__$1 = (((((!((map__52215 == null))))?(((((map__52215.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52215.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52215):map__52215);\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52215__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-binding-vec:\",(function (){var G__52220 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__52220) : zprint.zfns.zstring.call(null,G__52220));\n})()], 0));\n} else {\n}\n\nvar options__$1 = zprint.zprint.rightmost(options);\nvar l_str = \"[\";\nvar r_str = \"]\";\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options__$1,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options__$1,(ind + (1)),zloc,r_str);\nvar value__51598__auto__ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc)),(0)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,r_str_vec], 0)):zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){var G__52222 = new cljs.core.Keyword(null,\"binding\",\"binding\",539932593).cljs$core$IFn$_invoke$arity$1(options__$1);\nvar G__52223 = (ind + (1));\nvar G__52224 = zprint.zprint.fzprint_map_two_up(new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),options__$1,(ind + (1)),false,cljs.core.second(zprint.zprint.partition_all_2_nc(options__$1,(zprint.zfns.zseqnws.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zseqnws.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zseqnws.call(null,zloc)))));\nreturn (zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3(G__52222,G__52223,G__52224) : zprint.zprint.interpose_nl_hf.call(null,G__52222,G__52223,G__52224));\n})(),r_str_vec], 0)));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),\"fzprint-binding-vec exit:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51598__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51598__auto__;\n});\n/**\n * Try to hang something and try to flow it, and then see which is\n *   better.  Has hang and flow indents. fzfn is the function to use \n *   to do zloc.  Note what fzfn does with the input.  For instance,\n *   fzprint-pairs does a (zmap-right identity zloc).  Presumably the\n *   caller knows what the fzfn does, so it has to count the items\n *   itself and pass it in here as zloc-count if it isn't just (zcount zloc).\n */\nzprint.zprint.fzprint_hang = (function zprint$zprint$fzprint_hang(p__52229,caller,hindent,findent,fzfn,zloc_count,zloc){\nvar map__52230 = p__52229;\nvar map__52230__$1 = (((((!((map__52230 == null))))?(((((map__52230.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52230.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52230):map__52230);\nvar options = map__52230__$1;\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52230__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang:\",(function (){var G__52233 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__52233) : zprint.zfns.zstring.call(null,G__52233));\n})(),\"caller:\",caller], 0));\n} else {\n}\n\nvar hanging = (cljs.core.truth_(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(hindent,findent))?(function (){var G__52239 = new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854);\nvar fexpr__52238 = (options.cljs$core$IFn$_invoke$arity$1 ? options.cljs$core$IFn$_invoke$arity$1(caller) : options.call(null,caller));\nreturn (fexpr__52238.cljs$core$IFn$_invoke$arity$1 ? fexpr__52238.cljs$core$IFn$_invoke$arity$1(G__52239) : fexpr__52238.call(null,G__52239));\n})():false))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),(function (){var G__52240 = zprint.zprint.in_hang(options);\nvar G__52241 = hindent;\nvar G__52242 = zloc;\nreturn (fzfn.cljs$core$IFn$_invoke$arity$3 ? fzfn.cljs$core$IFn$_invoke$arity$3(G__52240,G__52241,G__52242) : fzfn.call(null,G__52240,G__52241,G__52242));\n})()], 0)):null);\nvar hang_count = (function (){var or__4185__auto__ = zloc_count;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc));\n}\n})();\nvar hr_lines = zprint.zprint.style_lines(options,(hindent - (1)),hanging);\nif(cljs.core.truth_((function (){var or__4185__auto__ = zprint.zprint.fzfit_one_line(options,hr_lines);\nif(or__4185__auto__){\nreturn or__4185__auto__;\n} else {\nreturn one_line_QMARK_;\n}\n})())){\nreturn hanging;\n} else {\nvar flow = zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(findent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(fzfn.cljs$core$IFn$_invoke$arity$3 ? fzfn.cljs$core$IFn$_invoke$arity$3(options,findent,zloc) : fzfn.call(null,options,findent,zloc))], 0));\nvar _ = zprint.zprint.log_lines(options,\"fzprint-hang: flow:\",findent,flow);\nvar fd_lines = zprint.zprint.style_lines(options,findent,flow);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang: ending: hang-count:\",hang_count,\"hanging:\",hanging,\"flow:\",flow], 0)):null);\nvar hr_good_QMARK_ = (cljs.core.truth_(new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options))))?zprint.zprint.good_enough_QMARK_(caller,options,new cljs.core.Keyword(null,\"none-hang\",\"none-hang\",-1101780299),hang_count,(hindent - findent),hr_lines,fd_lines):null);\nif(cljs.core.truth_(hr_good_QMARK_)){\nreturn hanging;\n} else {\nreturn flow;\n}\n}\n});\n/**\n * Always prints pairs on a different line from other pairs.\n */\nzprint.zprint.fzprint_pairs = (function zprint$zprint$fzprint_pairs(p__52245,ind,zloc){\nvar map__52246 = p__52245;\nvar map__52246__$1 = (((((!((map__52246 == null))))?(((((map__52246.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52246.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52246):map__52246);\nvar options = map__52246__$1;\nvar map__52247 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52246__$1,new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312));\nvar map__52247__$1 = (((((!((map__52247 == null))))?(((((map__52247.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52247.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52247):map__52247);\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52247__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-pairs:\",(function (){var G__52250 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__52250) : zprint.zfns.zstring.call(null,G__52250));\n})()], 0));\n} else {\n}\n\nvar value__51598__auto__ = (function (){var G__52251 = new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312).cljs$core$IFn$_invoke$arity$1(options);\nvar G__52252 = ind;\nvar G__52253 = zprint.zprint.fzprint_map_two_up(new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),options,ind,false,(function (){var vec__52254 = zprint.zprint.partition_all_2_nc(options,(zprint.zfns.zmap_right.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap_right.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap_right.call(null,cljs.core.identity,zloc)));\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52254,(0),null);\nvar part = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52254,(1),null);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-pairs: partition:\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zstring,cljs.core.first),part)], 0));\n} else {\n}\n\nreturn part;\n})());\nreturn (zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3(G__52251,G__52252,G__52253) : zprint.zprint.interpose_nl_hf.call(null,G__52251,G__52252,G__52253));\n})();\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-pairs: exit:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51598__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51598__auto__;\n});\n/**\n * Print things with a symbol and collections following.  Kind of like with\n *   pairs, but not quite. This skips over zloc and does everything to the\n *   right of it!\n */\nzprint.zprint.fzprint_extend = (function zprint$zprint$fzprint_extend(p__52260,ind,zloc){\nvar map__52262 = p__52260;\nvar map__52262__$1 = (((((!((map__52262 == null))))?(((((map__52262.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52262.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52262):map__52262);\nvar options = map__52262__$1;\nvar map__52263 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52262__$1,new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006));\nvar map__52263__$1 = (((((!((map__52263 == null))))?(((((map__52263.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52263.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52263):map__52263);\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52263__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-extend:\",(function (){var G__52266 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__52266) : zprint.zfns.zstring.call(null,G__52266));\n})()], 0));\n} else {\n}\n\nvar value__51598__auto__ = (function (){var G__52267 = new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006).cljs$core$IFn$_invoke$arity$1(options);\nvar G__52268 = ind;\nvar G__52269 = zprint.zprint.fzprint_map_two_up(new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"fn-style\",\"fn-style\",1330516917),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)),ind,false,(function (){var part = zprint.zprint.partition_all_sym(options,new cljs.core.Keyword(null,\"modifiers\",\"modifiers\",50378834).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006).cljs$core$IFn$_invoke$arity$1(options)),(zprint.zfns.zmap_right.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap_right.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap_right.call(null,cljs.core.identity,zloc)));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-extend: partition:\",cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__52257_SHARP_){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zstring,p1__52257_SHARP_);\n}),part)], 0));\n} else {\n}\n\nreturn part;\n})());\nreturn (zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3(G__52267,G__52268,G__52269) : zprint.zprint.interpose_nl_hf.call(null,G__52267,G__52268,G__52269));\n})();\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-extend: exit:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51598__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51598__auto__;\n});\n/**\n * Given a transient vector v, concatenate all of the other\n *   elements in all of the remaining collections onto v.\n */\nzprint.zprint.concatv_BANG_ = (function zprint$zprint$concatv_BANG_(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___53798 = arguments.length;\nvar i__4790__auto___53799 = (0);\nwhile(true){\nif((i__4790__auto___53799 < len__4789__auto___53798)){\nargs__4795__auto__.push((arguments[i__4790__auto___53799]));\n\nvar G__53800 = (i__4790__auto___53799 + (1));\ni__4790__auto___53799 = G__53800;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((1) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((1)),(0),null)):null);\nreturn zprint.zprint.concatv_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4796__auto__);\n});\n\n(zprint.zprint.concatv_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (v,rest){\nvar cols = rest;\nvar out = v;\nwhile(true){\nif(cljs.core.truth_(cols)){\nvar G__53801 = cljs.core.next(cols);\nvar G__53802 = (function (){var col = cljs.core.first(cols);\nvar out__$1 = out;\nwhile(true){\nif(cljs.core.truth_(col)){\nvar G__53803 = cljs.core.next(col);\nvar G__53804 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out__$1,cljs.core.first(col));\ncol = G__53803;\nout__$1 = G__53804;\ncontinue;\n} else {\nreturn out__$1;\n}\nbreak;\n}\n})();\ncols = G__53801;\nout = G__53802;\ncontinue;\n} else {\nreturn out;\n}\nbreak;\n}\n}));\n\n(zprint.zprint.concatv_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(zprint.zprint.concatv_BANG_.cljs$lang$applyTo = (function (seq52278){\nvar G__52279 = cljs.core.first(seq52278);\nvar seq52278__$1 = cljs.core.next(seq52278);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__52279,seq52278__$1);\n}));\n\n/**\n * Do a fzprint-seq like thing, but do it incrementally and\n *   if it gets too big, return nil.\n */\nzprint.zprint.fzprint_one_line = (function zprint$zprint$fzprint_one_line(options,ind,zloc){\nif(cljs.core.truth_((function (){var or__4185__auto__ = new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"dbg-print?\",\"dbg-print?\",-660113872).cljs$core$IFn$_invoke$arity$1(options);\n}\n})())){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-one-line:\"], 0));\n} else {\n}\n\nvar seq_right = (zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap.call(null,cljs.core.identity,zloc));\nvar len = cljs.core.count(seq_right);\nvar last_index = (len - (1));\nvar gt_1_QMARK_ = (cljs.core.count(seq_right) > (1));\nvar options__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111),true);\nvar zloc_seq = seq_right;\nvar new_ind = cljs.core.long$(ind);\nvar index = (0);\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core.empty_QMARK_(zloc_seq)){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),\"fzprint-one-line: exiting count:\",cljs.core.count(out)], 0));\n} else {\n}\n\nreturn cljs.core.persistent_BANG_(out);\n} else {\nvar next_zloc = cljs.core.first(zloc_seq);\nvar vec__52305 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(index,last_index))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(((!((index === (0)))))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null):null),options__$1], null):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(index,(0)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,zprint.zprint.not_rightmost(options__$1)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),zprint.zprint.not_rightmost(options__$1)], null)\n));\nvar sep = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52305,(0),null);\nvar next_options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52305,(1),null);\nvar next_out = (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(next_options,new_ind,next_zloc) : zprint.zprint.fzprint_STAR_.call(null,next_options,new_ind,next_zloc));\nvar _ = zprint.zprint.log_lines(options__$1,\"fzprint-one-line:\",new_ind,next_out);\nvar vec__52308 = zprint.zprint.style_lines(options__$1,new_ind,next_out);\nvar line_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52308,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52308,(1),null);\nvar next_lines = vec__52308;\nif((!(zprint.zprint.fzfit_one_line(next_options,next_lines)))){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),\"fzprint-one-line: failed, too wide or too many lines!\"], 0));\n} else {\n}\n\nreturn null;\n} else {\nvar G__53810 = cljs.core.next(zloc_seq);\nvar G__53811 = (cljs.core.long$(max_width) + (1));\nvar G__53812 = (index + (1));\nvar G__53813 = zprint.zprint.concatv_BANG_.cljs$core$IFn$_invoke$arity$variadic(out,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([sep,next_out], 0));\nzloc_seq = G__53810;\nnew_ind = G__53811;\nindex = G__53812;\nout = G__53813;\ncontinue;\n}\n}\nbreak;\n}\n});\n/**\n * Take a seq of a zloc, created by (zmap identity zloc) when zloc\n *   is a collection, or (zmap-right identity zloc) when zloc is already\n *   inside of a collection, and return a seq of the fzprint* of each \n *   element.  No spacing between any of these elements. Note that this\n *   is not a style-vec, but a seq of style-vecs of each of the elements.\n *   These would need to be concatenated together to become a style-vec.\n *   ind is either a constant or a seq of indents, one for each element in\n *   zloc-seq.\n */\nzprint.zprint.fzprint_seq = (function zprint$zprint$fzprint_seq(options,ind,zloc_seq){\nvar max_length = zprint.zprint.get_max_length(options);\nvar len = cljs.core.count(zloc_seq);\nvar zloc_seq__$1 = (((len > max_length))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.take.cljs$core$IFn$_invoke$arity$2(max_length,zloc_seq),(new cljs.core.List(null,(zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0 ? zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0() : zprint.zfns.zdotdotdot.call(null)),null,(1),null))):zloc_seq);\nvar len__$1 = cljs.core.count(zloc_seq__$1);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-seq: (count zloc-seq):\",len__$1,\"max-length:\",max_length], 0));\n} else {\n}\n\nif(cljs.core.empty_QMARK_(zloc_seq__$1)){\nreturn null;\n} else {\nif((max_length === (0))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"#?#\",zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null)], null);\n} else {\nvar left = zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$4(options,(function (p1__52318_SHARP_,p2__52319_SHARP_){\nvar G__52339 = zprint.zprint.not_rightmost(options);\nvar G__52340 = p1__52318_SHARP_;\nvar G__52341 = p2__52319_SHARP_;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52339,G__52340,G__52341) : zprint.zprint.fzprint_STAR_.call(null,G__52339,G__52340,G__52341));\n}),((cljs.core.coll_QMARK_(ind))?ind:cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(ind)),cljs.core.butlast(zloc_seq__$1));\nvar right = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__52349 = options;\nvar G__52353 = ((cljs.core.coll_QMARK_(ind))?cljs.core.last(ind):ind);\nvar G__52354 = cljs.core.last(zloc_seq__$1);\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52349,G__52353,G__52354) : zprint.zprint.fzprint_STAR_.call(null,G__52349,G__52353,G__52354));\n})()], null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$1,(1))){\nreturn right;\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([left,right], 0));\n\n}\n\n}\n}\n});\n/**\n * Take a seq of a zloc, created by (zmap identity zloc) or\n *   and return a style-vec of the result.  Either it fits on one line, \n *   or it is rendered on multiple lines.  You can force multiple lines \n *   with force-nl?. If you want it to do less than everything in the \n *   original zloc, modify the result of (zmap identity zloc) to just \n *   contain what you want to print. ind is either a single indent,\n *   or a seq of indents, one for each element in zloc-seq.\n */\nzprint.zprint.fzprint_flow_seq = (function zprint$zprint$fzprint_flow_seq(var_args){\nvar G__52366 = arguments.length;\nswitch (G__52366) {\ncase 4:\nreturn zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 3:\nreturn zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$4 = (function (options,ind,zloc_seq,force_nl_QMARK_){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-flow-seq: count zloc-seq:\",cljs.core.count(zloc_seq)], 0));\n} else {\n}\n\nvar coll_print = zprint.zprint.fzprint_seq(options,ind,zloc_seq);\nvar one_line = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),coll_print));\nvar _ = zprint.zprint.log_lines(options,\"fzprint-flow-seq:\",ind,one_line);\nvar one_line_lines = zprint.zprint.style_lines(options,ind,one_line);\nvar value__51598__auto__ = ((((cljs.core.not(force_nl_QMARK_)) && (zprint.zprint.fzfit_one_line(options,one_line_lines))))?one_line:cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,((cljs.core.coll_QMARK_(ind))?cljs.core.drop.cljs$core$IFn$_invoke$arity$2((1),cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__52360_SHARP_){\nreturn (new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(p1__52360_SHARP_))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)],null));\n}),ind),coll_print)):cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),coll_print))));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-flow-seq: exit:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51598__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51598__auto__;\n}));\n\n(zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$3 = (function (options,ind,zloc_seq){\nreturn zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$4(options,ind,zloc_seq,null);\n}));\n\n(zprint.zprint.fzprint_flow_seq.cljs$lang$maxFixedArity = 4);\n\n/**\n * Try out the given zloc, and if it fits on the current line, just\n *   do that. It might fit on the same line, as this may not be the rest\n *   of the list that we are printing. If not, check it out with good-enough?\n *   and do the best you can.  Three choices, really: fits on same line, \n *   does ok as hanging, or better with flow. hindent is hang-indent, and \n *   findent is flow-indent, and each contains the initial separator.  \n *   Might be nice if the fn-style actually got sent to this fn.\n */\nzprint.zprint.fzprint_hang_one = (function zprint$zprint$fzprint_hang_one(caller,p__52375,hindent,findent,zloc){\nvar map__52376 = p__52375;\nvar map__52376__$1 = (((((!((map__52376 == null))))?(((((map__52376.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52376.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52376):map__52376);\nvar options = map__52376__$1;\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52376__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-one: hindent:\",hindent,\"findent:\",findent], 0));\n} else {\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg-hang\",\"dbg-hang\",-1928862076).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([zprint.zprint.dots(new cljs.core.Keyword(null,\"pdepth\",\"pdepth\",-1943862342).cljs$core$IFn$_invoke$arity$1(options)),\"h1 caller:\",caller,(function (){var G__52380 = (cljs.core.truth_((zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcoll_QMARK_.call(null,zloc)))?(zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc)):zloc);\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__52380) : zprint.zfns.zstring.call(null,G__52380));\n})()], 0));\n} else {\n}\n\nvar local_options = ((((cljs.core.not(one_line_QMARK_)) && (cljs.core.not(new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options)))))))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111),true):options);\nvar hindent__$1 = (function (){var or__4185__auto__ = hindent;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn findent;\n}\n})();\nvar hanging = ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(hindent__$1,findent))?(function (){var G__52385 = zprint.zprint.in_hang(local_options);\nvar G__52386 = hindent__$1;\nvar G__52387 = zloc;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52385,G__52386,G__52387) : zprint.zprint.fzprint_STAR_.call(null,G__52385,G__52386,G__52387));\n})():null);\nvar hang_count = (zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc));\nvar hanging__$1 = zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),hanging], 0));\nvar _ = zprint.zprint.log_lines(options,\"fzprint-hang-one: hanging:\",(hindent__$1 - (1)),hanging__$1);\nvar hr_lines = zprint.zprint.style_lines(options,(hindent__$1 - (1)),hanging__$1);\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-one: hr-lines:\",hr_lines,\"hang-count:\",hang_count], 0));\n} else {\n}\n\nif(cljs.core.truth_((function (){var or__4185__auto__ = zprint.zprint.fzfit_one_line(options,hr_lines);\nif(or__4185__auto__){\nreturn or__4185__auto__;\n} else {\nreturn one_line_QMARK_;\n}\n})())){\nreturn hanging__$1;\n} else {\nvar flow = zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(findent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(options,findent,zloc) : zprint.zprint.fzprint_STAR_.call(null,options,findent,zloc))], 0));\nvar ___$1 = zprint.zprint.log_lines(options,\"fzprint-hang-one: flow:\",findent,flow);\nvar fd_lines = zprint.zprint.style_lines(options,findent,flow);\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-one: fd-lines:\",fd_lines], 0)):null);\nvar ___$3 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-one: ending: hang-count:\",hang_count,\"hanging:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([hanging__$1], 0)),\"flow:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([flow], 0))], 0)):null);\nvar hr_good_QMARK_ = (function (){var and__4174__auto__ = new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options)));\nif(cljs.core.truth_(and__4174__auto__)){\nreturn zprint.zprint.good_enough_QMARK_(caller,options,new cljs.core.Keyword(null,\"none-hang-one\",\"none-hang-one\",-1392848107),hang_count,(hindent__$1 - findent),hr_lines,fd_lines);\n} else {\nreturn and__4174__auto__;\n}\n})();\nif(cljs.core.truth_(hr_good_QMARK_)){\nreturn hanging__$1;\n} else {\nreturn flow;\n}\n}\n});\n/**\n * Given a seq of zlocs, work backwards from the end, and see how\n *   many elements are pairs of constants (using zconstant?).  So that\n *   (... :a (stuff) :b (bother)) returns 4, since both :a and :b are\n *   zconstant? true. This is made more difficult by having to skip\n *   comments along the way as part of the pair check, but keep track\n *   of the ones we skip so the count is right in the end.  We don't\n *   expect any whitespace in this, because this seq should have been\n *   produced by zmap-right or its equivalent, which already skips the\n *   whitespace.\n */\nzprint.zprint.count_constant_pairs = (function zprint$zprint$count_constant_pairs(seq_right){\nvar seq_right_rev = cljs.core.reverse(seq_right);\nvar element_count = (0);\nvar constant_required_QMARK_ = null;\nvar pair_size = (0);\nwhile(true){\nvar element = cljs.core.first(seq_right_rev);\nif(cljs.core.empty_QMARK_(seq_right_rev)){\nreturn (element_count - pair_size);\n} else {\nvar comment_QMARK_ = (zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(element) : zprint.zfns.zcomment_QMARK_.call(null,element));\nif(cljs.core.truth_(((cljs.core.not(comment_QMARK_))?(function (){var and__4174__auto__ = constant_required_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core.not((zprint.zfns.zconstant_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zconstant_QMARK_.cljs$core$IFn$_invoke$arity$1(element) : zprint.zfns.zconstant_QMARK_.call(null,element)));\n} else {\nreturn and__4174__auto__;\n}\n})():false))){\nreturn (element_count - pair_size);\n} else {\nvar G__53823 = cljs.core.next(seq_right_rev);\nvar G__53824 = (element_count + (1));\nvar G__53825 = (cljs.core.truth_(comment_QMARK_)?constant_required_QMARK_:cljs.core.not(constant_required_QMARK_));\nvar G__53826 = (cljs.core.truth_((function (){var and__4174__auto__ = constant_required_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core.not(comment_QMARK_);\n} else {\nreturn and__4174__auto__;\n}\n})())?(0):(pair_size + (1)));\nseq_right_rev = G__53823;\nelement_count = G__53824;\nconstant_required_QMARK_ = G__53825;\npair_size = G__53826;\ncontinue;\n}\n}\nbreak;\n}\n});\n/**\n * Argument is result of (zmap-right identity zloc), that is to say\n *   a seq of zlocs.  Output is a [pair-seq non-paired-item-count],\n *   if any.  If there are no pair-seqs, pair-seq must be nil, not\n *   an empty seq.\n */\nzprint.zprint.constant_pair = (function zprint$zprint$constant_pair(caller,p__52400,seq_right){\nvar map__52401 = p__52400;\nvar map__52401__$1 = (((((!((map__52401 == null))))?(((((map__52401.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52401.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52401):map__52401);\nvar options = map__52401__$1;\nvar map__52402 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52401__$1,caller);\nvar map__52402__$1 = (((((!((map__52402 == null))))?(((((map__52402.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52402.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52402):map__52402);\nvar constant_pair_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52402__$1,new cljs.core.Keyword(null,\"constant-pair?\",\"constant-pair?\",-1009181437));\nvar constant_pair_min = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52402__$1,new cljs.core.Keyword(null,\"constant-pair-min\",\"constant-pair-min\",1245759721));\nif(cljs.core.truth_(constant_pair_QMARK_)){\nvar paired_item_count = zprint.zprint.count_constant_pairs(seq_right);\nvar non_paired_item_count = (cljs.core.count(seq_right) - paired_item_count);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"constant-pair: non-paired-items:\",non_paired_item_count], 0)):null);\nvar pair_seq = (((paired_item_count >= constant_pair_min))?cljs.core.second(zprint.zprint.partition_all_2_nc(options,cljs.core.drop.cljs$core$IFn$_invoke$arity$2(non_paired_item_count,seq_right))):null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pair_seq,non_paired_item_count], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,cljs.core.count(seq_right)], null);\n}\n});\n/**\n * zloc is already down inside a collection, it is not the collection\n *   itself. Operate on what is to the right of zloc.  We already know\n *   that the given zloc won't fit on the current line. [Besides, we\n *   ensure that if there are two things remaining anyway. ???] So\n *   now, try hanging and see if that is better than flow.  Unless\n *   :hang? is nil, in which case we will just flow.  hindent is\n *   hang-indent, and findent is flow-indent. This should never be\n *   called with :one-line because this is only called from fzprint-list*\n *   after the one-line processing is done. If the hindent equals the\n *   flow indent, then just do flow.  Do only zloc-count non-whitespace\n *   elements of zloc.\n */\nzprint.zprint.fzprint_hang_remaining = (function zprint$zprint$fzprint_hang_remaining(var_args){\nvar G__52422 = arguments.length;\nswitch (G__52422) {\ncase 7:\nreturn zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$7((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]));\n\nbreak;\ncase 6:\nreturn zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$7 = (function (caller,p__52427,hindent,findent,zloc,fn_style,zloc_count){\nvar map__52430 = p__52427;\nvar map__52430__$1 = (((((!((map__52430 == null))))?(((((map__52430.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52430.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52430):map__52430);\nvar options = map__52430__$1;\nvar map__52431 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52430__$1,caller);\nvar map__52431__$1 = (((((!((map__52431 == null))))?(((((map__52431.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52431.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52431):map__52431);\nvar hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52431__$1,new cljs.core.Keyword(null,\"hang?\",\"hang?\",-579442854));\nvar constant_pair_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52431__$1,new cljs.core.Keyword(null,\"constant-pair?\",\"constant-pair?\",-1009181437));\nvar constant_pair_min = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52431__$1,new cljs.core.Keyword(null,\"constant-pair-min\",\"constant-pair-min\",1245759721));\nvar hang_avoid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52431__$1,new cljs.core.Keyword(null,\"hang-avoid\",\"hang-avoid\",-138703568));\nvar hang_expand = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52431__$1,new cljs.core.Keyword(null,\"hang-expand\",\"hang-expand\",1086807559));\nvar hang_diff = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52431__$1,new cljs.core.Keyword(null,\"hang-diff\",\"hang-diff\",-1575205424));\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52431__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nvar dbg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52430__$1,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52430__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg-hang\",\"dbg-hang\",-1928862076).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([zprint.zprint.dots(new cljs.core.Keyword(null,\"pdepth\",\"pdepth\",-1943862342).cljs$core$IFn$_invoke$arity$1(options)),\"hr\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0));\n} else {\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\"hindent:\",hindent,\"findent:\",findent,\"caller:\",caller,\"nl-separator?:\",nl_separator_QMARK_], 0));\n} else {\n}\n\nvar seq_right = (zprint.zfns.zmap_right.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap_right.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap_right.call(null,cljs.core.identity,zloc));\nvar seq_right__$1 = (cljs.core.truth_(zloc_count)?cljs.core.take.cljs$core$IFn$_invoke$arity$2(zloc_count,seq_right):seq_right);\nvar vec__52437 = zprint.zprint.constant_pair(caller,options,seq_right__$1);\nvar pair_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52437,(0),null);\nvar non_paired_item_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52437,(1),null);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining count pair-seq:\",cljs.core.count(pair_seq)], 0)):null);\nvar flow = (function (){var flow_result = ((cljs.core.not(pair_seq))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(findent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_seq(options,findent,seq_right__$1))):(((!((non_paired_item_count === (0)))))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(findent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$3(options,cljs.core.partial.cljs$core$IFn$_invoke$arity$3(zprint.zprint.fzprint_STAR_,zprint.zprint.not_rightmost(options),findent),cljs.core.take.cljs$core$IFn$_invoke$arity$2(non_paired_item_count,seq_right__$1)))),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(findent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(function (){var G__52453 = new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312).cljs$core$IFn$_invoke$arity$1(options);\nvar G__52454 = findent;\nvar G__52456 = zprint.zprint.fzprint_map_two_up(new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),options,findent,null,pair_seq);\nreturn (zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3(G__52453,G__52454,G__52456) : zprint.zprint.interpose_nl_hf.call(null,G__52453,G__52454,G__52456));\n})()], 0)):(function (){var G__52457 = new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312).cljs$core$IFn$_invoke$arity$1(options);\nvar G__52458 = findent;\nvar G__52459 = zprint.zprint.fzprint_map_two_up(new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),options,findent,null,pair_seq);\nreturn (zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3(G__52457,G__52458,G__52459) : zprint.zprint.interpose_nl_hf.call(null,G__52457,G__52458,G__52459));\n})()));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [flow_result,zprint.zprint.style_lines(options,findent,flow_result)], null);\n})();\nvar hang_QMARK___$1 = (function (){var and__4174__auto__ = hang_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(hindent,findent)) && (((cljs.core.not(hang_avoid)) || ((cljs.core.count(seq_right__$1) < ((width - hindent) * hang_avoid))))));\n} else {\nreturn and__4174__auto__;\n}\n})();\nvar hanging = (function (){var hang_result = (cljs.core.truth_(hang_QMARK___$1)?((cljs.core.not(pair_seq))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(hindent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_seq(zprint.zprint.in_hang(options),hindent,seq_right__$1))):(((!((non_paired_item_count === (0)))))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var value__51598__auto__ = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(hindent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$3(options,cljs.core.partial.cljs$core$IFn$_invoke$arity$3(zprint.zprint.fzprint_STAR_,zprint.zprint.not_rightmost(zprint.zprint.in_hang(options)),hindent),cljs.core.take.cljs$core$IFn$_invoke$arity$2(non_paired_item_count,seq_right__$1))));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining: mapv:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51598__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51598__auto__;\n})(),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(hindent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(function (){var value__51598__auto__ = (function (){var G__52469 = new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312).cljs$core$IFn$_invoke$arity$1(options);\nvar G__52470 = hindent;\nvar G__52471 = zprint.zprint.fzprint_map_two_up(new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),zprint.zprint.in_hang(options),hindent,null,pair_seq);\nreturn (zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3(G__52469,G__52470,G__52471) : zprint.zprint.interpose_nl_hf.call(null,G__52469,G__52470,G__52471));\n})();\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining: fzprint-hang:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([value__51598__auto__], 0))], 0));\n} else {\n}\n\nreturn value__51598__auto__;\n})()], 0)):(function (){var G__52475 = new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312).cljs$core$IFn$_invoke$arity$1(options);\nvar G__52476 = hindent;\nvar G__52477 = zprint.zprint.fzprint_map_two_up(new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),zprint.zprint.in_hang(options),hindent,null,pair_seq);\nreturn (zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.interpose_nl_hf.cljs$core$IFn$_invoke$arity$3(G__52475,G__52476,G__52477) : zprint.zprint.interpose_nl_hf.call(null,G__52475,G__52476,G__52477));\n})())):null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hang_result,zprint.zprint.style_lines(options,hindent,hang_result)], null);\n})();\nvar vec__52440 = zprint.zprint.zat(options,flow);\nvar flow__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52440,(0),null);\nvar flow_lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52440,(1),null);\nvar vec__52443 = zprint.zprint.zat(options,hanging);\nvar hanging__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52443,(0),null);\nvar hanging_lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52443,(1),null);\nvar hang_count = cljs.core.count(seq_right__$1);\nvar ___$1 = zprint.zprint.log_lines(options,\"fzprint-hang-remaining: hanging:\",hindent,hanging__$1);\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining: hanging-lines:\",hanging_lines,\"hang-count:\",hang_count], 0)):null);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-hang-remaining: flow-lines:\",flow_lines], 0));\n} else {\n}\n\nif(cljs.core.truth_(dbg_QMARK_)){\nif((hang_count === (0))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"hang-count = 0:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((zprint.zfns.zmap_right.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap_right.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zstring,zloc) : zprint.zfns.zmap_right.call(null,zprint.zfns.zstring,zloc)))], 0));\n} else {\n}\n} else {\n}\n\nzprint.zprint.log_lines(options,\"fzprint-hang-remaining: flow\",findent,flow__$1);\n\nif(cljs.core.truth_(flow_lines)){\nif(cljs.core.truth_(zprint.zprint.good_enough_QMARK_(caller,options,fn_style,hang_count,(hindent - findent),hanging_lines,flow_lines))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),hanging__$1], 0));\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(findent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),flow__$1], 0));\n}\n} else {\nreturn null;\n}\n}));\n\n(zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6 = (function (caller,options,hindent,findent,zloc,fn_style){\nreturn zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$7(caller,options,hindent,findent,zloc,fn_style,null);\n}));\n\n(zprint.zprint.fzprint_hang_remaining.cljs$lang$maxFixedArity = 7);\n\nzprint.zprint.body_set = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126),null,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),null,new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),null,new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917),null,new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),null,new cljs.core.Keyword(null,\"noarg1-body\",\"noarg1-body\",774553320),null,new cljs.core.Keyword(null,\"arg1-pair-body\",\"arg1-pair-body\",541801100),null,new cljs.core.Keyword(null,\"arg2-fn\",\"arg2-fn\",1172769072),null,new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),null,new cljs.core.Keyword(null,\"flow-body\",\"flow-body\",1355242804),null,new cljs.core.Keyword(null,\"arg1->\",\"arg1->\",1319654329),null,new cljs.core.Keyword(null,\"none-body\",\"none-body\",-171554854),null], null), null);\nzprint.zprint.body_map = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"arg1-body\",\"arg1-body\",-1677449564),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg1-pair-body\",\"arg1-pair-body\",541801100),new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953),new cljs.core.Keyword(null,\"none-body\",\"none-body\",-171554854),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"flow-body\",\"flow-body\",1355242804),new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),new cljs.core.Keyword(null,\"noarg1-body\",\"noarg1-body\",774553320),new cljs.core.Keyword(null,\"noarg1\",\"noarg1\",2031519464),new cljs.core.Keyword(null,\"force-nl-body\",\"force-nl-body\",1789087439),new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826)], null);\nzprint.zprint.noarg1_set = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"noarg1\",\"noarg1\",2031519464),null,new cljs.core.Keyword(null,\"arg1->\",\"arg1->\",1319654329),null], null), null);\nzprint.zprint.noarg1_map = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953),new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),new cljs.core.Keyword(null,\"arg1-extend\",\"arg1-extend\",-157225050),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917),new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358),new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126),new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953)], null);\n/**\n * Set noarg1 in the options if it is the right fn-type.\n */\nzprint.zprint.noarg1 = (function zprint$zprint$noarg1(options,fn_type){\nif(cljs.core.truth_((zprint.zprint.noarg1_set.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.noarg1_set.cljs$core$IFn$_invoke$arity$1(fn_type) : zprint.zprint.noarg1_set.call(null,fn_type)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"no-arg1?\",\"no-arg1?\",1560368430),true);\n} else {\nreturn options;\n}\n});\nzprint.zprint.fn_style__GT_caller = new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"arg1-pair-body\",\"arg1-pair-body\",541801100),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),new cljs.core.Keyword(null,\"arg1-extend\",\"arg1-extend\",-157225050),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"arg2-extend\",\"arg2-extend\",1554629186),new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006),new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),new cljs.core.Keyword(null,\"pair\",\"pair\",-447516312)], null);\n/**\n * Should we allow this function to print on a single line?\n */\nzprint.zprint.allow_one_line_QMARK_ = (function zprint$zprint$allow_one_line_QMARK_(p__52493,len,fn_style){\nvar map__52495 = p__52493;\nvar map__52495__$1 = (((((!((map__52495 == null))))?(((((map__52495.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52495.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52495):map__52495);\nvar options = map__52495__$1;\nvar fn_force_nl = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52495__$1,new cljs.core.Keyword(null,\"fn-force-nl\",\"fn-force-nl\",1501458692));\nvar fn_gt2_force_nl = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52495__$1,new cljs.core.Keyword(null,\"fn-gt2-force-nl\",\"fn-gt2-force-nl\",1348579537));\nvar fn_gt3_force_nl = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52495__$1,new cljs.core.Keyword(null,\"fn-gt3-force-nl\",\"fn-gt3-force-nl\",-58306985));\nreturn cljs.core.not((function (){var or__4185__auto__ = (fn_force_nl.cljs$core$IFn$_invoke$arity$1 ? fn_force_nl.cljs$core$IFn$_invoke$arity$1(fn_style) : fn_force_nl.call(null,fn_style));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nvar or__4185__auto____$1 = (((len > (3)))?(fn_gt2_force_nl.cljs$core$IFn$_invoke$arity$1 ? fn_gt2_force_nl.cljs$core$IFn$_invoke$arity$1(fn_style) : fn_gt2_force_nl.call(null,fn_style)):false);\nif(cljs.core.truth_(or__4185__auto____$1)){\nreturn or__4185__auto____$1;\n} else {\nvar or__4185__auto____$2 = (((len > (4)))?(fn_gt3_force_nl.cljs$core$IFn$_invoke$arity$1 ? fn_gt3_force_nl.cljs$core$IFn$_invoke$arity$1(fn_style) : fn_gt3_force_nl.call(null,fn_style)):false);\nif(cljs.core.truth_(or__4185__auto____$2)){\nreturn or__4185__auto____$2;\n} else {\nvar temp__5733__auto__ = (zprint.zprint.fn_style__GT_caller.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.fn_style__GT_caller.cljs$core$IFn$_invoke$arity$1(fn_style) : zprint.zprint.fn_style__GT_caller.call(null,fn_style));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar future_caller = temp__5733__auto__;\nvar caller_map = (future_caller.cljs$core$IFn$_invoke$arity$1 ? future_caller.cljs$core$IFn$_invoke$arity$1(options) : future_caller.call(null,options));\nvar or__4185__auto____$3 = new cljs.core.Keyword(null,\"flow?\",\"flow?\",96929057).cljs$core$IFn$_invoke$arity$1(caller_map);\nif(cljs.core.truth_(or__4185__auto____$3)){\nreturn or__4185__auto____$3;\n} else {\nreturn new cljs.core.Keyword(null,\"force-nl?\",\"force-nl?\",-1299761462).cljs$core$IFn$_invoke$arity$1(caller_map);\n}\n} else {\nreturn null;\n}\n}\n}\n}\n})());\n});\n/**\n * If the (caller options) has a value for :return-altered-zipper, then\n *   examine the value.  It should be [<depth> <symbol> <fn>]. \n *   If the <depth> is nil, any depth will do. If the\n *   <symbol> is nil, any symbol will do.  If the <depth> and <symbol>\n *   match, then the <fn> is called as (fn caller options zloc), and must\n *   return a new zloc.\n */\nzprint.zprint.modify_zloc = (function zprint$zprint$modify_zloc(caller,options,zloc){\nvar vec__52511 = new cljs.core.Keyword(null,\"return-altered-zipper\",\"return-altered-zipper\",837872379).cljs$core$IFn$_invoke$arity$1((caller.cljs$core$IFn$_invoke$arity$1 ? caller.cljs$core$IFn$_invoke$arity$1(options) : caller.call(null,options)));\nvar depth = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52511,(0),null);\nvar trigger_symbol = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52511,(1),null);\nvar modify_fn = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52511,(2),null);\nvar return_altered_zipper_value = vec__52511;\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"modify-zloc caller:\",caller,\"ztype\",new cljs.core.Keyword(null,\"ztype\",\"ztype\",-562179020).cljs$core$IFn$_invoke$arity$1(options),\"return-altered-zipper-value:\",return_altered_zipper_value], 0));\n} else {\n}\n\nif(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"ztype\",\"ztype\",-562179020).cljs$core$IFn$_invoke$arity$1(options),new cljs.core.Keyword(null,\"zipper\",\"zipper\",1500694438))) || ((return_altered_zipper_value == null)))){\nreturn zloc;\n} else {\nvar call_fn_QMARK_ = (((((depth == null)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640).cljs$core$IFn$_invoke$arity$1(options),depth))))?((((cljs.core.not(trigger_symbol)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(trigger_symbol,(function (){var G__52539 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(G__52539) : zprint.zfns.zsexpr.call(null,G__52539));\n})()))))?modify_fn:false):false);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"modify-zloc: zloc\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\"call-fn?\",call_fn_QMARK_], 0));\n} else {\n}\n\nif(cljs.core.truth_(call_fn_QMARK_)){\nvar return$ = (modify_fn.cljs$core$IFn$_invoke$arity$3 ? modify_fn.cljs$core$IFn$_invoke$arity$3(caller,options,zloc) : modify_fn.call(null,caller,options,zloc));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"modify-zloc return:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(return$) : zprint.zfns.zstring.call(null,return$))], 0));\n} else {\n}\n\nreturn return$;\n} else {\nreturn zloc;\n}\n}\n});\n/**\n * Print a list, which might be a list or an anon fn.  \n *   Lots of work to make a list look good, as that is typically code. \n *   Presently all of the callers of this are :list.\n */\nzprint.zprint.fzprint_list_STAR_ = (function zprint$zprint$fzprint_list_STAR_(caller,l_str,r_str,p__52547,ind,zloc){\nvar map__52549 = p__52547;\nvar map__52549__$1 = (((((!((map__52549 == null))))?(((((map__52549.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52549.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52549):map__52549);\nvar options = map__52549__$1;\nvar fn_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52549__$1,new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146));\nvar user_fn_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52549__$1,new cljs.core.Keyword(null,\"user-fn-map\",\"user-fn-map\",-908243227));\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52549__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar fn_style = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52549__$1,new cljs.core.Keyword(null,\"fn-style\",\"fn-style\",1330516917));\nvar no_arg1_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52549__$1,new cljs.core.Keyword(null,\"no-arg1?\",\"no-arg1?\",1560368430));\nvar fn_force_nl = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52549__$1,new cljs.core.Keyword(null,\"fn-force-nl\",\"fn-force-nl\",1501458692));\nvar max_length = zprint.zprint.get_max_length(options);\nvar zloc__$1 = zprint.zprint.modify_zloc(caller,options,zloc);\nvar len = (zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc__$1) : zprint.zfns.zcount.call(null,zloc__$1));\nvar zloc__$2 = (((len > max_length))?(function (){var G__52556 = max_length;\nvar G__52557 = zloc__$1;\nvar G__52558 = new cljs.core.Symbol(null,\"...\",\"...\",-1926939749,null);\nreturn (zprint.zfns.ztake_append.cljs$core$IFn$_invoke$arity$3 ? zprint.zfns.ztake_append.cljs$core$IFn$_invoke$arity$3(G__52556,G__52557,G__52558) : zprint.zfns.ztake_append.call(null,G__52556,G__52557,G__52558));\n})():zloc__$1);\nvar len__$1 = (zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zcount.call(null,zloc__$2));\nvar l_str_len = cljs.core.count(l_str);\nvar arg_1_coll_QMARK_ = cljs.core.not((function (){var or__4185__auto__ = (function (){var G__52561 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zfns.zkeyword_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zkeyword_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52561) : zprint.zfns.zkeyword_QMARK_.call(null,G__52561));\n})();\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nvar G__52562 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsymbol_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52562) : zprint.zfns.zsymbol_QMARK_.call(null,G__52562));\n}\n})());\nvar arg_1_indent_alt_QMARK_ = ((arg_1_coll_QMARK_)?fn_style:false);\nvar fn_str = (((!(arg_1_coll_QMARK_)))?(function (){var G__52564 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__52564) : zprint.zfns.zstring.call(null,G__52564));\n})():null);\nvar fn_style__$1 = (function (){var or__4185__auto__ = fn_style;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nvar or__4185__auto____$1 = (fn_map.cljs$core$IFn$_invoke$arity$1 ? fn_map.cljs$core$IFn$_invoke$arity$1(fn_str) : fn_map.call(null,fn_str));\nif(cljs.core.truth_(or__4185__auto____$1)){\nreturn or__4185__auto____$1;\n} else {\nreturn (user_fn_map.cljs$core$IFn$_invoke$arity$1 ? user_fn_map.cljs$core$IFn$_invoke$arity$1(fn_str) : user_fn_map.call(null,fn_str));\n}\n}\n})();\nvar fn_style__$2 = (cljs.core.truth_(((cljs.core.not(fn_style__$1))?fn_str:false))?(function (){var G__52567 = cljs.core.last(clojure.string.split.cljs$core$IFn$_invoke$arity$2(fn_str,/\\//));\nreturn (fn_map.cljs$core$IFn$_invoke$arity$1 ? fn_map.cljs$core$IFn$_invoke$arity$1(G__52567) : fn_map.call(null,G__52567));\n})():fn_style__$1);\nvar options__$1 = ((cljs.core.vector_QMARK_(fn_style__$2))?zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options,cljs.core.second(fn_style__$2)], 0)):options);\nvar fn_style__$3 = ((cljs.core.vector_QMARK_(fn_style__$2))?cljs.core.first(fn_style__$2):fn_style__$2);\nvar indent = new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125).cljs$core$IFn$_invoke$arity$1((options__$1.cljs$core$IFn$_invoke$arity$1 ? options__$1.cljs$core$IFn$_invoke$arity$1(caller) : options__$1.call(null,caller)));\nvar indent_arg = new cljs.core.Keyword(null,\"indent-arg\",\"indent-arg\",58691874).cljs$core$IFn$_invoke$arity$1((options__$1.cljs$core$IFn$_invoke$arity$1 ? options__$1.cljs$core$IFn$_invoke$arity$1(caller) : options__$1.call(null,caller)));\nvar indent__$1 = (cljs.core.truth_((zprint.zprint.body_set.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.body_set.cljs$core$IFn$_invoke$arity$1(fn_style__$3) : zprint.zprint.body_set.call(null,fn_style__$3)))?indent:(function (){var or__4185__auto__ = indent_arg;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn indent;\n}\n})());\nvar one_line_ok_QMARK_ = zprint.zprint.allow_one_line_QMARK_(options__$1,len__$1,fn_style__$3);\nvar fn_style__$4 = (function (){var or__4185__auto__ = (zprint.zprint.body_map.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.body_map.cljs$core$IFn$_invoke$arity$1(fn_style__$3) : zprint.zprint.body_map.call(null,fn_style__$3));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn fn_style__$3;\n}\n})();\nvar fn_style__$5 = (cljs.core.truth_((function (){var fexpr__52574 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"flow\",\"flow\",590489032),null,new cljs.core.Keyword(null,\"binding\",\"binding\",539932593),null,new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173),null,new cljs.core.Keyword(null,\"flow-body\",\"flow-body\",1355242804),null], null), null);\nreturn (fexpr__52574.cljs$core$IFn$_invoke$arity$1 ? fexpr__52574.cljs$core$IFn$_invoke$arity$1(fn_style__$4) : fexpr__52574.call(null,fn_style__$4));\n})())?fn_style__$4:(((len__$1 < (3)))?null:fn_style__$4));\nvar fn_style__$6 = (cljs.core.truth_(no_arg1_QMARK_)?(function (){var or__4185__auto__ = (zprint.zprint.noarg1_map.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.noarg1_map.cljs$core$IFn$_invoke$arity$1(fn_style__$5) : zprint.zprint.noarg1_map.call(null,fn_style__$5));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn fn_style__$5;\n}\n})():fn_style__$5);\nvar options__$2 = (cljs.core.truth_(no_arg1_QMARK_)?cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(options__$1,new cljs.core.Keyword(null,\"no-arg1?\",\"no-arg1?\",1560368430)):options__$1);\nvar indent_adj = (l_str_len - (1));\nvar default_indent = (cljs.core.truth_((function (){var G__52576 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52576) : zprint.zfns.zlist_QMARK_.call(null,G__52576));\n})())?indent__$1:l_str_len);\nvar arg_1_indent = ((cljs.core.not((function (){var or__4185__auto__ = arg_1_coll_QMARK_;\nif(or__4185__auto__){\nreturn or__4185__auto__;\n} else {\nvar G__52578 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52578) : zprint.zfns.zcomment_QMARK_.call(null,G__52578));\n}\n})()))?((ind + (l_str_len + (1))) + cljs.core.count(fn_str)):null);\nvar arg_1_indent__$1 = (function (){var or__4185__auto__ = arg_1_indent;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nif(cljs.core.truth_(arg_1_indent_alt_QMARK_)){\nreturn (indent__$1 + ind);\n} else {\nreturn null;\n}\n}\n})();\nvar options__$3 = (((!(arg_1_coll_QMARK_)))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$2,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464),fn_str):options__$2);\nvar options__$4 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$3,new cljs.core.Keyword(null,\"pdepth\",\"pdepth\",-1943862342),(cljs.core.long$((function (){var or__4185__auto__ = new cljs.core.Keyword(null,\"pdepth\",\"pdepth\",-1943862342).cljs$core$IFn$_invoke$arity$1(options__$3);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (0);\n}\n})()) + (1)));\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg-hang\",\"dbg-hang\",-1928862076).cljs$core$IFn$_invoke$arity$1(options__$4))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([zprint.zprint.dots(new cljs.core.Keyword(null,\"pdepth\",\"pdepth\",-1943862342).cljs$core$IFn$_invoke$arity$1(options__$4)),\"fzs\",fn_str], 0)):null);\nvar new_ind = (indent__$1 + ind);\nvar one_line_ind = (l_str_len + ind);\nvar options__$5 = (cljs.core.truth_(fn_style__$6)?cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(options__$4,new cljs.core.Keyword(null,\"fn-style\",\"fn-style\",1330516917)):options__$4);\nvar loptions = zprint.zprint.not_rightmost(options__$5);\nvar roptions = options__$5;\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options__$5,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options__$5,(indent__$1 + ind),zloc__$2,r_str);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$5))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$5),\"fzprint-list*:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zstring.call(null,zloc__$2)),\"fn-str\",fn_str,\"fn-style:\",fn_style__$6,\"ind:\",ind,\"indent:\",indent__$1,\"default-indent:\",default_indent,\"one-line-ok?\",one_line_ok_QMARK_,\"arg-1-coll?\",arg_1_coll_QMARK_,\"arg-1-indent:\",arg_1_indent__$1,\"l-str:\",[\"'\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(l_str),\"'\"].join(''),\"indent-adj:\",indent_adj,\"len:\",len__$1,\"one-line?:\",one_line_QMARK_,\"rightcnt:\",new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070).cljs$core$IFn$_invoke$arity$1(options__$5)], 0)):null);\nvar one_line = (((len__$1 === (0)))?new cljs.core.Keyword(null,\"empty\",\"empty\",767870958):((one_line_ok_QMARK_)?zprint.zprint.fzprint_one_line(options__$5,one_line_ind,zloc__$2):null));\nif(cljs.core.truth_(one_line)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(one_line,new cljs.core.Keyword(null,\"empty\",\"empty\",767870958))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,r_str_vec], 0));\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,one_line,r_str_vec], 0));\n}\n} else {\nif(cljs.core.truth_(one_line_QMARK_)){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$5))){\nreturn cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$5),\"fzprint-list*:\",fn_str,\" one-line did not work!!!\"], 0));\n} else {\nreturn null;\n}\n} else {\nif(cljs.core.truth_((cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$5))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$5),\"fzprint-list*: fn-style:\",fn_style__$6], 0)):null))){\nreturn null;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$1,(0))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,r_str_vec], 0));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$1,(1))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){var G__52580 = roptions;\nvar G__52581 = one_line_ind;\nvar G__52582 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52580,G__52581,G__52582) : zprint.zprint.fzprint_STAR_.call(null,G__52580,G__52581,G__52582));\n})(),r_str_vec], 0));\n} else {\nif(cljs.core.truth_(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"binding\",\"binding\",539932593)))?(((len__$1 > (1)))?(function (){var G__52585 = (zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zsecond.call(null,zloc__$2));\nreturn (zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52585) : zprint.zfns.zvector_QMARK_.call(null,G__52585));\n})():false):false))){\nvar vec__52587 = zprint.zprint.fzprint_hang_unless_fail(loptions,arg_1_indent__$1,(indent__$1 + ind),zprint.zprint.fzprint_binding_vec,(zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zsecond.call(null,zloc__$2)));\nvar hang_or_flow = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52587,(0),null);\nvar binding_style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52587,(1),null);\nvar binding_style_vec__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(hang_or_flow,new cljs.core.Keyword(null,\"hang\",\"hang\",-1007256173)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),binding_style_vec], 0)):binding_style_vec);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){var G__52590 = loptions;\nvar G__52591 = (ind + (1));\nvar G__52592 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52590,G__52591,G__52592) : zprint.zprint.fzprint_STAR_.call(null,G__52590,G__52591,G__52592));\n})(),binding_style_vec__$1,(((len__$1 > (2)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$4(options__$5,(indent__$1 + ind),cljs.core.nthnext((zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc__$2) : zprint.zfns.zmap.call(null,cljs.core.identity,zloc__$2)),(2)),new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826)),r_str_vec], 0)):r_str_vec)], 0));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){var G__52595 = loptions;\nvar G__52596 = (ind + (1));\nvar G__52597 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52595,G__52596,G__52597) : zprint.zprint.fzprint_STAR_.call(null,G__52595,G__52596,G__52597));\n})(),zprint.zprint.fzprint_hang(options__$5,new cljs.core.Keyword(null,\"pair-fn\",\"pair-fn\",-360146586),arg_1_indent__$1,(indent__$1 + ind),zprint.zprint.fzprint_pairs,cljs.core.count((function (){var G__52599 = cljs.core.identity;\nvar G__52600 = (zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(zloc__$2,(0)) : zprint.zfns.znthnext.call(null,zloc__$2,(0)));\nreturn (zprint.zfns.zmap_right.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap_right.cljs$core$IFn$_invoke$arity$2(G__52599,G__52600) : zprint.zfns.zmap_right.call(null,G__52599,G__52600));\n})()),(zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(zloc__$2,(0)) : zprint.zfns.znthnext.call(null,zloc__$2,(0)))),r_str_vec], 0));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"extend\",\"extend\",1836484006))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){var G__52602 = loptions;\nvar G__52603 = (ind + (1));\nvar G__52604 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52602,G__52603,G__52604) : zprint.zprint.fzprint_STAR_.call(null,G__52602,G__52603,G__52604));\n})(),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_extend(options__$5,(indent__$1 + ind),(zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(zloc__$2,(0)) : zprint.zfns.znthnext.call(null,zloc__$2,(0)))),r_str_vec], 0));\n} else {\nif(((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204))) && (cljs.core.not((function (){var G__52619 = (zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zsecond.call(null,zloc__$2));\nreturn (zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52619) : zprint.zfns.zlist_QMARK_.call(null,G__52619));\n})())))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-fn\",\"arg2-fn\",1172769072))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-extend\",\"arg2-extend\",1554629186))))){\nvar second_element = zprint.zprint.fzprint_hang_one(caller,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$1,(2)))?options__$5:loptions),arg_1_indent__$1,(indent__$1 + ind),(zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zsecond.call(null,zloc__$2)));\nvar vec__52622 = zprint.zprint.style_lines(loptions,arg_1_indent__$1,second_element);\nvar line_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52622,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52622,(1),null);\nvar third = (zprint.zfns.zthird.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zthird.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zthird.call(null,zloc__$2));\nvar first_three = (cljs.core.truth_(second_element)?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var G__52632 = loptions;\nvar G__52633 = (indent__$1 + ind);\nvar G__52634 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52632,G__52633,G__52634) : zprint.zprint.fzprint_STAR_.call(null,G__52632,G__52633,G__52634));\n})(),second_element,(cljs.core.truth_((function (){var or__4185__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2\",\"arg2\",1729550917));\nif(or__4185__auto__){\nreturn or__4185__auto__;\n} else {\nvar or__4185__auto____$1 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126));\nif(or__4185__auto____$1){\nreturn or__4185__auto____$1;\n} else {\nvar or__4185__auto____$2 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-fn\",\"arg2-fn\",1172769072));\nif(or__4185__auto____$2){\nreturn or__4185__auto____$2;\n} else {\nvar and__4174__auto__ = (zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(third) : zprint.zfns.zvector_QMARK_.call(null,third));\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(line_count,(1));\n} else {\nreturn and__4174__auto__;\n}\n}\n}\n}\n})())?zprint.zprint.fzprint_hang_one(caller,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$1,(3)))?options__$5:loptions),max_width,(indent__$1 + ind),third):zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(function (){var G__52645 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$1,(3)))?options__$5:loptions);\nvar G__52646 = (indent__$1 + ind);\nvar G__52647 = third;\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52645,G__52646,G__52647) : zprint.zprint.fzprint_STAR_.call(null,G__52645,G__52646,G__52647));\n})()], 0)))], 0)):null);\nif(cljs.core.truth_(first_three)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$1,(3))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,first_three,r_str_vec], 0));\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,first_three,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-pair\",\"arg2-pair\",-1268132126)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_pairs(options__$5,(indent__$1 + ind),(zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(zloc__$2,(2)) : zprint.zfns.znthnext.call(null,zloc__$2,(2))))], 0)):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-extend\",\"arg2-extend\",1554629186)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_extend(options__$5,(indent__$1 + ind),(zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(zloc__$2,(2)) : zprint.zfns.znthnext.call(null,zloc__$2,(2))))], 0)):zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6(caller,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg2-fn\",\"arg2-fn\",1172769072)))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$5,new cljs.core.Keyword(null,\"fn-style\",\"fn-style\",1330516917),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)):options__$5),(indent__$1 + ind),(indent__$1 + ind),(zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(zloc__$2,(2)) : zprint.zfns.znthnext.call(null,zloc__$2,(2))),fn_style__$6)\n)),r_str_vec], 0));\n}\n} else {\nreturn null;\n}\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1-mixin\",\"arg1-mixin\",1553512120))) && ((len__$1 > (3))))){\nvar arg_vec_index = (function (){var or__4185__auto__ = (function (){var G__52656 = (function (p1__52545_SHARP_){\nvar or__4185__auto__ = (zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__52545_SHARP_) : zprint.zfns.zvector_QMARK_.call(null,p1__52545_SHARP_));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nif(cljs.core.truth_((zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1(p1__52545_SHARP_) : zprint.zfns.zlist_QMARK_.call(null,p1__52545_SHARP_)))){\nvar G__52659 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(p1__52545_SHARP_) : zprint.zfns.zfirst.call(null,p1__52545_SHARP_));\nreturn (zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52659) : zprint.zfns.zvector_QMARK_.call(null,G__52659));\n} else {\nreturn null;\n}\n}\n});\nvar G__52657 = zloc__$2;\nreturn (zprint.zfns.zfind.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zfind.cljs$core$IFn$_invoke$arity$2(G__52656,G__52657) : zprint.zfns.zfind.call(null,G__52656,G__52657));\n})();\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (0);\n}\n})();\nvar doc_string_QMARK_ = typeof (function (){var G__52661 = (zprint.zfns.zthird.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zthird.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zthird.call(null,zloc__$2));\nreturn (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(G__52661) : zprint.zfns.zsexpr.call(null,G__52661));\n})() === 'string';\nvar mixin_start = ((doc_string_QMARK_)?(4):(3));\nvar mixin_length = (arg_vec_index - mixin_start);\nvar mixins_QMARK_ = (mixin_length > (0));\nvar doc_string = ((doc_string_QMARK_)?zprint.zprint.fzprint_hang_one(caller,loptions,(indent__$1 + ind),(indent__$1 + ind),(zprint.zfns.zthird.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zthird.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zthird.call(null,zloc__$2))):null);\nvar mixins = ((mixins_QMARK_)?(function (){var mixin_sentinal = zprint.zprint.fzprint_hang_one(caller,loptions,(indent__$1 + ind),(indent__$1 + ind),((doc_string_QMARK_)?(zprint.zfns.zfourth.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfourth.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfourth.call(null,zloc__$2)):(zprint.zfns.zthird.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zthird.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zthird.call(null,zloc__$2))));\nvar vec__52662 = zprint.zprint.style_lines(loptions,(indent__$1 + ind),mixin_sentinal);\nvar line_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52662,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52662,(1),null);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([mixin_sentinal,zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$7(caller,loptions,(max_width + (1)),(((indent__$1 + indent__$1) + ind) - (1)),(function (){var G__52669 = zloc__$2;\nvar G__52670 = ((doc_string_QMARK_)?(3):(2));\nreturn (zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(G__52669,G__52670) : zprint.zfns.znthnext.call(null,G__52669,G__52670));\n})(),fn_style__$6,mixin_length)], 0));\n})():null);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){var G__52675 = loptions;\nvar G__52676 = (ind + (1));\nvar G__52677 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52675,G__52676,G__52677) : zprint.zprint.fzprint_STAR_.call(null,G__52675,G__52676,G__52677));\n})(),zprint.zprint.fzprint_hang_one(caller,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$1,(2)))?options__$5:loptions),arg_1_indent__$1,(indent__$1 + ind),(zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zsecond.call(null,zloc__$2))),((((doc_string_QMARK_) && (mixins_QMARK_)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([doc_string,mixins], 0)):((doc_string_QMARK_)?doc_string:((mixins_QMARK_)?mixins:new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null)\n))),zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6(caller,zprint.zprint.noarg1(options__$5,fn_style__$6),(indent__$1 + ind),(indent__$1 + ind),(function (){var G__52682 = zloc__$2;\nvar G__52683 = ((mixins_QMARK_)?(arg_vec_index - (1)):((doc_string_QMARK_)?(2):(1)));\nreturn (zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(G__52682,G__52683) : zprint.zfns.znthnext.call(null,G__52682,G__52683));\n})(),fn_style__$6),r_str_vec], 0));\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1\",\"arg1\",951899358))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1-force-nl\",\"arg1-force-nl\",-945624718))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1->\",\"arg1->\",1319654329))))){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){var G__52684 = loptions;\nvar G__52685 = (ind + (1));\nvar G__52686 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52684,G__52685,G__52686) : zprint.zprint.fzprint_STAR_.call(null,G__52684,G__52685,G__52686));\n})(),zprint.zprint.fzprint_hang_one(caller,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$1,(2)))?options__$5:loptions),arg_1_indent__$1,(indent__$1 + ind),(zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zsecond.call(null,zloc__$2))),(((len__$1 > (2)))?((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1-pair\",\"arg1-pair\",-38672953)))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_pairs(options__$5,(indent__$1 + ind),(zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(zloc__$2,(1)) : zprint.zfns.znthnext.call(null,zloc__$2,(1))))], 0)):zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6(caller,zprint.zprint.noarg1(options__$5,fn_style__$6),(indent__$1 + ind),(indent__$1 + ind),(zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(zloc__$2,(1)) : zprint.zfns.znthnext.call(null,zloc__$2,(1))),fn_style__$6)):null),r_str_vec], 0));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"arg1-extend\",\"arg1-extend\",-157225050))){\nif(cljs.core.truth_((function (){var G__52687 = (zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zsecond.call(null,zloc__$2));\nreturn (zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52687) : zprint.zfns.zvector_QMARK_.call(null,G__52687));\n})())){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){var G__52688 = loptions;\nvar G__52689 = (ind + (1));\nvar G__52690 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52688,G__52689,G__52690) : zprint.zprint.fzprint_STAR_.call(null,G__52688,G__52689,G__52690));\n})(),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),(function (){var G__52691 = loptions;\nvar G__52692 = (ind + (1));\nvar G__52693 = (zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zsecond.call(null,zloc__$2));\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52691,G__52692,G__52693) : zprint.zprint.fzprint_STAR_.call(null,G__52691,G__52692,G__52693));\n})(),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_extend(options__$5,(indent__$1 + ind),(zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(zloc__$2,(1)) : zprint.zfns.znthnext.call(null,zloc__$2,(1)))),r_str_vec], 0));\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){var G__52694 = loptions;\nvar G__52695 = (ind + (1));\nvar G__52696 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52694,G__52695,G__52696) : zprint.zprint.fzprint_STAR_.call(null,G__52694,G__52695,G__52696));\n})(),zprint.zprint.fzprint_hang_one(caller,((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(len__$1,(2)))?options__$5:loptions),arg_1_indent__$1,(indent__$1 + ind),(zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zsecond.call(null,zloc__$2))),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((indent__$1 + ind)))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_extend(options__$5,(indent__$1 + ind),(zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(zloc__$2,(1)) : zprint.zfns.znthnext.call(null,zloc__$2,(1)))),r_str_vec], 0));\n\n}\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){var G__52697 = loptions;\nvar G__52698 = (l_str_len + ind);\nvar G__52699 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc__$2) : zprint.zfns.zfirst.call(null,zloc__$2));\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52697,G__52698,G__52699) : zprint.zprint.fzprint_STAR_.call(null,G__52697,G__52698,G__52699));\n})(),(cljs.core.truth_((function (){var and__4174__auto__ = arg_1_indent__$1;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"flow\",\"flow\",590489032));\n} else {\nreturn and__4174__auto__;\n}\n})())?zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6(caller,zprint.zprint.noarg1(options__$5,fn_style__$6),arg_1_indent__$1,((indent__$1 + ind) + indent_adj),(zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.znthnext.cljs$core$IFn$_invoke$arity$2(zloc__$2,(0)) : zprint.zfns.znthnext.call(null,zloc__$2,(0))),fn_style__$6):(function (){var local_indent = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fn_style__$6,new cljs.core.Keyword(null,\"flow\",\"flow\",590489032)))?(indent__$1 + ind):((default_indent + ind) + indent_adj));\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(local_indent))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$4(zprint.zprint.noarg1(options__$5,fn_style__$6),local_indent,cljs.core.nthnext((zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc__$2) : zprint.zfns.zmap.call(null,cljs.core.identity,zloc__$2)),(1)),new cljs.core.Keyword(null,\"force-nl\",\"force-nl\",-755040826))], 0));\n})()),r_str_vec], 0));\n\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n});\n/**\n * Pretty print and focus style a :list element.\n */\nzprint.zprint.fzprint_list = (function zprint$zprint$fzprint_list(options,ind,zloc){\nreturn zprint.zprint.fzprint_list_STAR_(new cljs.core.Keyword(null,\"list\",\"list\",765357683),\"(\",\")\",zprint.zprint.rightmost(options),ind,zloc);\n});\n/**\n * Pretty print and focus style a fn element.\n */\nzprint.zprint.fzprint_anon_fn = (function zprint$zprint$fzprint_anon_fn(options,ind,zloc){\nreturn zprint.zprint.fzprint_list_STAR_(new cljs.core.Keyword(null,\"list\",\"list\",765357683),\"#(\",\")\",zprint.zprint.rightmost(options),ind,zloc);\n});\n/**\n * Return true if there are any collections in the collection.\n */\nzprint.zprint.any_zcoll_QMARK_ = (function zprint$zprint$any_zcoll_QMARK_(options,ind,zloc){\nvar coll_QMARK__seq = (zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(zprint.zfns.zcoll_QMARK_,zloc) : zprint.zfns.zmap.call(null,zprint.zfns.zcoll_QMARK_,zloc));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__52704_SHARP_,p2__52705_SHARP_){\nvar or__4185__auto__ = p1__52704_SHARP_;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn p2__52705_SHARP_;\n}\n}),null,coll_QMARK__seq);\n});\n/**\n * Given the output from fzprint-seq, which is a style-vec in\n *   the making without spacing, but with extra [] around the elements,\n *   wrap the elements to the right margin.\n */\nzprint.zprint.wrap_zmap = (function zprint$zprint$wrap_zmap(caller,p__52707,ind,coll_print){\nvar map__52710 = p__52707;\nvar map__52710__$1 = (((((!((map__52710 == null))))?(((((map__52710.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52710.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52710):map__52710);\nvar options = map__52710__$1;\nvar map__52711 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52710__$1,caller);\nvar map__52711__$1 = (((((!((map__52711 == null))))?(((((map__52711.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52711.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52711):map__52711);\nvar wrap_after_multi_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52711__$1,new cljs.core.Keyword(null,\"wrap-after-multi?\",\"wrap-after-multi?\",1010808052));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52710__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52710__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar last_index = (cljs.core.count(coll_print) - (1));\nvar rightcnt__$1 = zprint.zprint.fix_rightcnt(rightcnt);\nvar cur_seq = coll_print;\nvar cur_ind = ind;\nvar index = (0);\nvar previous_newline_QMARK_ = false;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(cur_seq)){\nreturn out;\n} else {\nvar next_seq = cljs.core.first(cur_seq);\nif(cljs.core.truth_(next_seq)){\nvar multi_QMARK_ = (cljs.core.count(cljs.core.first(cur_seq)) > (1));\nvar this_seq = cljs.core.first(cur_seq);\nvar _ = zprint.zprint.log_lines(options,\"wrap-zmap:\",ind,this_seq);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"wrap-zmap: ind:\",ind,\"this-seq:\",this_seq], 0)):null);\nvar vec__52736 = zprint.zprint.style_lines(options,ind,this_seq);\nvar linecnt = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52736,(0),null);\nvar max_width = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52736,(1),null);\nvar lines = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52736,(2),null);\nvar last_width = cljs.core.last(lines);\nvar len = (last_width - ind);\nvar len__$1 = (function (){var x__4273__auto__ = (0);\nvar y__4274__auto__ = len;\nreturn ((x__4273__auto__ > y__4274__auto__) ? x__4273__auto__ : y__4274__auto__);\n})();\nvar newline_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(this_seq),(2)),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323));\nvar width__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(index,last_index))?(width - rightcnt__$1):width);\nvar fit_QMARK_ = (((!(newline_QMARK_)))?(function (){var or__4185__auto__ = (index === (0));\nif(or__4185__auto__){\nreturn or__4185__auto__;\n} else {\nif(((multi_QMARK_)?cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(linecnt,(1)):true)){\nreturn ((cur_ind + len__$1) <= width__$1);\n} else {\nreturn false;\n}\n}\n})():false);\nvar new_ind = ((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(this_seq),(2)),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(this_seq),(2)),new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405)))))?(width__$1 + (1)):((((multi_QMARK_) && ((linecnt > (1))) && (cljs.core.not(wrap_after_multi_QMARK_))))?width__$1:((fit_QMARK_)?((cur_ind + len__$1) + (1)):((newline_QMARK_)?ind:((ind + len__$1) + (1))\n))));\nvar G__54569 = cljs.core.next(cur_seq);\nvar G__54570 = new_ind;\nvar G__54571 = (index + (1));\nvar G__54572 = newline_QMARK_;\nvar G__54573 = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(out,((fit_QMARK_)?(((!((index === (0)))))?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),this_seq], 0)):this_seq):((newline_QMARK_)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((new_ind - (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null):((previous_newline_QMARK_)?zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),this_seq], 0)):zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),this_seq], 0))))));\ncur_seq = G__54569;\ncur_ind = G__54570;\nindex = G__54571;\nprevious_newline_QMARK_ = G__54572;\nout = G__54573;\ncontinue;\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * Remove any [_ _ :newline] from the seq.\n */\nzprint.zprint.remove_nl = (function zprint$zprint$remove_nl(coll){\nreturn cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p1__52753_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__52753_SHARP_),(2)),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323));\n}),coll);\n});\n/**\n * Validate an options map that was returned from some internal configuration\n *   expression or configuration.  Either returns the options map or throws\n *   an error.\n */\nzprint.zprint.internal_validate = (function zprint$zprint$internal_validate(options,error_str){\nvar errors = zprint.config.validate_options.cljs$core$IFn$_invoke$arity$1(options);\nvar errors__$1 = (cljs.core.truth_(errors)?[\"Options resulting from \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(error_str),\" had these errors: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(errors)].join(''):null);\nif((!(cljs.core.empty_QMARK_(errors__$1)))){\nthrow (new Error(errors__$1));\n} else {\nreturn options;\n}\n});\n/**\n * Print basic stuff like a vector or a set.  Several options for how to\n *   print them.\n */\nzprint.zprint.fzprint_vec_STAR_ = (function zprint$zprint$fzprint_vec_STAR_(caller,l_str,r_str,p__52764,ind,zloc){\nvar map__52767 = p__52764;\nvar map__52767__$1 = (((((!((map__52767 == null))))?(((((map__52767.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52767.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52767):map__52767);\nvar options = map__52767__$1;\nvar map__52768 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52767__$1,caller);\nvar map__52768__$1 = (((((!((map__52768 == null))))?(((((map__52768.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52768.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52768):map__52768);\nvar wrap_coll_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52768__$1,new cljs.core.Keyword(null,\"wrap-coll?\",\"wrap-coll?\",908181571));\nvar wrap_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52768__$1,new cljs.core.Keyword(null,\"wrap?\",\"wrap?\",-1677427054));\nvar binding_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52768__$1,new cljs.core.Keyword(null,\"binding?\",\"binding?\",-1071925644));\nvar option_fn_first = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52768__$1,new cljs.core.Keyword(null,\"option-fn-first\",\"option-fn-first\",-1679196201));\nvar respect_nl_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52768__$1,new cljs.core.Keyword(null,\"respect-nl?\",\"respect-nl?\",604814635));\nvar sort_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52768__$1,new cljs.core.Keyword(null,\"sort?\",\"sort?\",-567661924));\nvar sort_in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52768__$1,new cljs.core.Keyword(null,\"sort-in-code?\",\"sort-in-code?\",111878497));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52767__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52767__$1,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464));\nif(cljs.core.truth_((function (){var and__4174__auto__ = binding_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640).cljs$core$IFn$_invoke$arity$1(options),(1));\n} else {\nreturn and__4174__auto__;\n}\n})())){\nreturn zprint.zprint.fzprint_binding_vec(options,ind,zloc);\n} else {\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,ind,zloc,r_str);\nvar new_options = (cljs.core.truth_(option_fn_first)?(function (){var first_sexpr = (function (){var G__52777 = (zprint.zfns.zfirst_no_comment.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst_no_comment.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst_no_comment.call(null,zloc));\nreturn (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(G__52777) : zprint.zfns.zsexpr.call(null,G__52777));\n})();\nreturn zprint.zprint.internal_validate((option_fn_first.cljs$core$IFn$_invoke$arity$2 ? option_fn_first.cljs$core$IFn$_invoke$arity$2(options,first_sexpr) : option_fn_first.call(null,options,first_sexpr)),[\":vector :option-fn-first called with \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(first_sexpr)].join(''));\n})():null);\nvar map__52775 = zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options,new_options], 0));\nvar map__52775__$1 = (((((!((map__52775 == null))))?(((((map__52775.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52775.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52775):map__52775);\nvar options__$1 = map__52775__$1;\nvar map__52776 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52775__$1,caller);\nvar map__52776__$1 = (((((!((map__52776 == null))))?(((((map__52776.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52776.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52776):map__52776);\nvar wrap_coll_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52776__$1,new cljs.core.Keyword(null,\"wrap-coll?\",\"wrap-coll?\",908181571));\nvar wrap_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52776__$1,new cljs.core.Keyword(null,\"wrap?\",\"wrap?\",-1677427054));\nvar binding_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52776__$1,new cljs.core.Keyword(null,\"binding?\",\"binding?\",-1071925644));\nvar option_fn_first__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52776__$1,new cljs.core.Keyword(null,\"option-fn-first\",\"option-fn-first\",-1679196201));\nvar respect_nl_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52776__$1,new cljs.core.Keyword(null,\"respect-nl?\",\"respect-nl?\",604814635));\nvar sort_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52776__$1,new cljs.core.Keyword(null,\"sort?\",\"sort?\",-567661924));\nvar sort_in_code_QMARK___$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52776__$1,new cljs.core.Keyword(null,\"sort-in-code?\",\"sort-in-code?\",111878497));\nvar respect_nl_QMARK___$2 = (function (){var and__4174__auto__ = respect_nl_QMARK___$1;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core.not(sort_QMARK___$1);\n} else {\nreturn and__4174__auto__;\n}\n})();\nvar new_ind = (cljs.core.count(l_str) + ind);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-vec*:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\"new-ind:\",new_ind], 0))], 0)):null);\nvar zloc_seq = (cljs.core.truth_(respect_nl_QMARK___$2)?(zprint.zfns.zmap_w_nl.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap_w_nl.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap_w_nl.call(null,cljs.core.identity,zloc)):(zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap.call(null,cljs.core.identity,zloc)));\nvar zloc_seq__$1 = (cljs.core.truth_((function (){var and__4174__auto__ = sort_QMARK___$1;\nif(cljs.core.truth_(and__4174__auto__)){\nif(cljs.core.truth_(in_code_QMARK_)){\nreturn sort_in_code_QMARK___$1;\n} else {\nreturn true;\n}\n} else {\nreturn and__4174__auto__;\n}\n})())?zprint.zprint.order_out(caller,options__$1,cljs.core.identity,zloc_seq):zloc_seq);\nvar coll_print = ((((zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc)) === (0)))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null)], null):zprint.zprint.fzprint_seq(options__$1,new_ind,zloc_seq__$1));\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-vec*: coll-print:\",coll_print], 0))], 0)):null);\nvar coll_print__$1 = ((cljs.core.not(zprint.zprint.contains_nil_QMARK_(coll_print)))?coll_print:null);\nvar one_line = (cljs.core.truth_(coll_print__$1)?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),(cljs.core.truth_(respect_nl_QMARK___$2)?coll_print__$1:zprint.zprint.remove_nl(coll_print__$1)))):null);\nvar ___$2 = zprint.zprint.log_lines(options__$1,\"fzprint-vec*:\",new_ind,one_line);\nvar one_line_lines = zprint.zprint.style_lines(options__$1,new_ind,one_line);\nif(cljs.core.truth_(one_line_lines)){\nif(zprint.zprint.fzfit_one_line(options__$1,one_line_lines)){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,one_line,r_str_vec], 0));\n} else {\nif(cljs.core.truth_((function (){var or__4185__auto__ = ((cljs.core.not(wrap_coll_QMARK___$1))?zprint.zprint.any_zcoll_QMARK_(options__$1,new_ind,zloc):false);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn cljs.core.not(wrap_QMARK___$1);\n}\n})())){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(new_ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),zprint.zprint.remove_nl(coll_print__$1))),r_str_vec], 0));\n} else {\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,(function (){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),\"fzprint-vec*: wrap coll-print:\",coll_print__$1], 0));\n} else {\n}\n\nreturn zprint.zprint.wrap_zmap(caller,options__$1,new_ind,coll_print__$1);\n})()\n,r_str_vec], 0));\n}\n}\n} else {\nreturn null;\n}\n}\n});\nzprint.zprint.fzprint_vec = (function zprint$zprint$fzprint_vec(options,ind,zloc){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"vector\",\"vector\",1902966158),\"[\",\"]\",zprint.zprint.rightmost(options),ind,zloc);\n});\nzprint.zprint.fzprint_array = (function zprint$zprint$fzprint_array(options,ind,zloc){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"array\",\"array\",-2080713842),\"[\",\"]\",zprint.zprint.rightmost(options),ind,zloc);\n});\n/**\n * Pretty print and focus style a :set element.\n */\nzprint.zprint.fzprint_set = (function zprint$zprint$fzprint_set(options,ind,zloc){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"set\",\"set\",304602554),\"#{\",\"}\",zprint.zprint.rightmost(options),ind,zloc);\n});\n/**\n * Do the same as interpose, but different seps depending on pred?.\n */\nzprint.zprint.interpose_either = (function zprint$zprint$interpose_either(sep_true,sep_nil,pred_QMARK_,coll){\nvar coll__$1 = coll;\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nvar interpose_QMARK_ = null;\nwhile(true){\nif(cljs.core.empty_QMARK_(coll__$1)){\nreturn cljs.core.persistent_BANG_(out);\n} else {\nvar G__54699 = cljs.core.next(coll__$1);\nvar G__54700 = (cljs.core.truth_(interpose_QMARK_)?zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,sep_true,cljs.core.first(coll__$1)], 0)):(((cljs.core.count(out) === (0)))?cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(coll__$1)):zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,sep_nil,cljs.core.first(coll__$1)], 0))));\nvar G__54701 = (function (){var G__52804 = cljs.core.first(coll__$1);\nreturn (pred_QMARK_.cljs$core$IFn$_invoke$arity$1 ? pred_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52804) : pred_QMARK_.call(null,G__52804));\n})();\ncoll__$1 = G__54699;\nout = G__54700;\ninterpose_QMARK_ = G__54701;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Do the same as interpose, but different seps depending on pred-fn\n *   return and nl-separator?.\n */\nzprint.zprint.interpose_either_nl_hf = (function zprint$zprint$interpose_either_nl_hf(sep_true,sep_true_nl,sep_nil,sep_nil_nl,p__52807,pred_fn,coll){\nvar map__52812 = p__52807;\nvar map__52812__$1 = (((((!((map__52812 == null))))?(((((map__52812.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52812.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52812):map__52812);\nvar suboptions = map__52812__$1;\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52812__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nvar nl_separator_flow_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52812__$1,new cljs.core.Keyword(null,\"nl-separator-flow?\",\"nl-separator-flow?\",495760215));\nvar coll__$1 = coll;\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nvar interpose_QMARK_ = null;\nvar add_nl_QMARK_ = null;\nwhile(true){\nif(cljs.core.empty_QMARK_(coll__$1)){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,cljs.core.persistent_BANG_(out));\n} else {\nvar vec__52831 = cljs.core.first(coll__$1);\nvar hangflow = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52831,(0),null);\nvar style_vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52831,(1),null);\nvar G__54724 = cljs.core.next(coll__$1);\nvar G__54725 = (cljs.core.truth_(interpose_QMARK_)?zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,(cljs.core.truth_(add_nl_QMARK_)?sep_true_nl:sep_true),style_vec], 0)):(((cljs.core.count(out) === (0)))?cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,style_vec):zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([out,(cljs.core.truth_(add_nl_QMARK_)?sep_nil_nl:sep_nil),style_vec], 0))));\nvar G__54726 = (cljs.core.truth_(pred_fn)?(pred_fn.cljs$core$IFn$_invoke$arity$1 ? pred_fn.cljs$core$IFn$_invoke$arity$1(style_vec) : pred_fn.call(null,style_vec)):null);\nvar G__54727 = (function (){var and__4174__auto__ = nl_separator_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(hangflow,new cljs.core.Keyword(null,\"flow\",\"flow\",590489032));\n} else {\nreturn and__4174__auto__;\n}\n})();\ncoll__$1 = G__54724;\nout = G__54725;\ninterpose_QMARK_ = G__54726;\nadd_nl_QMARK_ = G__54727;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Put a single or double line between pairs returned from fzprint-map-two-up.\n *   The first argument is the map resulting from (:map options) or (:pair options)\n *   or whatever.  It should have :nl-separator? and :nl-separator-flow? in it.\n */\nzprint.zprint.interpose_nl_hf = (function zprint$zprint$interpose_nl_hf(suboptions,ind,coll){\nreturn zprint.zprint.interpose_either_nl_hf(null,null,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\\n\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(ind))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),suboptions,null,coll);\n});\nzprint.zprint.fzprint_map_STAR_ = (function zprint$zprint$fzprint_map_STAR_(caller,l_str,r_str,p__52867,ind,zloc){\nvar map__52872 = p__52867;\nvar map__52872__$1 = (((((!((map__52872 == null))))?(((((map__52872.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52872.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52872):map__52872);\nvar options = map__52872__$1;\nvar map__52873 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52872__$1,caller);\nvar map__52873__$1 = (((((!((map__52873 == null))))?(((((map__52873.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52873.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52873):map__52873);\nvar comma_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52873__$1,new cljs.core.Keyword(null,\"comma?\",\"comma?\",1532168963));\nvar key_ignore = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52873__$1,new cljs.core.Keyword(null,\"key-ignore\",\"key-ignore\",75506668));\nvar key_ignore_silent = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52873__$1,new cljs.core.Keyword(null,\"key-ignore-silent\",\"key-ignore-silent\",-1720115060));\nvar nl_separator_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52873__$1,new cljs.core.Keyword(null,\"nl-separator?\",\"nl-separator?\",-758068767));\nvar force_nl_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52873__$1,new cljs.core.Keyword(null,\"force-nl?\",\"force-nl?\",-1299761462));\nvar lift_ns_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52873__$1,new cljs.core.Keyword(null,\"lift-ns?\",\"lift-ns?\",2021372853));\nvar lift_ns_in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52873__$1,new cljs.core.Keyword(null,\"lift-ns-in-code?\",\"lift-ns-in-code?\",1444279377));\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52872__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar ztype = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52872__$1,new cljs.core.Keyword(null,\"ztype\",\"ztype\",-562179020));\nvar map_depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52872__$1,new cljs.core.Keyword(null,\"map-depth\",\"map-depth\",-191378641));\nvar in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52872__$1,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464));\nvar options__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"map-depth\",\"map-depth\",-191378641),(map_depth + (1)));\nvar zloc__$1 = (cljs.core.truth_(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ztype,new cljs.core.Keyword(null,\"sexpr\",\"sexpr\",-783344087)))?(function (){var or__4185__auto__ = key_ignore;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn key_ignore_silent;\n}\n})():false))?zprint.zprint.map_ignore(caller,options__$1,zloc):zloc);\nvar vec__52887 = zprint.zprint.partition_all_2_nc(zprint.zprint.no_max_length(options__$1),(zprint.zfns.zseqnws.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zseqnws.cljs$core$IFn$_invoke$arity$1(zloc__$1) : zprint.zfns.zseqnws.call(null,zloc__$1)));\nvar no_sort_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52887,(0),null);\nvar pair_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52887,(1),null);\nvar vec__52890 = (cljs.core.truth_((function (){var and__4174__auto__ = lift_ns_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nif(cljs.core.truth_(in_code_QMARK_)){\nreturn lift_ns_in_code_QMARK_;\n} else {\nreturn true;\n}\n} else {\nreturn and__4174__auto__;\n}\n})())?(zprint.zfns.zlift_ns.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zlift_ns.cljs$core$IFn$_invoke$arity$1(pair_seq) : zprint.zfns.zlift_ns.call(null,pair_seq)):null);\nvar ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52890,(0),null);\nvar lift_pair_seq = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52890,(1),null);\nvar l_str__$1 = (cljs.core.truth_(ns)?[\"#:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns),cljs.core.str.cljs$core$IFn$_invoke$arity$1(l_str)].join(''):l_str);\nvar pair_seq__$1 = (function (){var or__4185__auto__ = lift_pair_seq;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn pair_seq;\n}\n})();\nvar pair_seq__$2 = (cljs.core.truth_(no_sort_QMARK_)?pair_seq__$1:zprint.zprint.order_out(caller,options__$1,cljs.core.first,pair_seq__$1));\nvar max_length = zprint.zprint.get_max_length(options__$1);\nvar pair_count = cljs.core.count(pair_seq__$2);\nvar pair_seq__$3 = (((pair_count > max_length))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.take.cljs$core$IFn$_invoke$arity$2(max_length,pair_seq__$2),(new cljs.core.List(null,(new cljs.core.List(null,(zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0 ? zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0() : zprint.zfns.zdotdotdot.call(null)),null,(1),null)),null,(1),null))):pair_seq__$2);\nvar indent = cljs.core.count(l_str__$1);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str__$1,zprint.zprint.zcolor_map(options__$1,l_str__$1),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options__$1,(indent + ind),zloc__$1,r_str);\nif(cljs.core.empty_QMARK_(pair_seq__$3)){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,r_str_vec], 0));\n} else {\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),\"fzprint-map*:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc__$1) : zprint.zfns.zstring.call(null,zloc__$1)),\"ind:\",ind,\"comma?\",comma_QMARK_,\"rightcnt:\",new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070).cljs$core$IFn$_invoke$arity$1(options__$1)], 0)):null);\nvar pair_print_one_line = zprint.zprint.fzprint_map_two_up(caller,(cljs.core.truth_(one_line_QMARK_)?options__$1:cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111),true)),(indent + ind),comma_QMARK_,pair_seq__$3);\nvar pair_print_one_line__$1 = zprint.zprint.remove_hangflow(pair_print_one_line);\nvar pair_print_one_line__$2 = ((zprint.zprint.fzfit_one_line(options__$1,zprint.zprint.style_lines(options__$1,(indent + ind),pair_print_one_line__$1)))?pair_print_one_line__$1:null);\nvar one_line = (cljs.core.truth_(pair_print_one_line__$2)?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(zprint.zprint.concat_no_nil,zprint.zprint.interpose_either(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\", \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\" \",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null),cljs.core.constantly(comma_QMARK_),pair_print_one_line__$2)):null);\nvar one_line_lines = zprint.zprint.style_lines(options__$1,(indent + ind),one_line);\nvar one_line__$1 = ((zprint.zprint.fzfit_one_line(options__$1,one_line_lines))?one_line:null);\nif(cljs.core.truth_(one_line__$1)){\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,one_line__$1,r_str_vec], 0));\n} else {\nif(cljs.core.not(one_line_QMARK_)){\nvar pair_print = zprint.zprint.fzprint_map_two_up(caller,options__$1,(indent + ind),comma_QMARK_,pair_seq__$3);\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,zprint.zprint.interpose_either_nl_hf(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\",\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((ind + (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\",\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\\n\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((ind + (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((ind + (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((ind + (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks((ind + (1))))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461).cljs$core$IFn$_invoke$arity$1(options__$1),(function (p1__52862_SHARP_){\nvar and__4174__auto__ = comma_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__52862_SHARP_),(2)),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__52862_SHARP_),(2)),new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405))));\n} else {\nreturn and__4174__auto__;\n}\n}),pair_print),r_str_vec], 0));\n} else {\nreturn null;\n}\n}\n}\n});\n/**\n * Format a real map. ONLY WORKES ON STRUCTURES AT PRESENT\n */\nzprint.zprint.fzprint_map = (function zprint$zprint$fzprint_map(options,ind,zloc){\nvar vec__52917 = null;\nvar ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52917,(0),null);\nvar lifted_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__52917,(1),null);\nif(cljs.core.truth_(ns)){\nreturn zprint.zprint.fzprint_map_STAR_(new cljs.core.Keyword(null,\"map\",\"map\",1371690461),[\"#:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns),\"{\"].join(''),\"}\",zprint.zprint.rightmost(options),ind,lifted_map);\n} else {\nreturn zprint.zprint.fzprint_map_STAR_(new cljs.core.Keyword(null,\"map\",\"map\",1371690461),\"{\",\"}\",zprint.zprint.rightmost(options),ind,zloc);\n}\n});\n/**\n * Return true if the string starts with #object[\n */\nzprint.zprint.object_str_QMARK_ = (function zprint$zprint$object_str_QMARK_(s){\nreturn cljs.core.re_find(/^#object\\[/,s);\n});\n/**\n * Print something that looks like #object[...] in a way\n *   that will acknowledge the structure inside of the [...]\n */\nzprint.zprint.fzprint_object = (function zprint$zprint$fzprint_object(var_args){\nvar G__52924 = arguments.length;\nswitch (G__52924) {\ncase 4:\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ncase 3:\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$4 = (function (options,ind,zloc,zloc_value){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"object\",\"object\",1474613949),\"#object[\",\"]\",options,ind,(zprint.zfns.zobj_to_vec.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zobj_to_vec.cljs$core$IFn$_invoke$arity$2(zloc,zloc_value) : zprint.zfns.zobj_to_vec.call(null,zloc,zloc_value)));\n}));\n\n(zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$3 = (function (options,ind,zloc){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"object\",\"object\",1474613949),\"#object[\",\"]\",options,ind,(zprint.zfns.zobj_to_vec.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zobj_to_vec.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zobj_to_vec.call(null,zloc)));\n}));\n\n(zprint.zprint.fzprint_object.cljs$lang$maxFixedArity = 4);\n\n/**\n * Find the hash-code identity for an object.\n */\nzprint.zprint.hash_identity_str = (function zprint$zprint$hash_identity_str(obj){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.hash(obj));\n});\nzprint.zprint.fzprint_atom = (function zprint$zprint$fzprint_atom(p__52929,ind,zloc){\nvar map__52930 = p__52929;\nvar map__52930__$1 = (((((!((map__52930 == null))))?(((((map__52930.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52930.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52930):map__52930);\nvar options = map__52930__$1;\nvar map__52931 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52930__$1,new cljs.core.Keyword(null,\"atom\",\"atom\",-397043653));\nvar map__52931__$1 = (((((!((map__52931 == null))))?(((((map__52931.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52931.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52931):map__52931);\nvar object_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52931__$1,new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217));\nif(cljs.core.truth_((function (){var and__4174__auto__ = object_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn zprint.zprint.object_str_QMARK_((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)));\n} else {\nreturn and__4174__auto__;\n}\n})())){\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$4(options,ind,zloc,(zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zderef.call(null,zloc)));\n} else {\nvar l_str = \"#<\";\nvar r_str = \">\";\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,(indent + ind),zloc,r_str);\nvar arg_1 = [\"Atom@\",zprint.zprint.hash_identity_str(zloc)].join('');\nvar arg_1_indent = (((ind + indent) + (1)) + ((arg_1).length));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-atom: arg-1:\",arg_1,\"zstring arg-1:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),zprint.zprint.fzprint_hang_one(new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881),zprint.zprint.rightmost(options),arg_1_indent,(indent + ind),(zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zderef.call(null,zloc))),r_str_vec], 0));\n}\n});\n/**\n * Print out a future or a promise or a delay.  These can only be \n *   sexpressions, since they don't exist in a textual representation \n *   of code (or data for that matter).  That means that we can use \n *   regular sexpression operations on zloc.\n */\nzprint.zprint.fzprint_future_promise_delay_agent = (function zprint$zprint$fzprint_future_promise_delay_agent(options,ind,zloc){\nvar zloc_type = (cljs.core.truth_((zprint.zfns.zfuture_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfuture_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfuture_QMARK_.call(null,zloc)))?new cljs.core.Keyword(null,\"future\",\"future\",1877842724):(cljs.core.truth_((zprint.zfns.zpromise_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zpromise_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zpromise_QMARK_.call(null,zloc)))?new cljs.core.Keyword(null,\"promise\",\"promise\",1767129287):(cljs.core.truth_((zprint.zfns.zdelay_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zdelay_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zdelay_QMARK_.call(null,zloc)))?new cljs.core.Keyword(null,\"delay\",\"delay\",-574225219):(cljs.core.truth_((zprint.zfns.zagent_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zagent_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zagent_QMARK_.call(null,zloc)))?new cljs.core.Keyword(null,\"agent\",\"agent\",-766455027):(function(){throw (new Error(\"Not a future, promise, or delay:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))))})()\n))));\nif(cljs.core.truth_((function (){var and__4174__auto__ = new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217).cljs$core$IFn$_invoke$arity$1((options.cljs$core$IFn$_invoke$arity$1 ? options.cljs$core$IFn$_invoke$arity$1(zloc_type) : options.call(null,zloc_type)));\nif(cljs.core.truth_(and__4174__auto__)){\nreturn zprint.zprint.object_str_QMARK_((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)));\n} else {\nreturn and__4174__auto__;\n}\n})())){\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zloc_type,new cljs.core.Keyword(null,\"agent\",\"agent\",-766455027))) || (cljs.core.realized_QMARK_(zloc)))){\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$4(options,ind,zloc,(zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zderef.call(null,zloc)));\n} else {\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$3(options,ind,zloc);\n}\n} else {\nvar l_str = \"#<\";\nvar r_str = \">\";\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,(indent + ind),zloc,r_str);\nvar type_str = (function (){var G__52947 = zloc_type;\nvar G__52947__$1 = (((G__52947 instanceof cljs.core.Keyword))?G__52947.fqn:null);\nswitch (G__52947__$1) {\ncase \"future\":\nreturn \"Future@\";\n\nbreak;\ncase \"promise\":\nreturn \"Promise@\";\n\nbreak;\ncase \"delay\":\nreturn \"Delay@\";\n\nbreak;\ncase \"agent\":\nreturn \"Agent@\";\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__52947__$1)].join('')));\n\n}\n})();\nvar arg_1 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(type_str),zprint.zprint.hash_identity_str(zloc)].join('');\nvar arg_1_indent = (((ind + indent) + (1)) + ((arg_1).length));\nvar zloc_realized_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zloc_type,new cljs.core.Keyword(null,\"agent\",\"agent\",-766455027)))?true:cljs.core.realized_QMARK_(zloc));\nvar value = ((zloc_realized_QMARK_)?(zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zderef.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zderef.call(null,zloc)):(function (){var G__52948 = zloc_type;\nvar G__52948__$1 = (((G__52948 instanceof cljs.core.Keyword))?G__52948.fqn:null);\nswitch (G__52948__$1) {\ncase \"future\":\nreturn \"pending\";\n\nbreak;\ncase \"promise\":\nreturn \"not-delivered\";\n\nbreak;\ncase \"delay\":\nreturn \"pending\";\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__52948__$1)].join('')));\n\n}\n})());\nvar options__$1 = ((zloc_realized_QMARK_)?options:cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"string-str?\",\"string-str?\",2059147352),true));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$1))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$1),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-fpda: arg-1:\",arg_1,\"zstring arg-1:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1,zprint.zprint.zcolor_map(options__$1,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),zprint.zprint.fzprint_hang_one(new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881),zprint.zprint.rightmost(options__$1),arg_1_indent,(indent + ind),value),r_str_vec], 0));\n}\n});\n/**\n * Print a function object, what you get when you put a function in\n *   a collection, for instance.  This doesn't do macros, you will notice.\n *   It also can't be invoked when zloc is a zipper.\n */\nzprint.zprint.fzprint_fn_obj = (function zprint$zprint$fzprint_fn_obj(p__52949,ind,zloc){\nvar map__52950 = p__52949;\nvar map__52950__$1 = (((((!((map__52950 == null))))?(((((map__52950.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52950.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52950):map__52950);\nvar options = map__52950__$1;\nvar map__52951 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52950__$1,new cljs.core.Keyword(null,\"fn-obj\",\"fn-obj\",465065936));\nvar map__52951__$1 = (((((!((map__52951 == null))))?(((((map__52951.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52951.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52951):map__52951);\nvar object_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52951__$1,new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217));\nif(cljs.core.truth_((function (){var and__4174__auto__ = object_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn zprint.zprint.object_str_QMARK_((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)));\n} else {\nreturn and__4174__auto__;\n}\n})())){\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$3(options,ind,zloc);\n} else {\nvar l_str = \"#<\";\nvar r_str = \">\";\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$5(options,(indent + ind),zloc,r_str,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204));\nvar arg_1_left = \"Fn@\";\nvar arg_1_right = zprint.zprint.hash_identity_str(zloc);\nvar arg_1_indent = ((((ind + indent) + (1)) + ((arg_1_left).length)) + ((arg_1_right).length));\nvar class_str = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.type(zloc)], 0));\nvar name_js = cljs.core.str.cljs$core$IFn$_invoke$arity$1(zloc.name);\nvar color = (cljs.core.truth_((function (){var or__4185__auto__ = cljs.core.re_find(/^clojure/,name_js);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn cljs.core.re_find(/^cljs/,name_js);\n}\n})())?zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)):new cljs.core.Keyword(null,\"none\",\"none\",1333468478));\nvar name_split = clojure.string.split.cljs$core$IFn$_invoke$arity$2(name_js,/\\$/);\nvar arg_2 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\".\",cljs.core.butlast(name_split)))),\"/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last(name_split))].join('');\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-fn-obj: arg-1:\",arg_1_left,arg_1_right,\"zstring arg-1:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1_left,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1_right,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),zprint.zprint.fzprint_hang_one(new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881),zprint.zprint.rightmost(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(options,new cljs.core.Keyword(null,\"string-str?\",\"string-str?\",2059147352),true,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"string-color\",\"string-color\",-1853875244),color], 0))),arg_1_indent,(indent + ind),arg_2),r_str_vec], 0));\n}\n});\nzprint.zprint.fzprint_ns = (function zprint$zprint$fzprint_ns(options,ind,zloc){\nvar l_str = \"#<\";\nvar r_str = \">\";\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,(indent + ind),zloc,r_str);\nvar arg_1 = \"Namespace\";\nvar arg_1_indent = (((ind + indent) + (1)) + ((arg_1).length));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-atom: arg-1:\",arg_1,\"zstring arg-1:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),zprint.zprint.fzprint_hang_one(new cljs.core.Keyword(null,\"unknown\",\"unknown\",-935977881),zprint.zprint.rightmost(options),arg_1_indent,(indent + ind),cljs.core.ns_name(zloc)),r_str_vec], 0));\n});\n/**\n * Given an options map, decrement the :depth value and return the result.\n */\nzprint.zprint.dec_depth = (function zprint$zprint$dec_depth(options){\nif(cljs.core.truth_(options)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640),((function (){var or__4185__auto__ = new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (1);\n}\n})() - (1)));\n} else {\nreturn null;\n}\n});\nzprint.zprint.fzprint_record = (function zprint$zprint$fzprint_record(p__52957,ind,zloc){\nvar map__52958 = p__52957;\nvar map__52958__$1 = (((((!((map__52958 == null))))?(((((map__52958.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52958.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52958):map__52958);\nvar options = map__52958__$1;\nvar map__52959 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52958__$1,new cljs.core.Keyword(null,\"record\",\"record\",-779106859));\nvar map__52959__$1 = (((((!((map__52959 == null))))?(((((map__52959.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__52959.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__52959):map__52959);\nvar record_type_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52959__$1,new cljs.core.Keyword(null,\"record-type?\",\"record-type?\",-1195765660));\nvar to_string_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__52959__$1,new cljs.core.Keyword(null,\"to-string?\",\"to-string?\",1452120886));\nif(cljs.core.truth_(to_string_QMARK_)){\nvar G__52962 = options;\nvar G__52963 = ind;\nvar G__52964 = zloc.toString();\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52962,G__52963,G__52964) : zprint.zprint.fzprint_STAR_.call(null,G__52962,G__52963,G__52964));\n} else {\nif(cljs.core.not(record_type_QMARK_)){\nvar G__52967 = options;\nvar G__52968 = ind;\nvar G__52969 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,zloc);\nreturn (zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3 ? zprint.zprint.fzprint_STAR_.cljs$core$IFn$_invoke$arity$3(G__52967,G__52968,G__52969) : zprint.zprint.fzprint_STAR_.call(null,G__52967,G__52968,G__52969));\n} else {\nvar l_str = \"#\";\nvar r_str = \"\";\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,(indent + ind),zloc,r_str);\nvar arg_1 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.type(zloc)], 0));\nvar arg_1__$1 = (function (){var tokens = clojure.string.split.cljs$core$IFn$_invoke$arity$2(arg_1,/\\./);\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(\".\",cljs.core.butlast(tokens))),\"/\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.last(tokens)], 0)));\n})();\nvar arg_1_indent = (((ind + indent) + (1)) + cljs.core.count(arg_1__$1));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-record: arg-1:\",arg_1__$1,\"zstring zloc:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [arg_1__$1,zprint.zprint.zcolor_map(options,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),zprint.zprint.fzprint_hang_one(new cljs.core.Keyword(null,\"record\",\"record\",-779106859),zprint.zprint.dec_depth(options),arg_1_indent,(indent + ind),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,zloc)),r_str_vec], 0));\n}\n}\n});\n/**\n * Print the two items in a meta node.  Different because it doesn't print\n *   a single collection, so it doesn't do any indent or rightmost.  It also\n *   uses a different approach to calling fzprint-flow-seq with the\n *   results zmap, so that it prints all of the seq, not just the rightmost.\n */\nzprint.zprint.fzprint_meta = (function zprint$zprint$fzprint_meta(options,ind,zloc){\nvar l_str = \"^\";\nvar r_str = \"\";\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,ind,zloc,r_str);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-meta: zloc:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$3(options,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,(((l_str).length) + ind),cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(((zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc)) - (1)),ind)),(zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap.call(null,cljs.core.identity,zloc))),r_str_vec], 0));\n});\n/**\n * Print a reader-macro, often a reader-conditional. Adapted for differences\n *   in parsing #?@ between rewrite-clj and rewrite-cljs.  Also adapted for\n *   the rewrite-clj not parsing namespaced maps in the version presently\n *   used.\n */\nzprint.zprint.fzprint_reader_macro = (function zprint$zprint$fzprint_reader_macro(options,ind,zloc){\nvar zstr = (function (){var G__52978 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__52978) : zprint.zfns.zstring.call(null,G__52978));\n})();\nvar alt_at_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(zstr),(2))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(zstr,(1),(2)),\"@\")));\nvar reader_cond_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(zstr,(0),(1)),\"?\");\nvar namespaced_QMARK_ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(zstr,(0),(1)),\":\");\nvar at_QMARK_ = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((function (){var G__52980 = (zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsecond.call(null,zloc));\nreturn (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(G__52980) : zprint.zfns.ztag.call(null,G__52980));\n})(),new cljs.core.Keyword(null,\"deref\",\"deref\",-145586795))) || (alt_at_QMARK_));\nvar l_str = ((((reader_cond_QMARK_) && (at_QMARK_)))?\"#?@\":(cljs.core.truth_(((reader_cond_QMARK_)?(function (){var G__52982 = (zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsecond.call(null,zloc));\nreturn (zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1(G__52982) : zprint.zfns.zcoll_QMARK_.call(null,G__52982));\n})():false))?\"#?\":((reader_cond_QMARK_)?(function(){throw (new Error([\"Unknown reader macro: '\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))),\"' zfirst zloc: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var G__52986 = (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfirst.call(null,zloc));\nreturn (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(G__52986) : zprint.zfns.zstring.call(null,G__52986));\n})())].join('')))})():((namespaced_QMARK_)?[\"#\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zstr)].join(''):\"#\"\n))));\nvar r_str = \"\";\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg-bug?\",\"dbg-bug?\",-315779526).cljs$core$IFn$_invoke$arity$1(options))?null:null);\nvar indent = ((l_str).length);\nvar l_str_vec = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_str,zprint.zprint.zcolor_map(options,l_str),new cljs.core.Keyword(null,\"left\",\"left\",-399115937)], null)], null);\nvar r_str_vec = zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4(options,(indent + ind),zloc,r_str);\nvar floc = ((((at_QMARK_) && ((!(alt_at_QMARK_)))))?(function (){var G__52987 = (zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsecond.call(null,zloc));\nreturn (zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfirst.cljs$core$IFn$_invoke$arity$1(G__52987) : zprint.zfns.zfirst.call(null,G__52987));\n})():(zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsecond.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsecond.call(null,zloc)));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint-reader-macro: zloc:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc)),\"floc:\",(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(floc) : zprint.zfns.zstring.call(null,floc)),\"l-str:\",l_str], 0))], 0));\n} else {\n}\n\nreturn zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([l_str_vec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null),((reader_cond_QMARK_)?zprint.zprint.fzprint_map_STAR_(new cljs.core.Keyword(null,\"reader-cond\",\"reader-cond\",-2133265058),\"(\",\")\",zprint.zprint.rightmost(options),(indent + ind),floc):zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$3(options,(indent + ind),(function (){var zloc_seq = (zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2 ? zprint.zfns.zmap.cljs$core$IFn$_invoke$arity$2(cljs.core.identity,zloc) : zprint.zfns.zmap.call(null,cljs.core.identity,zloc));\nif(namespaced_QMARK_){\nreturn cljs.core.next(zloc_seq);\n} else {\nreturn zloc_seq;\n}\n})())),r_str_vec], 0));\n});\nzprint.zprint.prefix_tags = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"quote\",\"quote\",-262615245),\"'\",new cljs.core.Keyword(null,\"syntax-quote\",\"syntax-quote\",-1233164847),\"`\",new cljs.core.Keyword(null,\"unquote\",\"unquote\",1649741032),\"~\",new cljs.core.Keyword(null,\"unquote-splicing\",\"unquote-splicing\",1295267556),\"~@\",new cljs.core.Keyword(null,\"deref\",\"deref\",-145586795),\"@\",new cljs.core.Keyword(null,\"var\",\"var\",-769682797),\"#'\",new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707),\"#_\"], null);\n/**\n * Change options as necessary based on prefix tag.\n */\nzprint.zprint.prefix_options = (function zprint$zprint$prefix_options(options,prefix_tag){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prefix_tag,new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"uneval\",\"uneval\",1932037707).cljs$core$IFn$_invoke$arity$1(options)));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prefix_tag,new cljs.core.Keyword(null,\"syntax-quote\",\"syntax-quote\",-1233164847))){\nreturn cljs.core.assoc_in(cljs.core.assoc_in(options,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),new cljs.core.Keyword(null,\"paren\",\"paren\",-294107600)], null),new cljs.core.Keyword(null,\"syntax-quote-paren\",\"syntax-quote-paren\",646342677).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684).cljs$core$IFn$_invoke$arity$1(options))),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684),new cljs.core.Keyword(null,\"hash-paren\",\"hash-paren\",-1158425562)], null),new cljs.core.Keyword(null,\"syntax-quote-paren\",\"syntax-quote-paren\",646342677).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"color-map\",\"color-map\",-207789684).cljs$core$IFn$_invoke$arity$1(options)));\n} else {\nreturn options;\n\n}\n}\n});\n/**\n * The pretty print part of fzprint.\n */\nzprint.zprint.fzprint_STAR_ = (function zprint$zprint$fzprint_STAR_(p__53008,indent,zloc){\nvar map__53009 = p__53008;\nvar map__53009__$1 = (((((!((map__53009 == null))))?(((((map__53009.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__53009.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__53009):map__53009);\nvar options = map__53009__$1;\nvar max_depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"max-depth\",\"max-depth\",127060793));\nvar fn_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"fn-map\",\"fn-map\",565481146));\nvar shift_seq = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"shift-seq\",\"shift-seq\",267527195));\nvar max_hang_count = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"max-hang-count\",\"max-hang-count\",637294812));\nvar in_code_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"in-code?\",\"in-code?\",194866464));\nvar max_hang_depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"max-hang-depth\",\"max-hang-depth\",-915232220));\nvar in_hang_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"in-hang?\",\"in-hang?\",-1065695639));\nvar rightcnt = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"rightcnt\",\"rightcnt\",-45750070));\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar hex_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"hex?\",\"hex?\",890937870));\nvar dbg_print_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"dbg-print?\",\"dbg-print?\",-660113872));\nvar dbg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771));\nvar string_color = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"string-color\",\"string-color\",-1853875244));\nvar trim_comments_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"trim-comments?\",\"trim-comments?\",-1532658667));\nvar max_hang_span = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"max-hang-span\",\"max-hang-span\",256100693));\nvar one_line_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"one-line?\",\"one-line?\",2055953111));\nvar depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640));\nvar string_str_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53009__$1,new cljs.core.Keyword(null,\"string-str?\",\"string-str?\",2059147352));\nvar avail = (width - indent);\nvar options__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640),(depth + (1)));\nvar options__$2 = (cljs.core.truth_((function (){var or__4185__auto__ = dbg_QMARK_;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn dbg_print_QMARK_;\n}\n})())?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$1,new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$3(options__$1,new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778),\"\")),(cljs.core.truth_(one_line_QMARK_)?\"o\":(cljs.core.truth_(in_hang_QMARK_)?\"h\":\".\"\n))].join('')):options__$1);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$2))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$2),\"fzprint* **** rightcnt:\",rightcnt,\"depth:\",depth,cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))], 0))], 0)):null);\nvar dbg_data = cljs.core.deref(zprint.zprint.fzprint_dbg);\nvar dbg_focus_QMARK_ = (function (){var and__4174__auto__ = dbg_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(dbg_data,cljs.core.second((zprint.zfns.zfind_path.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfind_path.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfind_path.call(null,zloc))));\n} else {\nreturn and__4174__auto__;\n}\n})();\nvar options__$3 = (cljs.core.truth_(dbg_focus_QMARK_)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options__$2,new cljs.core.Keyword(null,\"dbg\",\"dbg\",202767554),new cljs.core.Keyword(null,\"on\",\"on\",173873944)):options__$2);\nvar ___$1 = (cljs.core.truth_(dbg_focus_QMARK_)?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"fzprint dbg-data:\",dbg_data], 0)):null);\nif(cljs.core.truth_((function (){var and__4174__auto__ = (zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcoll_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcoll_QMARK_.call(null,zloc));\nif(cljs.core.truth_(and__4174__auto__)){\nreturn (((depth >= max_depth)) || ((zprint.zprint.get_max_length(options__$3) === (0))));\n} else {\nreturn and__4174__auto__;\n}\n})())){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(zloc,(zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0 ? zprint.zfns.zdotdotdot.cljs$core$IFn$_invoke$arity$0() : zprint.zfns.zdotdotdot.call(null)))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"...\",zprint.zprint.zcolor_map(options__$3,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"max-depth-string\",\"max-depth-string\",-474325435).cljs$core$IFn$_invoke$arity$1(options__$3),zprint.zprint.zcolor_map(options__$3,new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n}\n} else {\nif(cljs.core.truth_((function (){var and__4174__auto__ = in_hang_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn ((cljs.core.not(in_code_QMARK_)) && (((((depth - in_hang_QMARK_) > max_hang_span)) || (((cljs.core.not(one_line_QMARK_)) && (((zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcount.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcount.call(null,zloc)) > max_hang_count)) && ((depth > max_hang_depth)))))));\n} else {\nreturn and__4174__auto__;\n}\n})())){\nreturn null;\n} else {\nif(cljs.core.truth_((zprint.zfns.zrecord_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zrecord_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zrecord_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_record(options__$3,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zlist_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zlist_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_list(options__$3,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zvector_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zvector_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_vec(options__$3,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zmap_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zmap_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zmap_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_map(options__$3,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zset_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zset_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zset_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_set(options__$3,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zanonfn_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zanonfn_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zanonfn_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_anon_fn(options__$3,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zfn_obj_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfn_obj_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfn_obj_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_fn_obj(options__$3,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zarray_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zarray_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zarray_QMARK_.call(null,zloc)))){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"object?\",\"object?\",-1313059217).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"array\",\"array\",-2080713842).cljs$core$IFn$_invoke$arity$1(options__$3)))){\nreturn zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$3(options__$3,indent,zloc);\n} else {\nreturn zprint.zprint.fzprint_array(options__$3,indent,(zprint.zfns.zexpandarray.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zexpandarray.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zexpandarray.call(null,zloc)));\n}\n} else {\nif(cljs.core.truth_((zprint.zfns.zatom_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zatom_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zatom_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_atom(options__$3,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zmeta_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zmeta_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zmeta_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_meta(options__$3,indent,zloc);\n} else {\nif(cljs.core.truth_((function (){var G__53034 = (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.ztag.call(null,zloc));\nreturn (zprint.zprint.prefix_tags.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.prefix_tags.cljs$core$IFn$_invoke$arity$1(G__53034) : zprint.zprint.prefix_tags.call(null,G__53034));\n})())){\nreturn zprint.zprint.fzprint_vec_STAR_(new cljs.core.Keyword(null,\"none\",\"none\",1333468478),(function (){var G__53035 = (zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.ztag.call(null,zloc));\nreturn (zprint.zprint.prefix_tags.cljs$core$IFn$_invoke$arity$1 ? zprint.zprint.prefix_tags.cljs$core$IFn$_invoke$arity$1(G__53035) : zprint.zprint.prefix_tags.call(null,G__53035));\n})(),\"\",zprint.zprint.prefix_options(options__$3,(zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.ztag.call(null,zloc))),indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zns_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zns_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zns_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_ns(options__$3,indent,zloc);\n} else {\nif(cljs.core.truth_((function (){var or__4185__auto__ = (zprint.zfns.zpromise_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zpromise_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zpromise_QMARK_.call(null,zloc));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nvar or__4185__auto____$1 = (zprint.zfns.zfuture_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zfuture_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zfuture_QMARK_.call(null,zloc));\nif(cljs.core.truth_(or__4185__auto____$1)){\nreturn or__4185__auto____$1;\n} else {\nvar or__4185__auto____$2 = (zprint.zfns.zdelay_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zdelay_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zdelay_QMARK_.call(null,zloc));\nif(cljs.core.truth_(or__4185__auto____$2)){\nreturn or__4185__auto____$2;\n} else {\nreturn (zprint.zfns.zagent_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zagent_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zagent_QMARK_.call(null,zloc));\n}\n}\n}\n})())){\nreturn zprint.zprint.fzprint_future_promise_delay_agent(options__$3,indent,zloc);\n} else {\nif(cljs.core.truth_((zprint.zfns.zreader_macro_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zreader_macro_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zreader_macro_QMARK_.call(null,zloc)))){\nreturn zprint.zprint.fzprint_reader_macro(options__$3,indent,zloc);\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.ztag.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.ztag.call(null,zloc)),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323))) && ((depth > (0))))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\\n\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323)], null)], null);\n} else {\nvar zstr = (zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc));\nvar overflow_in_hang_QMARK_ = (function (){var and__4174__auto__ = in_hang_QMARK_;\nif(cljs.core.truth_(and__4174__auto__)){\nreturn (((cljs.core.count(zstr) + indent) + (function (){var or__4185__auto__ = rightcnt;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (0);\n}\n})()) > width);\n} else {\nreturn and__4174__auto__;\n}\n})();\nif(cljs.core.truth_((zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zcomment_QMARK_.call(null,zloc)))){\nvar zcomment = (((((depth === (0))) && (cljs.core.not(trim_comments_QMARK_))))?zstr:clojure.string.replace(zstr,\"\\n\",\"\"));\nvar inline_spaces = (cljs.core.truth_(new cljs.core.Keyword(null,\"inline?\",\"inline?\",-1674483791).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"comment\",\"comment\",532206069).cljs$core$IFn$_invoke$arity$1(options__$3)))?(zprint.zfns.zinlinecomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zinlinecomment_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zinlinecomment_QMARK_.call(null,zloc)):null);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$3))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$3),\"fzprint* trim-comments?:\",trim_comments_QMARK_], 0));\n} else {\n}\n\nif(cljs.core.truth_((function (){var and__4174__auto__ = new cljs.core.Keyword(null,\"count?\",\"count?\",-122202128).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"comment\",\"comment\",532206069).cljs$core$IFn$_invoke$arity$1(options__$3));\nif(cljs.core.truth_(and__4174__auto__)){\nreturn overflow_in_hang_QMARK_;\n} else {\nreturn and__4174__auto__;\n}\n})())){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$3))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$3),\"fzprint*: overflow comment ========\"], 0));\n} else {\n}\n\nreturn null;\n} else {\nif(cljs.core.truth_(inline_spaces)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [zcomment,zprint.zprint.zcolor_map(options__$3,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069)),new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405),inline_spaces], null)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zcomment,zprint.zprint.zcolor_map(options__$3,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069)),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069)], null)], null);\n}\n}\n} else {\nif(cljs.core.truth_((zprint.zfns.zwhitespaceorcomment_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zwhitespaceorcomment_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zwhitespaceorcomment_QMARK_.call(null,zloc)))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null)], null);\n} else {\nif(cljs.core.truth_(overflow_in_hang_QMARK_)){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options__$3))){\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options__$3),\"fzprint*: overflow <<<<<<<<<<\"], 0));\n} else {\n}\n\nreturn null;\n} else {\nif(cljs.core.truth_((zprint.zfns.zkeyword_QMARK_.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zkeyword_QMARK_.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zkeyword_QMARK_.call(null,zloc)))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,zprint.zprint.zcolor_map(options__$3,new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nif(typeof (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc)) === 'string'){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_(string_str_QMARK_)?cljs.core.str.cljs$core$IFn$_invoke$arity$1((zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc))):(zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zstring.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zstring.call(null,zloc))),(cljs.core.truth_(string_color)?string_color:zprint.zprint.zcolor_map(options__$3,new cljs.core.Keyword(null,\"string\",\"string\",-1989541586))),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nif(cljs.core.truth_(zprint.zprint.showfn_QMARK_(fn_map,(zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc))))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,zprint.zprint.zcolor_map(options__$3,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nif(cljs.core.truth_(zprint.zprint.show_user_fn_QMARK_(options__$3,(zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc))))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,zprint.zprint.zcolor_map(options__$3,new cljs.core.Keyword(null,\"user-fn\",\"user-fn\",223976490)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nif(typeof (zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc)) === 'number'){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(cljs.core.truth_(hex_QMARK_)?(zprint.zfns.znumstr.cljs$core$IFn$_invoke$arity$3 ? zprint.zfns.znumstr.cljs$core$IFn$_invoke$arity$3(zloc,hex_QMARK_,shift_seq) : zprint.zfns.znumstr.call(null,zloc,hex_QMARK_,shift_seq)):zstr),zprint.zprint.zcolor_map(options__$3,new cljs.core.Keyword(null,\"number\",\"number\",1570378438)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nif(((zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1 ? zprint.zfns.zsexpr.cljs$core$IFn$_invoke$arity$1(zloc) : zprint.zfns.zsexpr.call(null,zloc)) == null)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,zprint.zprint.zcolor_map(options__$3,new cljs.core.Keyword(null,\"nil\",\"nil\",99600501)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zstr,zprint.zprint.zcolor_map(options__$3,new cljs.core.Keyword(null,\"none\",\"none\",1333468478)),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null)], null);\n\n}\n}\n}\n}\n}\n}\n}\n}\n}\n\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n});\n/**\n * Take a string and an index, and look for the last space prior to the\n *   index. If we wanted to tie ourselves to 1.8, we could use \n *   clojure.string/last-index-of, but we don't.  However, we use similar\n *   conventions, i.e., if no space is found, return nil, and if the index\n *   is a space return that value, and accept any from-index, including one\n *   larger than the length of the string.\n */\nzprint.zprint.last_space = (function zprint$zprint$last_space(s,from_index){\nvar from_index__$1 = (function (){var x__4276__auto__ = (cljs.core.count(s) - (1));\nvar y__4277__auto__ = from_index;\nreturn ((x__4276__auto__ < y__4277__auto__) ? x__4276__auto__ : y__4277__auto__);\n})();\nvar rev_seq = cljs.core.reverse(cljs.core.take.cljs$core$IFn$_invoke$arity$2((from_index__$1 + (1)),s));\nvar seq_after_space = cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__53040_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(p1__53040_SHARP_,\" \");\n}),rev_seq);\nvar space_index = (from_index__$1 - cljs.core.count(seq_after_space));\nif((space_index < (0))){\nreturn null;\n} else {\nreturn space_index;\n}\n});\n/**\n * Take a string and an index, and look for the next space *after* the\n *   index. If no space is found, return nil. Accept any from-index, \n *   including one larger than the length of the string.\n */\nzprint.zprint.next_space = (function zprint$zprint$next_space(s,from_index){\nvar from_index__$1 = (from_index + (1));\nif((from_index__$1 < cljs.core.count(s))){\nvar seq_after_space = cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__53043_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(p1__53043_SHARP_,\" \");\n}),cljs.core.drop.cljs$core$IFn$_invoke$arity$2(from_index__$1,cljs.core.seq(s)));\nvar space_index = (from_index__$1 + cljs.core.count(seq_after_space));\nif((space_index >= cljs.core.count(s))){\nreturn null;\n} else {\nreturn space_index;\n}\n} else {\nreturn null;\n}\n});\n/**\n * If this is a comment, and it is too long, word wrap it to the right width.\n *   Note that top level comments may well end with a newline, so remove it\n *   and reapply it at the end if that is the case.\n */\nzprint.zprint.wrap_comment = (function zprint$zprint$wrap_comment(width,p__53045,start){\nvar vec__53046 = p__53045;\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53046,(0),null);\nvar color = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53046,(1),null);\nvar stype = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53046,(2),null);\nvar element = vec__53046;\nif((!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(stype,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069))))){\nreturn element;\n} else {\nvar comment_width = (width - start);\nvar semi_str = cljs.core.re_find(/;*/,s);\nvar rest_str = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s,cljs.core.count(semi_str));\nvar space_str = cljs.core.re_find(/ */,rest_str);\nvar rest_str__$1 = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(rest_str,cljs.core.count(space_str));\nvar newline_QMARK_ = cljs.core.re_find(/\\n$/,s);\nvar comment_width__$1 = ((comment_width - cljs.core.count(semi_str)) - cljs.core.count(space_str));\nvar comment_str = rest_str__$1;\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core.empty_QMARK_(comment_str)){\nif((cljs.core.count(out) === (0))){\nif(cljs.core.truth_(newline_QMARK_)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [semi_str,color,stype], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\\n\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [semi_str,color,stype], null)], null);\n}\n} else {\nreturn cljs.core.persistent_BANG_((cljs.core.truth_(newline_QMARK_)?cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"\\n\",new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)):out));\n}\n} else {\nvar last_space_index = (((((comment_str).length) <= comment_width__$1))?(((comment_str).length) - (1)):(((comment_width__$1 <= (0)))?(function (){var or__4185__auto__ = zprint.zprint.next_space(comment_str,(0));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (((comment_str).length) - (1));\n}\n})():(function (){var or__4185__auto__ = zprint.zprint.last_space(comment_str,comment_width__$1);\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nvar or__4185__auto____$1 = zprint.zprint.next_space(comment_str,comment_width__$1);\nif(cljs.core.truth_(or__4185__auto____$1)){\nreturn or__4185__auto____$1;\n} else {\nreturn (((comment_str).length) - (1));\n}\n}\n})()));\nvar next_comment = clojure.string.trimr(cljs.core.subs.cljs$core$IFn$_invoke$arity$3(comment_str,(0),(last_space_index + (1))));\nvar G__55062 = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(comment_str,(last_space_index + (1)));\nvar G__55063 = (((cljs.core.count(out) === (0)))?cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(semi_str),cljs.core.str.cljs$core$IFn$_invoke$arity$1(space_str),next_comment].join(''),color,stype], null)):cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(zprint.zprint.blanks(start))].join(''),new cljs.core.Keyword(null,\"none\",\"none\",1333468478),new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125)], null)),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str.cljs$core$IFn$_invoke$arity$1(semi_str),cljs.core.str.cljs$core$IFn$_invoke$arity$1(space_str),next_comment].join(''),color,new cljs.core.Keyword(null,\"comment-wrap\",\"comment-wrap\",720664128)], null)));\ncomment_str = G__55062;\nout = G__55063;\ncontinue;\n}\nbreak;\n}\n}\n});\n/**\n * Takes the start of this vector and the vector itself.\n */\nzprint.zprint.loc_vec = (function zprint$zprint$loc_vec(start,p__53058){\nvar vec__53059 = p__53058;\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53059,(0),null);\nvar split = zprint.zprint.split_lf(s);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(split),(1))){\nreturn (start + cljs.core.count(s));\n} else {\nreturn cljs.core.count(cljs.core.last(split));\n}\n});\n/**\n * Take a style-vec and produce a style-loc-vec with the starting column\n *   of each element in the style-vec.\n */\nzprint.zprint.style_loc_vec = (function zprint$zprint$style_loc_vec(style_vec){\nreturn cljs.core.butlast(cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(zprint.zprint.loc_vec,(0),style_vec));\n});\n/**\n * Take a transient output vector and a vector and lift any style-vec elements\n *   out of the input vector.\n */\nzprint.zprint.lift_vec = (function zprint$zprint$lift_vec(out_vec,element){\nif(typeof cljs.core.first(element) === 'string'){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out_vec,element);\n} else {\nvar element_vec = element;\nvar out = out_vec;\nwhile(true){\nif(cljs.core.not(element_vec)){\nreturn out;\n} else {\nvar G__55066 = cljs.core.next(element_vec);\nvar G__55067 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,cljs.core.first(element_vec));\nelement_vec = G__55066;\nout = G__55067;\ncontinue;\n}\nbreak;\n}\n}\n});\n/**\n * Take a style-vec [[s color type] [s color type] [[s color type]\n *   [s color type]] [s color type] ...] and lift out the inner vectors.\n */\nzprint.zprint.lift_style_vec = (function zprint$zprint$lift_style_vec(style_vec){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(zprint.zprint.lift_vec,cljs.core.PersistentVector.EMPTY,style_vec);\n});\n/**\n * Take the final output style-vec, and wrap any comments which run over\n *   the width. Looking for \n */\nzprint.zprint.fzprint_wrap_comments = (function zprint$zprint$fzprint_wrap_comments(p__53068,style_vec){\nvar map__53069 = p__53068;\nvar map__53069__$1 = (((((!((map__53069 == null))))?(((((map__53069.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__53069.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__53069):map__53069);\nvar options = map__53069__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53069__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar start_col = zprint.zprint.style_loc_vec(style_vec);\nvar _ = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-wrap-comments: style-vec:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([style_vec], 0))], 0)):null);\nvar ___$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-wrap-comments: start-col:\",start_col], 0)):null);\nvar wrap_style_vec = cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(zprint.zprint.wrap_comment,width),style_vec,start_col);\nvar ___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"dbg?\",\"dbg?\",1845730771).cljs$core$IFn$_invoke$arity$1(options))?cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dbg-indent\",\"dbg-indent\",1534856778).cljs$core$IFn$_invoke$arity$1(options),\"fzprint-wrap-comments: wrap:\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([style_vec], 0))], 0)):null);\nvar out_style_vec = zprint.zprint.lift_style_vec(wrap_style_vec);\nreturn out_style_vec;\n});\n/**\n * Try to bring inline comments back onto the line on which they belong.\n */\nzprint.zprint.fzprint_inline_comments = (function zprint$zprint$fzprint_inline_comments(p__53077,style_vec){\nvar map__53079 = p__53077;\nvar map__53079__$1 = (((((!((map__53079 == null))))?(((((map__53079.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__53079.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__53079):map__53079);\nvar options = map__53079__$1;\nvar width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__53079__$1,new cljs.core.Keyword(null,\"width\",\"width\",-384071477));\nvar cvec = style_vec;\nvar out = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nif(cljs.core.not(cvec)){\nreturn out;\n} else {\nvar vec__53089 = cljs.core.first(cvec);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53089,(0),null);\nvar c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53089,(1),null);\nvar e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53089,(2),null);\nvar element = vec__53089;\nvar vec__53092 = cljs.core.second(cvec);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53092,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53092,(1),null);\nvar ne = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53092,(2),null);\nvar nn = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53092,(3),null);\nvar next_element = vec__53092;\nvar new_element = ((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(e,new cljs.core.Keyword(null,\"indent\",\"indent\",-148200125))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ne,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405)))))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [zprint.zprint.blanks(nn),c,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(e,new cljs.core.Keyword(null,\"comment-inline\",\"comment-inline\",712944405)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [s,c,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069)], null):element\n));\nvar G__55090 = cljs.core.next(cvec);\nvar G__55091 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(out,new_element);\ncvec = G__55090;\nout = G__55091;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * The pretty print part of fzprint.\n */\nzprint.zprint.fzprint = (function zprint$zprint$fzprint(options,indent,zloc){\nvar zloc__$1 = ((cljs.core.not(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"ztype\",\"ztype\",-562179020).cljs$core$IFn$_invoke$arity$1(options),new cljs.core.Keyword(null,\"zipper\",\"zipper\",1500694438)))?new cljs.core.Keyword(null,\"value\",\"value\",305978217).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"spec\",\"spec\",347520401).cljs$core$IFn$_invoke$arity$1(options)):false)))?zloc:zprint.zutil.add_spec_to_docstring(zloc,new cljs.core.Keyword(null,\"value\",\"value\",305978217).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"spec\",\"spec\",347520401).cljs$core$IFn$_invoke$arity$1(options))));\nvar style_vec = zprint.zprint.fzprint_STAR_(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(options,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640),(0),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"map-depth\",\"map-depth\",-191378641),(0)], 0)),indent,zloc__$1);\nreturn style_vec;\n});\n/**\n * Count lines in a string.\n */\nzprint.zprint.line_count = (function zprint$zprint$line_count(s){\nreturn (cljs.core.count(cljs.core.re_seq(/\\n/,s)) + (1));\n});\n/**\n * Return a vector the lengths of lines.\n */\nzprint.zprint.line_widths = (function zprint$zprint$line_widths(s){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.count,clojure.string.split.cljs$core$IFn$_invoke$arity$2(s,/\\n/));\n});\n/**\n * Split a string into lines, and figure the max width.\n */\nzprint.zprint.max_width = (function zprint$zprint$max_width(s){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.max,zprint.zprint.line_widths(s));\n});\n/**\n * Takes a string, and expands tabs inside of the string based\n *   on a tab-size argument.\n */\nzprint.zprint.expand_tabs = (function zprint$zprint$expand_tabs(var_args){\nvar G__53106 = arguments.length;\nswitch (G__53106) {\ncase 2:\nreturn zprint.zprint.expand_tabs.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn zprint.zprint.expand_tabs.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(zprint.zprint.expand_tabs.cljs$core$IFn$_invoke$arity$2 = (function (tab_size,s){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,(function (){var char_seq = cljs.core.seq(s);\nvar cur_len = cljs.core.long$((0));\nvar out = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core.empty_QMARK_(char_seq)){\nreturn cljs.core.persistent_BANG_(out);\n} else {\nvar this_char = cljs.core.first(char_seq);\nvar tab_expansion = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this_char,\"\\t\"))?(tab_size - cljs.core.mod(cur_len,tab_size)):null);\nvar G__55094 = cljs.core.rest(char_seq);\nvar G__55095 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this_char,\"\\n\"))?(0):(cur_len + cljs.core.long$((function (){var or__4185__auto__ = tab_expansion;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (1);\n}\n})())));\nvar G__55096 = (cljs.core.truth_(tab_expansion)?cljs.core.apply.cljs$core$IFn$_invoke$arity$3(zprint.zprint.conj_it_BANG_,out,cljs.core.seq(zprint.zprint.blanks(tab_expansion))):cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,this_char));\nchar_seq = G__55094;\ncur_len = G__55095;\nout = G__55096;\ncontinue;\n}\nbreak;\n}\n})());\n}));\n\n(zprint.zprint.expand_tabs.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn zprint.zprint.expand_tabs.cljs$core$IFn$_invoke$arity$2((8),s);\n}));\n\n(zprint.zprint.expand_tabs.cljs$lang$maxFixedArity = 2);\n\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nzprint.zprint.r = (function (left,right,__meta,__extmap,__hash){\nthis.left = left;\nthis.right = right;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(zprint.zprint.r.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4439__auto__,k__4440__auto__){\nvar self__ = this;\nvar this__4439__auto____$1 = this;\nreturn this__4439__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4440__auto__,null);\n}));\n\n(zprint.zprint.r.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4441__auto__,k53110,else__4442__auto__){\nvar self__ = this;\nvar this__4441__auto____$1 = this;\nvar G__53117 = k53110;\nvar G__53117__$1 = (((G__53117 instanceof cljs.core.Keyword))?G__53117.fqn:null);\nswitch (G__53117__$1) {\ncase \"left\":\nreturn self__.left;\n\nbreak;\ncase \"right\":\nreturn self__.right;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k53110,else__4442__auto__);\n\n}\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4458__auto__,f__4459__auto__,init__4460__auto__){\nvar self__ = this;\nvar this__4458__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4461__auto__,p__53140){\nvar vec__53141 = p__53140;\nvar k__4462__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53141,(0),null);\nvar v__4463__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53141,(1),null);\nreturn (f__4459__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4459__auto__.cljs$core$IFn$_invoke$arity$3(ret__4461__auto__,k__4462__auto__,v__4463__auto__) : f__4459__auto__.call(null,ret__4461__auto__,k__4462__auto__,v__4463__auto__));\n}),init__4460__auto__,this__4458__auto____$1);\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4453__auto__,writer__4454__auto__,opts__4455__auto__){\nvar self__ = this;\nvar this__4453__auto____$1 = this;\nvar pr_pair__4456__auto__ = (function (keyval__4457__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4454__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4455__auto__,keyval__4457__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__4454__auto__,pr_pair__4456__auto__,\"#zprint.zprint.r{\",\", \",\"}\",opts__4455__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"left\",\"left\",-399115937),self__.left],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"right\",\"right\",-452581833),self__.right],null))], null),self__.__extmap));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__53109){\nvar self__ = this;\nvar G__53109__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__53109__$1,2,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"left\",\"left\",-399115937),new cljs.core.Keyword(null,\"right\",\"right\",-452581833)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4437__auto__){\nvar self__ = this;\nvar this__4437__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(zprint.zprint.r.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4434__auto__){\nvar self__ = this;\nvar this__4434__auto____$1 = this;\nreturn (new zprint.zprint.r(self__.left,self__.right,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4443__auto__){\nvar self__ = this;\nvar this__4443__auto____$1 = this;\nreturn (2 + cljs.core.count(self__.__extmap));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4435__auto__){\nvar self__ = this;\nvar this__4435__auto____$1 = this;\nvar h__4297__auto__ = self__.__hash;\nif((!((h__4297__auto__ == null)))){\nreturn h__4297__auto__;\n} else {\nvar h__4297__auto____$1 = (function (){var fexpr__53158 = (function (coll__4436__auto__){\nreturn (-1384233907 ^ cljs.core.hash_unordered_coll(coll__4436__auto__));\n});\nreturn fexpr__53158(this__4435__auto____$1);\n})();\n(self__.__hash = h__4297__auto____$1);\n\nreturn h__4297__auto____$1;\n}\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this53111,other53112){\nvar self__ = this;\nvar this53111__$1 = this;\nreturn (((!((other53112 == null)))) && ((this53111__$1.constructor === other53112.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this53111__$1.left,other53112.left)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this53111__$1.right,other53112.right)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this53111__$1.__extmap,other53112.__extmap)));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4448__auto__,k__4449__auto__){\nvar self__ = this;\nvar this__4448__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"right\",\"right\",-452581833),null,new cljs.core.Keyword(null,\"left\",\"left\",-399115937),null], null), null),k__4449__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4448__auto____$1),self__.__meta),k__4449__auto__);\n} else {\nreturn (new zprint.zprint.r(self__.left,self__.right,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4449__auto__)),null));\n}\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4446__auto__,k__4447__auto__,G__53109){\nvar self__ = this;\nvar this__4446__auto____$1 = this;\nvar pred__53159 = cljs.core.keyword_identical_QMARK_;\nvar expr__53160 = k__4447__auto__;\nif(cljs.core.truth_((function (){var G__53162 = new cljs.core.Keyword(null,\"left\",\"left\",-399115937);\nvar G__53163 = expr__53160;\nreturn (pred__53159.cljs$core$IFn$_invoke$arity$2 ? pred__53159.cljs$core$IFn$_invoke$arity$2(G__53162,G__53163) : pred__53159.call(null,G__53162,G__53163));\n})())){\nreturn (new zprint.zprint.r(G__53109,self__.right,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__53164 = new cljs.core.Keyword(null,\"right\",\"right\",-452581833);\nvar G__53165 = expr__53160;\nreturn (pred__53159.cljs$core$IFn$_invoke$arity$2 ? pred__53159.cljs$core$IFn$_invoke$arity$2(G__53164,G__53165) : pred__53159.call(null,G__53164,G__53165));\n})())){\nreturn (new zprint.zprint.r(self__.left,G__53109,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new zprint.zprint.r(self__.left,self__.right,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4447__auto__,G__53109),null));\n}\n}\n}));\n\n(zprint.zprint.r.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4451__auto__){\nvar self__ = this;\nvar this__4451__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"left\",\"left\",-399115937),self__.left,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"right\",\"right\",-452581833),self__.right,null))], null),self__.__extmap));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4438__auto__,G__53109){\nvar self__ = this;\nvar this__4438__auto____$1 = this;\nreturn (new zprint.zprint.r(self__.left,self__.right,G__53109,self__.__extmap,self__.__hash));\n}));\n\n(zprint.zprint.r.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4444__auto__,entry__4445__auto__){\nvar self__ = this;\nvar this__4444__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4445__auto__)){\nreturn this__4444__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4445__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4445__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4444__auto____$1,entry__4445__auto__);\n}\n}));\n\n(zprint.zprint.r.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"left\",\"left\",1241415590,null),new cljs.core.Symbol(null,\"right\",\"right\",1187949694,null)], null);\n}));\n\n(zprint.zprint.r.cljs$lang$type = true);\n\n(zprint.zprint.r.cljs$lang$ctorPrSeq = (function (this__4482__auto__){\nreturn (new cljs.core.List(null,\"zprint.zprint/r\",null,(1),null));\n}));\n\n(zprint.zprint.r.cljs$lang$ctorPrWriter = (function (this__4482__auto__,writer__4483__auto__){\nreturn cljs.core._write(writer__4483__auto__,\"zprint.zprint/r\");\n}));\n\n/**\n * Positional factory function for zprint.zprint/r.\n */\nzprint.zprint.__GT_r = (function zprint$zprint$__GT_r(left,right){\nreturn (new zprint.zprint.r(left,right,null,null,null));\n});\n\n/**\n * Factory function for zprint.zprint/r, taking a map of keywords to field values.\n */\nzprint.zprint.map__GT_r = (function zprint$zprint$map__GT_r(G__53114){\nvar extmap__4478__auto__ = (function (){var G__53166 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__53114,new cljs.core.Keyword(null,\"left\",\"left\",-399115937),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"right\",\"right\",-452581833)], 0));\nif(cljs.core.record_QMARK_(G__53114)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__53166);\n} else {\nreturn G__53166;\n}\n})();\nreturn (new zprint.zprint.r(new cljs.core.Keyword(null,\"left\",\"left\",-399115937).cljs$core$IFn$_invoke$arity$1(G__53114),new cljs.core.Keyword(null,\"right\",\"right\",-452581833).cljs$core$IFn$_invoke$arity$1(G__53114),null,cljs.core.not_empty(extmap__4478__auto__),null));\n});\n\nzprint.zprint.make_record = (function zprint$zprint$make_record(l,r){\nreturn (new r(l,r));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","zprint/zprint.cljc","~:line",1,"~:column",14,"~:end-line",1,"~:end-column",27,"~:no-doc",true],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$dbg","~$zprint.macros","~$dbg-pr","^G","~$dbg-form","^G","~$dbg-print","^G","~$zfuture","^G"],"~:excludes",["~#set",[]],"~:name","~$zprint.zprint","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.parser","^T","~$p","^T","~$zprint.config","^U","~$rewrite-clj.zip","^V","~$cljs.core","^W","~$goog","^X","~$zprint.zfns","^Y","~$zprint.ansi","^Z","~$s","~$clojure.string","~$z","^V","^[","^[","~$zprint.zutil","^10"],"~:seen",["^M",["~:require","~:require-macros"]],"~:uses",["^ ","~$zreader-cond-w-symbol?","^Y","~$zarray-to-shift-seq","^Y","~$zlist?","^Y","~$zvector?","^Y","~$zarray?","^Y","~$zcomment?","^Y","~$zanonfn?","^Y","~$zfirst-no-comment","^Y","~$zkeyword?","^Y","~$zdelay?","^Y","~$zns?","^Y","~$zconstant?","^Y","~$zfourth","^Y","~$znewline?","^Y","~$ztake-append","^Y","~$merge-deep","^U","~$zmap?","^Y","~$zatom?","^Y","~$zstring","^Y","~$validate-options","^U","~$zlast","^Y","~$zdotdotdot","^Y","~$znthnext","^Y","~$znil?","^Y","~$zset?","^Y","~$color-str","^Z","~$zsymbol?","^Y","~$zfn-obj?","^Y","~$zreader-cond-w-coll?","^Y","~$zmeta?","^Y","~$add-spec-to-docstring","^10","~$zfocus","^Y","~$zfirst","^Y","~$zagent?","^Y","~$zbyte-array?","^Y","~$zcount","^Y","~$zexpandarray","^Y","~$zwhitespace?","^Y","~$zreader-macro?","^Y","~$zthird","^Y","~$zcoll?","^Y","~$zmap-right","^Y","~$zfuture?","^Y","~$zpromise?","^Y","~$zderef","^Y","~$zlift-ns","^Y","~$zsecond","^Y","~$zsexpr","^Y","~$zinlinecomment?","^Y","~$zrecord?","^Y","~$zobj-to-vec","^Y","~$zfocus-style","^Y","~$zwhitespaceorcomment?","^Y","~$zmap-all","^Y","~$zmap","^Y","~$ztag","^Y","~$zseqnws","^Y","~$zmap-w-nl","^Y","~$zfind-path","^Y","~$zuneval?","^Y","~$zfind","^Y","~$znumstr","^Y"],"^13",["^ ","^G","^G","^W","^W"],"~:form",["~#list",["~$ns","^O",["^13",["^G","~:refer",["^F","^H","^I","^J","^K"]]],["^2H",["^12",["^[","~:as","~$s"],["^Y","^2J",["^1G","^2F","^1W","^1:","^28","^2A","^22","^2<","^1U","^1<","^27","^20","^1A","^1K","^1X","^2?","^1;","^1P","^1T","^2C","^1Z","^17","^18","^1E","^1M","^21","^2D","^1R","^2@","^1I","^19","^1F","^25","^2:","^1?","^2;","^1Y","^1B","^2=","^2>","^24","^23","^1>","^1=","^1@","^1V","^1[","^16","^1J","^1O","^1L","^15","^1Q","^26","^29","^2E","^2B","^1C"]],["^Z","^2J",["^1N"]],["^U","^2J",["^1H","^1D"]],["^10","^2J",["^1S"]],["^T","^2K","~$p"],["^V","^2K","~$z"]]]]],"~:flags",["^ ","^13",["^M",[]],"^12",["^M",[]]],"~:js-deps",["^ "],"~:deps",["^X","^W","^[","^Y","^Z","^U","^10","^T","^V"]],"^Q","^O","~:resource-id",["~:shadow.build.classpath/resource","zprint/zprint.cljc"],"~:compiled-at",1581954191849,"~:resource-name","zprint/zprint.cljc","~:warnings",[],"~:source","(ns ^:no-doc zprint.zprint\n  #?@(:cljs [[:require-macros\n              [zprint.macros :refer [dbg dbg-pr dbg-form dbg-print zfuture]]]])\n  (:require\n    #?@(:clj [[zprint.macros :refer [dbg-pr dbg dbg-form dbg-print zfuture]]])\n    [clojure.string :as s]\n    [zprint.zfns :refer\n     [zstring znumstr zbyte-array? zcomment? zsexpr zseqnws zmap-right\n      zfocus-style zfirst zfirst-no-comment zsecond zthird zfourth znthnext\n      zcount zmap zanonfn? zfn-obj? zfocus zfind-path zwhitespace? zlist?\n      zvector? zmap? zset? zcoll? zuneval? zmeta? ztag zlast zarray? zatom?\n      zderef zrecord? zns? zobj-to-vec zexpandarray znewline?\n      zwhitespaceorcomment? zmap-all zpromise? zfuture? zdelay? zkeyword?\n      zconstant? zagent? zreader-macro? zarray-to-shift-seq zdotdotdot zsymbol?\n      znil? zreader-cond-w-symbol? zreader-cond-w-coll? zlift-ns zinlinecomment?\n      zfind zmap-w-nl ztake-append]]\n    [zprint.ansi :refer [color-str]]\n    [zprint.config :refer [validate-options merge-deep]]\n    [zprint.zutil :refer [add-spec-to-docstring]]\n    [rewrite-clj.parser :as p]\n    [rewrite-clj.zip :as z]\n    #_[taoensso.tufte :as tufte :refer (p defnp profiled profile)]))\n\n(declare interpose-nl-hf)\n\n;;\n;; # Utility Functions\n;;\n\n(defn blanks\n  \"Produce a blank string of desired size.\"\n  [n]\n  (apply str (repeat n \" \")))\n\n(defn dots\n  \"Produce a dot string of desired size.\"\n  [n]\n  (apply str (repeat n \".\")))\n\n(defn indent \"error\" [])\n\n(defn conj-it!\n  \"Make a version of conj! that take multiple arguments.\"\n  [& rest]\n  (loop [out (first rest)\n         more (next rest)]\n    (if more (recur (conj! out (first more)) (next more)) out)))\n\n(defn split-lf\n  \"Do split for newlines, instead of using regular expressions.\"\n  [s]\n  (loop [input s\n         out []]\n    (if-not input\n      out\n      (let [next-lf (clojure.string/index-of input \"\\n\")\n            chunk (if next-lf (subs input 0 next-lf) input)]\n        (recur (if next-lf (subs input (inc next-lf)) nil) (conj out chunk))))))\n\n(defn split-lf-2\n  \"Do split for newlines, instead of using regular expressions.\n  Maximum split is 2.\"\n  [s]\n  (if-let [next-lf (clojure.string/index-of s \"\\n\")]\n    [(subs s 0 next-lf) (subs s (inc next-lf))]\n    [s]))\n\n;;\n;; # Use pmap when we have it\n;;\n\n#?(:clj (defn zpmap\n          ([options f coll]\n           (if (:parallel? options) (pmap f coll) (map f coll)))\n          ([options f coll1 coll2]\n           (if (:parallel? options) (pmap f coll1 coll2) (map f coll1 coll2))))\n   :cljs (defn zpmap\n           ([options f coll] (map f coll))\n           ([options f coll1 coll2] (map f coll1 coll2))))\n\n;;\n;; # More parallelism issues -- zderef to go with zfuture macro\n;;\n\n(defn zat\n  \"Takes an option map and the return from zfuture.  If the\n  options map has (:parallel? options) as true, then deref\n  the value, otherwise just pass it through.\"\n  [options value]\n  #?(:clj (if (:parallel? options) (deref value) value)\n     :cljs value))\n\n;;\n;; # Debugging Assistance\n;;\n\n(def fzprint-dbg (atom nil))\n\n(defn log-lines\n  \"Accept a style-vec that we are about to hand to style-lines, and\n  output it if called for, to aid in debugging.\"\n  [{:keys [dbg-print? dbg-indent in-hang?], :as options} dbg-output ind\n   style-vec]\n  (when dbg-print?\n    (if style-vec\n      (do (println dbg-indent dbg-output \"--------------\" \"in-hang?\" in-hang?)\n          (println (apply str (blanks ind) (map first style-vec))))\n      (println dbg-indent dbg-output \"--------------- no style-vec\"))))\n\n;;\n;; # What is a function?\n;;\n\n(defn showfn?\n  \"Show this thing as a function?\"\n  [fn-map f]\n  (when (not (string? f))\n    (let [f-str (str f)]\n      (or (fn-map f-str)\n          (re-find #\"clojure\" f-str)\n          (if (symbol? f)\n            ; This is necessary because f can be a symbol that\n            ; resolve will have a problem with.  The obvious ones\n            ; were (ns-name <some-namespace>), but there are almost\n            ; certainly others.\n            (try (or (re-find #\"clojure\"\n                              (str (:ns (meta #?(:clj (resolve f)\n                                                 :cljs f)))))\n                     (fn-map (name f)))\n                 (catch #?(:clj Exception\n                           :cljs :default) e\n                   nil)))))))\n\n(defn show-user-fn?\n  \"Show this thing as a user defined function?  Assumes that we\n  have already handled any clojure defined functions!\"\n  [options f]\n  (when (not (string? f))\n    (let [f-str (str f)\n          user-fn-map (:user-fn-map options)]\n      (or (get user-fn-map f-str)\n          (if (symbol? f)\n            ; This is necessary because f can be a symbol that\n            ; resolve will have a problem with.  The obvious ones\n            ; were (ns-name <some-namespace>), but there are almost\n            ; certainly others.\n            (try (or (not (empty? (str (:ns (meta #?(:clj (resolve f)\n                                                     :cljs f))))))\n                     (get user-fn-map (name f)))\n                 (catch #?(:clj Exception\n                           :cljs :default) e\n                   nil)))))))\n\n(def right-separator-map {\")\" 1, \"]\" 1, \"}\" 1})\n\n;;\n;; # Functions to compare alternative printing approaches\n;;\n\n(declare fix-rightcnt)\n(declare contains-nil?)\n\n(defn good-enough?\n  \"Given the fn-style, is the first output good enough to be worth\n  doing. p is pretty, which is typically hanging, and b is basic, which\n  is typically flow. p-count is the number of elements in the hang.\"\n  [caller\n   {:keys [width rightcnt dbg?],\n    {:keys [hang-flow hang-type-flow hang-flow-limit general-hang-adjust\n            hang-if-equal-flow?]}\n      :tuning,\n    {:keys [hang-expand hang-diff hang-size hang-adjust]} caller,\n    :as options} fn-style p-count indent-diff\n   [p-lines p-maxwidth p-length-seq p-what] [b-lines b-maxwidth _ b-what]]\n  (let [p-last-maxwidth (last p-length-seq)\n        hang-diff (or hang-diff 0)\n        hang-expand (or hang-expand 1000.)\n        hang-adjust (or hang-adjust general-hang-adjust)\n        #_(options (if (and p-lines\n                            p-count\n                            (pos? p-count)\n                            (not (<= indent-diff hang-diff))\n                            (not (<= (/ (dec p-lines) p-count) hang-expand)))\n                     (assoc options :dbg? true)\n                     options))\n        options (if (or p-what b-what) (assoc options :dbg? true) options)\n        result\n          (if (not b-lines)\n            true\n            (and\n              p-lines\n              ; Does the last line fit, including the collection ending\n              ; stuff?\n              ; Do we really need this anymore?\n              (<= p-last-maxwidth (- width (fix-rightcnt rightcnt)))\n              ; Does it widest line fit?\n              ; Do we have a problem if the widest line has a rightcnt?\n              (<= p-maxwidth width)\n              ;      (<= p-maxwidth (- width (fix-rightcnt rightcnt)))\n              (or (zero? p-lines)\n                  (and ; do we have lines to operate on?\n                       (> b-lines 0)\n                       (> p-count 0)\n                       ; if the hang and the flow are the same size, why not\n                       ; hang?\n                       (if (and (= p-lines b-lines) hang-if-equal-flow?)\n                         true\n                           ; is the difference between the indents so small\n                           ; that\n                           ; we don't care?\n                           (and (if (<= indent-diff hang-diff)\n                                  true\n                                    ; Do the number of lines in the hang exceed\n                                    ; the number\n                                    ; of elements in the hang?\n                                    (<= (/ (dec p-lines) p-count) hang-expand))\n                                (if hang-size (< p-lines hang-size) true)\n                                (let [factor (if (= fn-style :hang)\n                                               hang-type-flow\n                                               hang-flow)]\n                                  ; if we have more than n lines, take the\n                                  ; shortest\n                                  (if (> p-lines hang-flow-limit)\n                                    (<= (dec p-lines) b-lines)\n                                    ; if we have less then n lines, we don't\n                                    ; necessarily\n                                    ; take the shortest\n                                    ; once we did (dec p-lines) here, fwiw\n                                    ; then we tried it w/out the dec, now we\n                                    ; let you\n                                    ; set it in :tuning.  The whole point of\n                                    ; having a\n                                    ; hang-adjust of -1 is to allow hangs when\n                                    ; the\n                                    ; number of lines in a hang is the same as\n                                    ; the\n                                    ; number of lines in a flow.\n                                    ;(< (/ p-lines b-lines) factor)))))))]\n                                    (< (/ (+ p-lines hang-adjust) b-lines)\n                                       factor)))))))))]\n    (dbg options\n         (if result \"++++++\" \"XXXXXX\")\n         \"p-what\" p-what\n         \"good-enough? caller:\" caller\n         \"fn-style:\" fn-style\n         \"width:\" width\n         \"rightcnt:\" rightcnt\n         \"hang-expand:\" hang-expand\n         \"p-count:\" p-count\n         \"p-lines:\" p-lines\n         \"p-maxwidth:\" p-maxwidth\n         \"indent-diff:\" indent-diff\n         \"hang-diff:\" hang-diff\n         \"p-last-maxwidth:\" p-last-maxwidth\n         \"b-lines:\" b-lines\n         \"b-maxwidth:\" b-maxwidth)\n    result))\n\n;;\n;; # Utility Functions\n;;\n\n(defn in-hang\n  \"Add :in-hang? true to the options map.\"\n  [options]\n  (if (:in-hang? options)\n    options\n    (if (:do-in-hang? options)\n      (assoc options :in-hang? (or (:depth options) true))\n      options)))\n\n(defn contains-nil?\n  \"Scan a collection, and return the number of nils or empty collections\n  present (if any), and nil otherwise.\"\n  [coll]\n  (let [n (count (filter #(if (coll? %) (empty? %) (nil? %)) coll))]\n    (when (not (zero? n)) n)))\n\n(defn concat-no-nil-alt\n  \"Concatentate multiple sequences, but if any of them are nil, return nil.\n  This version is 15-20% slower than the version below. Keeping it around\n  just for illustrative purposes.\"\n  [& rest]\n  (loop [coll rest\n         out (transient [])]\n    (let [c (first coll)]\n      (if-not c\n        (persistent! out)\n        (when (or (and (coll? c) (not (empty? c))) (not (nil? c)))\n          (recur (next coll) (conj! out c)))))))\n\n(defn concat-no-nil\n  \"Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil.\"\n  [& rest]\n  (let [result (reduce (fn [v o]\n                         (if (coll? o)\n                           (if (empty? o) (reduced nil) (reduce conj! v o))\n                           (if (nil? o) (reduced nil) (conj! v o))))\n                 (transient [])\n                 rest)]\n    (when result (persistent! result))))\n\n(defn force-vector\n  \"Ensure that whatever we have is a vector.\"\n  [coll]\n  (if (vector? coll) coll (into [] coll)))\n\n(defn keyword-fn?\n  \"Takes a string, and returns the fn-style if it is a keyword and\n  without the : it can be found in the fn-map.\"\n  [options s]\n  (let [[left right] (clojure.string/split s #\"^:\")]\n    (when right ((:fn-map options) right))))\n\n(defn get-max-length\n  \"Given the options map, return the max length.  This might be\n  a constant number, but it might be based on the depth as well.\n  Returns nil of there is no max-length set.\"\n  [{:as options, :keys [max-length depth]}]\n  (when max-length\n    (if (vector? max-length)\n      (nth max-length (min (dec depth) (dec (count max-length))))\n      max-length)))\n\n(defn no-max-length\n  \"Given an options map, return another options map with no\n  :max-length key.  This is to that you can call a routine that\n  normally deals with :max-length and get it to do the normal\n  thing.\"\n  [options]\n  (assoc options :max-length 10000))\n\n;;\n;; # Work with style-vecs and analyze results\n;;\n\n;; Transients don't help here, though they don't hurt much either.\n\n(defn accumulate-ll\n  \"Take the vector carrying the intermediate results, and\n  do the right thing with a new string. Vector is\n  [ 0 out - vector accumulating line lengths \n    1 cur-len - length of current line\n    just-eol? - did we just do an eol?\n    ]\n  s - string to add to current line\n  tag - element type of string (comment's don't count in length)\n  eol? - should we terminate line after adding count of s\"\n  [count-comment? [out cur-len just-eol? just-comment? :as in] s tag eol?]\n  (let [comment? (or (= tag :comment) (= tag :comment-inline))\n        count-s (if (and comment? (not count-comment?)) 0 (count s))]\n    (cond\n      #_((and comment? (not just-eol?))\n          ; if a comment and we didn't just do\n          ; a newline, then terminate the previous\n          ; line and do a line just with the comment\n          (assoc in\n            0 (conj out cur-len count-s)\n            1 0\n            2 true))\n      ; if we are told to terminate the line or it\n      ; is a comment, we terminate the line with the\n      ; size of the string added to it\n      (or (and eol? (not (and just-eol? (zero? count-s)))) comment?)\n        [(conj out (+ cur-len count-s)) 0 true comment?]\n      ;(assoc in 0 (conj out (+ cur-len count-s)) 1 0 2 true 3 comment?)\n      ; no reason to terminate the line, just accumulate\n      ; the size in cur-len\n      :else [out (+ cur-len count-s) nil comment?])))\n; (assoc in 1 (+ cur-len count-s) 2 nil 3 comment?))))\n\n(defn generate-ll\n  [count-comment? [out cur-len just-eol? just-comment? :as in]\n   [s _ tag :as element]]\n  (let [[l r] (if (or (= tag :whitespace) (= tag :indent) (= tag :newline))\n                (split-lf-2 s)\n                #_(clojure.string/split s #\"\\n\" 2)\n                (list s))\n        ; if tag = :comment, shouldn't have \\n and\n        ; therefore shouldn't have r\n        ; if r is non-nil, then we had a newline, so we want to\n        ; terminate the current line\n        ; if we are already in a comment and we have something\n        ; that is not whitespace, then we want to terminate the\n        ; current line\n        in (accumulate-ll count-comment? in l tag (not (nil? r)))\n        in (if (empty? r) in (accumulate-ll count-comment? in r tag nil))]\n    in))\n\n\n(defn line-lengths-iter\n  \"Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments elsewhere.\n  Note that only vectors with :whitespace, :indent, or :newline are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character. A single comment is counted as two lines. Lots of edge\n  conditions that are really quite important.\"\n  [options ind style-vec]\n  (let [count-comment? (:count? (:comment options))\n        ind (if (coll? ind) (first ind) ind)]\n    (loop [next-vec style-vec\n           current-string nil\n           line-length ind\n           previous-comment? nil\n           out []]\n      (if (or (and (empty? next-vec) (empty? current-string)))\n        ; A trailing newline isn't counted.\n        (cond (and (zero? line-length) (not previous-comment?)) out\n              previous-comment? (conj out line-length 0)\n              :else (conj out line-length))\n        (let [advance? (empty? current-string)\n              [next-string _ tag] (when advance? (first next-vec))\n              comment? (or (= tag :comment) (= tag :comment-inline))\n              s (if advance? next-string current-string)\n              [l r] (when s\n                      ; if we have a current-string, then we are looking for\n                      ; newlines\n                      (cond (and comment? (not count-comment?)) [\"\"]\n                            (or (and advance?\n                                     (or (= tag :whitespace)\n                                         (= tag :newline)\n                                         (= tag :indent)))\n                                current-string)\n                              (split-lf-2 s)\n                            :else [s]))\n              ; If r non-nil, we had a newline at end of l.\n              ; If we had a previous-comment, then we want to\n              ; imply a newline unless we have a newline at the\n              ; start of s.\n              ; If r is non-nil, and l is empty, then the newline\n              ; was at the front of r, in which case we don't need to\n              ; do an implied newline for the comment (if any).\n              ; Choices:\n              ;  leave l and r alone\n              ;  l becomes nil and r is (str l r)\n              force-newline? (and previous-comment? (not (empty? l)))\n              #_(prn \"l:\" l\n                     \"r:\" r\n                     \"force-newline?\" force-newline?\n                     \"comment?\" comment?)\n              r (if force-newline? (str l r) r)\n              l (if force-newline? nil l)\n              new-line-length (+ line-length (count l))]\n          #_(prn \"current-string:\" current-string\n                 \"line-length:\" line-length\n                 \"advance?\" advance?\n                 \"s:\" s\n                 \"l:\" l\n                 \"r:\" r\n                 \"new-line-length:\" new-line-length)\n          (recur (if advance? (next next-vec) next-vec)\n                 r\n                 (if r 0 new-line-length)\n                 comment?\n                 (if r (conj out new-line-length) out)))))))\n\n(defn line-lengths\n  \"Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments at the\n  end. Note that only vectors with :whitespace or :indent are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character.\"\n  [options ind style-vec]\n  (let [length-vec\n          (first ; this final accumulate-ll is to terminate the last line,\n                 ; the one in progress\n                 (let [count-comment? (:count? (:comment options))\n                       [_ _ just-eol? just-comment? :as result]\n                         (reduce (partial generate-ll count-comment?)\n                           [[] (if (coll? ind) (first ind) ind) nil nil]\n                           style-vec)]\n                   (if (and just-eol? (not just-comment?))\n                     result\n                     (accumulate-ll count-comment?\n                                    (assoc result 2 nil)\n                                    \"\"\n                                    nil\n                                    true))))]\n    #_(prn \"line-lengths: style-vec:\" style-vec\n           \"ind:\" ind\n           \"length-vec:\" length-vec)\n    length-vec))\n\n(defn single-line?\n  \"This looks at a style vec and doesn't do all that style-lines does.\n  It just looks for a new-line in the strings, and returns true if it\n  doesn't find one.\"\n  [style-vec]\n  #_(prn \"style-vec:\" style-vec)\n  (not (reduce #(or %1 %2)\n         false\n         (map #(clojure.string/includes? (first %) \"\\n\") style-vec))))\n\n(defn find-what\n  \"Given a style-vec, come up with a string that gives some hint of \n  where this style-vec came from.\"\n  [style-vec]\n  (loop [s-vec style-vec]\n    (when s-vec\n      (let [[what _ this] (first s-vec)]\n        (if (= this :element) what (recur (next s-vec)))))))\n\n; Debugging help to find differences between line-lengths and\n; line-lengths-iter.  Surprisingly helpful!\n#_(defonce lldiff (atom []))\n\n(defn style-lines\n  \"Take a style output, and tell us how many lines it takes to print it\n  and the maximum width that it reaches. Returns \n  [<line-count> <max-width> [line-lengths]].\n  Doesn't require any max-width inside the style-vec. Also returns the\n  line lengths in case that is helpful (since we have them anyway).\n  If (:dbg-ge options) has value, then uses find-what to see if what it\n  finds matches the value, and if it does, place the value in the\n  resulting vector.\"\n  [options ind style-vec]\n  (when (and style-vec (not (empty? style-vec)) (not (contains-nil? style-vec)))\n    (let [;lengths (line-lengths options ind style-vec)\n          lengths (line-lengths-iter options ind style-vec)\n          result [(count lengths) (apply max lengths) lengths]\n          dbg-ge (:dbg-ge options)\n          what (when (and dbg-ge (= (find-what style-vec) dbg-ge)) dbg-ge)]\n      #_(when (not= lengths lengths-iter) (swap! lldiff conj style-vec))\n      (if what (conj result what) result))))\n\n(defn fzfit\n  \"Given output from style-lines and options, see if it fits the width.  \n  Return the number of lines it takes if it fits, nil otherwise.\"\n  [{:keys [width rightcnt dbg?], :as options}\n   [line-count max-width :as style-lines-return]]\n  (dbg options\n       \"fzfit: fixed-rightcnt:\" (fix-rightcnt rightcnt)\n       \"line-count:\" line-count\n       \"max-width:\" max-width\n       \"width:\" width)\n  (when style-lines-return\n    (if (<= max-width (- width (fix-rightcnt rightcnt))) line-count nil)))\n\n(defn fzfit-one-line\n  \"Given the return from style-lines  and options, \n  return true if it fits on a single line.\"\n  [options style-lines-return]\n  (let [lines (fzfit options style-lines-return)]\n    (and (number? lines) (= lines 1))))\n\n;;\n;; # Handle Rightmost Size\n;;\n\n(defn rightmost\n  \"Increase the rightmost count, if any, and return one if not.\"\n  [options]\n  (assoc options :rightcnt (inc (:rightcnt options 0))))\n\n(defn not-rightmost\n  \"Remove the rightmost count.\"\n  [options]\n  (dissoc options :rightcnt))\n\n(defn c-r-pair\n  \"Handle the complexity of commas and rightmost-pair with options.\n  If it isn't a rightmost, it loses rightmost status.\n  If it is a rightmost, and in the rightmost pair, it gain one rightmost\n  since it has the right end thing (and we don't care about the comma).\n  If it is the rightmost of the non-rightmost-pair, then the comma\n  matters, and we handle that appropriately.  Whew!\"\n  [commas? rightmost-pair? rightmost? options]\n  (if-not rightmost?\n    (not-rightmost options)\n    (if rightmost-pair?\n      options\n      (if commas?\n        (rightmost (not-rightmost options))\n        (not-rightmost options)))))\n\n(defn fix-rightcnt\n  \"Handle issue with rightcnt.\"\n  [rightcnt]\n  (if (number? rightcnt) rightcnt 0))\n\n;;\n;; # First pass at color -- turn string or type into keyword color\n;;\n\n;;\n;; ## Translate from a string to a keyword as needed.\n;;\n\n(def str->key\n  {\"(\" :paren,\n   \")\" :paren,\n   \"[\" :bracket,\n   \"]\" :bracket,\n   \"{\" :brace,\n   \"}\" :brace,\n   \"#{\" :hash-brace,\n   \"#(\" :hash-paren,\n   \"#_\" :uneval,\n   \"'\" :quote,\n   \"`\" :quote,\n   \"~\" :quote,\n   \"~@\" :quote,\n   \"@\" :deref})\n\n\n(defn zcolor-map\n  \"Look up the thing in the zprint-color-map.  Accepts keywords or\n  strings.\"\n  [{:keys [color-map], :as options} key-or-str]\n  (color-map (if (keyword? key-or-str) key-or-str (str->key key-or-str))))\n\n\n;;\n;; ## Pretty Printer Code\n;;\n\n(declare fzprint*)\n(declare fzprint-flow-seq)\n\n(defn hangflow\n  \"Take a style-vec, and if hangflow? is true, return a\n  vector [hang-or-flow style-vec], else return style-vec.\n  But a nil style-vec returns nil.\"\n  [hangflow? hang-or-flow style-vec]\n  (when style-vec (if hangflow? [hang-or-flow style-vec] style-vec)))\n\n(defn fzprint-hang-unless-fail\n  \"Try to hang something and if it doesn't hang at all, then flow it,\n  but strongly prefer hang.  Has hang and flow indents, and fzfn is the\n  fzprint-? function to use with zloc.  Callers need to know whether this\n  was hang or flow, so it returns [{:hang | :flow} style-vec] all the time.\"\n  [options hindent findent fzfn zloc]\n  (dbg options \"fzprint-hang-unless-fail:\" (zstring (zfirst zloc)))\n  (let [hanging (fzfn (in-hang options) hindent zloc)]\n    (dbg-form\n      options\n      \"fzprint-hang-unless-fail: exit:\"\n      (if (and hanging (fzfit options (style-lines options hindent hanging)))\n        [:hang hanging]\n        ; hang didn't work, do flow\n        (do (dbg options \"fzprint-hang-unless-fail: hang failed, doing flow\")\n            [:flow\n             (concat-no-nil [[(str \"\\n\" (blanks findent)) :none :indent]]\n                            (fzfn options findent zloc))])))))\n\n(defn replace-color\n  \"Given a style-vec with exactly one thing in it, replace the color\n  with whatever local color we have determined is correct.\"\n  [local-color style-vec]\n  (if (= (count style-vec) 1)\n    (let [[[string color element]] style-vec] [[string local-color element]])\n    style-vec))\n\n(declare fzprint-binding-vec)\n(declare middle-element?)\n\n(defn fzprint-two-up\n  \"Print a single pair of things (though it might not be exactly a\n  pair, given comments and :extend and the like), like bindings in\n  a let, clauses in a cond, keys and values in a map.  Controlled\n  by various maps, the key of which is caller.  This will return a\n  style-vec (or nil), unless hangflow? is true, in which case it\n  will return [:hang <style-vec>] or [:flow <style-vec>] so that\n  the upstream folks know whether this was a hang or flow and can\n  do the right thing based on that.\"\n  [caller\n   {:keys [one-line? dbg? dbg-indent in-hang? do-in-hang? map-depth],\n    {:keys [hang? dbg-local? dbg-cnt? indent indent-arg flow? key-color\n            key-depth-color key-value-color]}\n      caller,\n    :as options} ind commas? justify-width rightmost-pair?\n   [lloc rloc xloc :as pair]]\n  (if dbg-cnt? (println \"two-up: caller:\" caller \"hang?\" hang? \"dbg?\" dbg?))\n  (if (or dbg? dbg-local?)\n    (println (or dbg-indent \"\")\n             \"==========================\" (str \"\\n\" (or dbg-indent \"\"))\n             \"fzprint-two-up:\" (zstring lloc)\n             \"caller:\" caller\n             \"count:\" (count pair)\n             \"ind:\" ind\n             \"indent:\" indent\n             \"indent-arg:\" indent-arg\n             \"justify-width:\" justify-width\n             \"one-line?:\" one-line?\n             \"hang?:\" hang?\n             \"in-hang?\" in-hang?\n             \"do-in-hang?\" do-in-hang?\n             \"flow?\" flow?\n             \"commas?\" commas?\n             \"rightmost-pair?\" rightmost-pair?))\n  (let [local-hang? (or one-line? hang?)\n        indent (or indent indent-arg)\n        local-options\n          (if (not local-hang?) (assoc options :one-line? true) options)\n        loptions (c-r-pair commas? rightmost-pair? nil options)\n        roptions (c-r-pair commas? rightmost-pair? :rightmost options)\n        local-roptions\n          (c-r-pair commas? rightmost-pair? :rightmost local-options)\n        ; If we have a key-value-color map, and the key we have matches any\n        ; of the keys in the map, then merge the resulting color-map elements\n        ; into the current color-map.  Could be problematic if lloc is a\n        ; modifier, but at present modifiers are only for extend and\n        ; key-value-color is only for maps, so they can't both show up\n        ; at once.\n        value-color-map (and key-value-color (key-value-color (zsexpr lloc)))\n        local-roptions (if value-color-map\n                         (merge-deep local-roptions\n                                     {:color-map value-color-map})\n                         local-roptions)\n        roptions (if value-color-map\n                   (merge-deep roptions {:color-map value-color-map})\n                   roptions)\n        ; It is possible that lloc is a modifier, and if we have exactly\n        ; three things, we will pull rloc in with it, and move xloc to rloc.\n        ; If it is just two, we'll leave it to be handled normally.\n        ; Which might need to be re-thought due to justification, but since\n        ; we are really only talking :extend here, maybe not.\n        modifier-set (:modifiers (options caller))\n        modifier? (or (and modifier-set\n                           (modifier-set (zstring lloc))\n                           (> (count pair) 2))\n                      (middle-element? options rloc))\n        ; Figure out if we want to color keys based on their depth, and if so,\n        ; figure out the color for this one.\n        local-color (get key-depth-color (dec map-depth))\n        ; Doesn't work if we have a modifier, but at this point, key-color\n        ; is only for maps and modifiers are only for extend.\n        local-color (if key-color (key-color (zsexpr lloc)) local-color)\n        #_local-color\n        #_(cond (and map-depth (= caller :map) (= map-depth 2)) :green\n                (and map-depth (= caller :map) (= map-depth 1)) :blue\n                (and map-depth (= caller :map) (= map-depth 3)) :yellow\n                (and map-depth (= caller :map) (= map-depth 4)) :red\n                :else nil)\n        arg-1 (fzprint* loptions ind lloc)\n        arg-1 (if local-color (replace-color local-color arg-1) arg-1)\n        ; If we are going to print the second thing on the line, we need\n        ; to know how big the first thing is, so we can see if the second\n        ; thing fits on the line.\n        [arg-1-line-count arg-1-max-width :as arg-1-lines]\n          (style-lines options ind arg-1)\n        ; If arg-1 already takes multiple lines, we aren't going to do\n        ; anything interesting with a modifier.\n        _ (dbg options\n               \"fzprint-two-up before modifier: arg-1-line-count:\"\n                 arg-1-line-count\n               \"arg-1-max-width:\" arg-1-max-width)\n        modifier?\n          (if (and arg-1-line-count (> arg-1-line-count 1)) nil modifier?)\n        ; See if we can merge the first and second things and have them\n        ; stay on the same line?\n        combined-arg-1 (if modifier?\n                         (concat-no-nil arg-1\n                                        [[(str \" \") :none :whitespace]]\n                                        (fzprint* (in-hang loptions)\n                                                  (+ ind arg-1-max-width)\n                                                  rloc))\n                         arg-1)\n        ; If they fit, then they are the new arg-1\n        arg-1 (if combined-arg-1 combined-arg-1 arg-1)\n        ; If they fit, then we are still doing modifier if we are already\n        modifier? (if combined-arg-1 modifier? nil)\n        ; If they fit, we need to recalculate the size of arg-1\n        [arg-1-line-count arg-1-max-width :as arg-1-lines]\n          (if combined-arg-1 (style-lines options ind arg-1) arg-1-lines)\n        _ (dbg options\n               \"fzprint-two-up after modifier: arg-1-line-count:\"\n                 arg-1-line-count\n               \"arg-1-max-width:\" arg-1-max-width)\n        lloc (if modifier? rloc lloc)\n        rloc (if modifier? xloc rloc)\n        ;     arg-1-fit-oneline? (and (not force-nl?)\n        ;                             (fzfit-one-line loptions arg-1-lines))\n        arg-1-fit-oneline? (and (not flow?)\n                                (fzfit-one-line loptions arg-1-lines))\n        arg-1-fit? (or arg-1-fit-oneline?\n                       (when (not one-line?) (fzfit loptions arg-1-lines)))\n        ; sometimes arg-1-max-width is nil because fzprint* returned nil,\n        ; but we need to have something for later code to use as a number\n        arg-1-width (- (or arg-1-max-width 0) ind)]\n    ; If we don't *have* an arg-1, no point in continuing...\n    ;  If arg-1 doesn't fit, maybe that's just how it is!\n    ;  If we are in-hang, then we can bail, but otherwise, not.\n    (when (and arg-1 (or arg-1-fit? (not in-hang?)))\n      (cond\n        (= (count pair) 1) [:hang (fzprint* roptions ind lloc)]\n        (or (= (count pair) 2) (and modifier? (= (count pair) 3)))\n          ;concat-no-nil\n          ;  arg-1\n          ; We used to think:\n          ; We will always do hanging, either fully or with one-line? true,\n          ; we will then do flow if hanging didn't do anything or if it did,\n          ; we will try to see if flow is better.\n          ;\n          ; But now, we don't do hang if arg-1-fit-oneline? is false, since\n          ; we won't use it.\n          (let [hanging-width (if justify-width justify-width arg-1-width)\n                hanging-spaces\n                  (if justify-width (inc (- justify-width arg-1-width)) 1)\n                hanging-indent (+ 1 hanging-width ind)\n                flow-indent (+ indent ind)]\n            (if (and (zstring lloc)\n                     (keyword-fn? options (zstring lloc))\n                     (zvector? rloc))\n              ; This is an embedded :let or :when-let or something\n              ; Presently we assume that anything with a vector after something\n              ; that is a keyword must be one of these, but we could check\n              ; for a :binding fn-style instead which might make more sense.\n              (let [[hang-or-flow style-vec] (fzprint-hang-unless-fail\n                                               loptions\n                                               hanging-indent\n                                               flow-indent\n                                               fzprint-binding-vec\n                                               rloc)\n                    arg-1 (if (= hang-or-flow :hang)\n                            (concat-no-nil arg-1\n                                           [[(blanks hanging-spaces) :none\n                                             :whitespace]])\n                            arg-1)]\n                [hang-or-flow (concat-no-nil arg-1 style-vec)])\n              ; This is a normal two element pair thing\n              (let [; Perhaps someday we could figure out if we are already\n                    ; completely in flow to this point, and be smarter about\n                    ; possibly dealing with the hang or flow now.  But for\n                    ; now, we will simply do hang even if arg-1 didn't fit\n                    ; on one line if the flow indent isn't better than the\n                    ; hang indent.\n                    _ (dbg options\n                           \"fzprint-two-up: before hang.  hanging tried?\"\n                           (and arg-1-fit-oneline?\n                                (and (not flow?)\n                                     (>= flow-indent hanging-indent))))\n                    hanging (when (or arg-1-fit-oneline?\n                                      (and (not flow?)\n                                           (>= flow-indent hanging-indent)))\n                              (fzprint* (if (< flow-indent hanging-indent)\n                                          (in-hang local-roptions)\n                                          local-roptions)\n                                        hanging-indent\n                                        rloc))\n                    hang-count (zcount rloc)\n                    _ (log-lines options\n                                 \"fzprint-two-up: hanging:\"\n                                 hanging-indent\n                                 hanging)\n                    hanging-lines (style-lines options hanging-indent hanging)\n                    fit? (fzfit-one-line local-roptions hanging-lines)\n                    hanging-lines (if fit?\n                                    hanging-lines\n                                    (when (and (not one-line?) hang?)\n                                      hanging-lines))\n                    ; Don't flow if it fit, or it didn't fit and we were doing\n                    ; one line on input.  Do flow if we don't have\n                    ; hanging-lines\n                    ; and we were not one-line on input.\n                    _ (log-lines options\n                                 \"fzprint-two-up: hanging-2:\"\n                                 hanging-indent\n                                 hanging)\n                    flow-it? (and (or (and (not hanging-lines) (not one-line?))\n                                      (not (or fit? one-line?)))\n                                  ; this is for situations where the first\n                                  ; element is short and so the hanging indent\n                                  ; is the same as the flow indent, so there\n                                  ; is\n                                  ; no point in flow -- unless we don't have\n                                  ; any hanging-lines, in which case we better\n                                  ; do flow\n                                  (or (< flow-indent hanging-indent)\n                                      (not hanging-lines)))\n                    _ (dbg options\n                           \"fzprint-two-up: before flow. flow-it?\"\n                           flow-it?)\n                    flow (when flow-it? (fzprint* roptions flow-indent rloc))\n                    _ (log-lines options\n                                 \"fzprint-two-up: flow:\"\n                                 (+ indent ind)\n                                 flow)\n                    flow-lines (style-lines options (+ indent ind) flow)]\n                (when dbg-local?\n                  (prn \"fzprint-two-up: local-hang:\" local-hang?)\n                  (prn \"fzprint-two-up: one-line?:\" one-line?)\n                  (prn \"fzprint-two-up: hanging-indent:\" hanging-indent)\n                  (prn \"fzprint-two-up: hanging-lines:\" hanging-lines)\n                  (prn \"fzprint-two-up: flow?:\" flow?)\n                  (prn \"fzprint-two-up: flow-it?:\" flow-it?)\n                  (prn \"fzprint-two-up: fit?:\" fit?)\n                  (prn \"fzprint-two-up: flow-indent:\" flow-indent)\n                  (prn \"fzprint-two-up: hanging:\" (zstring lloc) hanging)\n                  (prn \"fzprint-two-up: (+ indent ind):\" (+ indent ind))\n                  (prn \"fzprint-two-up: flow:\" (zstring lloc) flow))\n                (dbg options \"fzprint-two-up: before good-enough\")\n                (if fit?\n                  [:hang\n                   (concat-no-nil arg-1\n                                  [[(blanks hanging-spaces) :none :whitespace]]\n                                  hanging)]\n                  (when (or hanging-lines flow-lines)\n                    (if (good-enough? caller\n                                      roptions\n                                      :none-two-up\n                                      hang-count\n                                      (- hanging-indent flow-indent)\n                                      hanging-lines\n                                      flow-lines)\n                      [:hang\n                       (concat-no-nil arg-1\n                                      [[(blanks hanging-spaces) :none\n                                        :whitespace]]\n                                      hanging)]\n                      (if justify-width\n                        nil\n                        [:flow\n                         (concat-no-nil arg-1\n                                        [[(str \"\\n\" (blanks (+ indent ind)))\n                                          :none :indent]]\n                                        flow)])))))))\n        :else [:flow ; The following always flows things of 3 or more\n               ; (absent modifers).  If the lloc is a single char,\n               ; then that can look kind of poor.  But that case\n               ; is rare enough that it probably isn't worth dealing\n               ; with.  Possibly a hang-remaining call might fix it.\n               (concat-no-nil\n                 arg-1\n                 #_(fzprint* loptions ind lloc)\n                 [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n                 ; This is a real seq, not a zloc seq\n                 #_(fzprint-remaining-seq options\n                                          (+ indent ind)\n                                          nil\n                                          :force-nl\n                                          (next pair))\n                 (fzprint-flow-seq options\n                                   (+ indent ind)\n                                   (if modifier? (nnext pair) (next pair))\n                                   :force-nl))]))))\n\n;;\n;; # Two-up printing\n;;\n\n(defn fzprint-justify-width\n  \"Figure the width for a justification of a set of pairs in coll.  \n  Also, decide if it makes any sense to justify the pairs at all.\n  For instance, they all need to be one-line.\"\n  [caller {{:keys [justify?]} caller, :as options} ind coll]\n  (let [firsts (remove nil?\n                 (map #(when (> (count %) 1) (fzprint* options ind (first %)))\n                   coll))\n        #_(def just firsts)\n        style-seq (map (partial style-lines options ind) firsts)\n        #_(def styleseq style-seq)\n        each-one-line? (reduce #(when %1 (= (first %2) 1)) true style-seq)\n        #_(def eol each-one-line?)\n        justify-width (when each-one-line?\n                        (reduce #(max %1 (second %2)) 0 style-seq))]\n    (when justify-width (- justify-width ind))))\n\n(defn fit-within?\n  \"Take a size and a collection of vectors with two or more elements\n  per vector.  The elements are zlocs, the vectors are not.  Return\n  the remaining character count or nil if it for sure doesn't fit.\n  In order to be sure it doesn't fit, this version doesn't assume\n  *any* separators, so it really underestimates the size.\"\n  ([size coll depth]\n   (reduce (fn [size element]\n             (or (if (= depth 0)\n                   (fit-within? size element (inc depth))\n                   (let [remaining (- size (count (zstring element)))]\n                     (when (pos? remaining) remaining)))\n                 (reduced nil)))\n     size\n     coll))\n  ([size coll] (fit-within? size coll 0)))\n\n(defn remove-hangflow\n  \"Convert a hangflow style-vec to a regular style-vec.\"\n  [hf-style-vec]\n  (when hf-style-vec (map second hf-style-vec)))\n\n(defn fzprint-map-two-up\n  \"Accept a sequence of pairs, and map fzprint-two-up across those pairs.\n  If you have :one-line? set, this will return nil if it is way over,\n  but it can't accurately tell exactly what will fit on one line, since\n  it doesn't know the separators and such.  So, :one-line? true is a\n  performance optimization, so it doesn't do a whole huge map just to\n  find out that it could not possibly have fit on one line.  So, this\n  returns a sequence of style-vecs, where the indentation for the\n  stuff inside of the pairs is already there, but the separators of\n  the style-vecs (including indentation and commas) is done by the\n  caller of fzprint-map-two-up. Always returns a sequence of vector pairs:\n  [[:hang <style-vec-for-one-pair>] [:flow <style-vec-for-one-pair>] ...].\n  If you want a style vec instead, call remove-hangflow on the return \n  from fzprint-map-two-up.  This will use one-line?, but not check to see\n  that it actually fits.  If you care about that, then you should check the\n  return yourself.  It will, however, make an estimate of whether or not\n  it will fit and if it clearly doesn't, it will return a nil.\"\n  [caller\n   {{:keys [justify? force-nl?]} caller,\n    :keys [width rightcnt one-line? parallel?],\n    :as options} ind commas? coll]\n  (let [caller-map (caller options)\n        len (count coll)\n        justify-width (when (and justify? (not one-line?))\n                        (fzprint-justify-width caller options ind coll))\n        caller-options (when justify-width (options caller))]\n    (dbg-print options\n               \"fzprint-map-two-up: one-line?\" (:one-line? options)\n               \"justify?:\" justify?)\n    ; If it is one-line? and force-nl? and there is more than one thing,\n    ; this can't work.\n    (when (not (and one-line? force-nl? (> len 1)))\n      #_(def jo [])\n      (loop [justify-width justify-width\n             justify-options\n               (if justify-width\n                 (-> options\n                     (merge-deep {caller (caller-options :justify-hang)})\n                     (merge-deep {:tuning (caller-options :justify-tuning)}))\n                 options)]\n        #_(def jo (conj jo [justify-width justify-options]))\n        (let [beginning-coll (butlast coll)\n              beginning-remaining\n                (if one-line? (fit-within? (- width ind) beginning-coll) true)\n              _ (dbg options\n                     \"fzprint-map-two-up: remaining:\" (- width ind)\n                     \"beginning-remaining:\" beginning-remaining)\n              ;\"(butlast coll):\" (butlast coll))\n              beginning (when beginning-remaining\n                          (zpmap options\n                                 (partial fzprint-two-up\n                                          caller\n                                          justify-options\n                                          ind\n                                          commas?\n                                          justify-width\n                                          nil)\n                                 beginning-coll))\n              ; this line will fix the justify, but not necessarily\n              ; the rest of the problems with hangflow output -- like\n              ; the style-lines below.\n              beginning (if (contains-nil? beginning) nil beginning)\n              end-coll [(last coll)]\n              end-remaining (if one-line?\n                              (and beginning\n                                   (fit-within? (- beginning-remaining rightcnt)\n                                                end-coll))\n                              true)\n              _ (dbg options\n                     \"fzprint-map-two-up: beginning-remaining:\"\n                       beginning-remaining\n                     \"rightcnt:\" rightcnt\n                     \"end-remaining:\" end-remaining)\n              ;\"(last coll):\" (last coll))\n              end (when end-remaining\n                    (when-let [end-result (fzprint-two-up caller\n                                                          justify-options\n                                                          ind\n                                                          commas?\n                                                          justify-width\n                                                          :rightmost-pair\n                                                          (first end-coll))]\n                      [end-result]))\n              result (cond (= len 1) end\n                           :else (concat-no-nil beginning end))]\n          (dbg options\n               \"fzprint-map-two-up: len:\" len\n               \"(nil? end):\" (nil? end)\n               \"end:\" end\n               \"(nil? beginning):\" (nil? beginning)\n               \"beginning:\" beginning\n               \"(count end):\" (count end)\n               \"(count beginnging):\" (count beginning)\n               \"justify-width:\" justify-width\n               \"result:\" result)\n          ; if we got a result or we didn't but it wasn't because we\n          ; were trying to justify things\n          (if (or result (not justify-width))\n            result\n            ; try again, without justify-width\n            (recur nil options)))))))\n\n;;\n;; ## Support sorting of map keys\n;;\n\n(defn compare-keys\n  \"Do a key comparison that works well for numbers as well as\n  strings.\"\n  [x y]\n  (cond (and (number? x) (number? y)) (compare x y)\n        :else (compare (str x) (str y))))\n\n(defn compare-ordered-keys\n  \"Do a key comparison that places ordered keys first.\"\n  [key-value zdotdotdot x y]\n  (cond (and (key-value x) (key-value y)) (compare (key-value x) (key-value y))\n        (key-value x) -1\n        (key-value y) +1\n        (= zdotdotdot x) +1\n        (= zdotdotdot y) -1\n        :else (compare-keys x y)))\n\n(defn order-out\n  \"A variety of sorting and ordering options for the output of\n  partition-all-2-nc.  It can sort, which is the default, but if\n  the caller has a key-order vector, it will extract any keys in\n  that vector and place them first (in order) before sorting the\n  other keys.  If sorting is not called for, does nothing.\"\n  [caller\n   {{:keys [sort? sort-in-code? key-order key-value]} caller,\n    :keys [in-code?],\n    :as options} access out]\n  (if (and sort? (if in-code? sort-in-code? true))\n    (sort #((partial compare-ordered-keys (or key-value {}) (zdotdotdot))\n             (zsexpr (access %1))\n             (zsexpr (access %2)))\n          out)\n    out))\n\n(defn pair-element?\n  \"This checks to see if an element should be considered part of a\n  pair if it comes between other elements, and a single element on\n  its own if it would otherwise be the first part of a pair.  Mostly\n  this will trigger on comments, but a #_(...) element will also\n  trigger this.\"\n  [zloc]\n  (or (zcomment? zloc) (zuneval? zloc)))\n\n(defn middle-element?\n  \"This checks to see if an element should be considered the middle element\n  of a pair.  At some point, we can expand this, but for now there is only\n  one middle element.\"\n  [{:keys [in-code?], :as options} zloc]\n  ;  nil)\n  (when (= in-code? \"condp\") (= (zstring zloc) \":>>\")))\n\n;;\n;; # Ignore keys in maps\n;;\n\n(defn remove-key-seq\n  \"If given a non-collection, simply does a dissoc of the key, but\n  if given a sequence of keys, will remove the final one.\"\n  [m ks]\n  (if (coll? ks)\n    (let [this-key (first ks)\n          next-key (next ks)]\n      (if next-key\n        (let [removed-map (remove-key-seq (get m this-key) (next ks))]\n          (if (empty? removed-map)\n            (dissoc m this-key)\n            (assoc m this-key removed-map)))\n        (dissoc m this-key)))\n    (dissoc m ks)))\n\n(defn ignore-key-seq-silent\n  \"Given a map and a key sequence, remove that key sequence if\n  it appears in the map, and terminate the reduce if it changes\n  the map.\"\n  [m ks]\n  (if (coll? ks)\n    (if (= (get-in m ks :zprint-not-found) :zprint-not-found)\n      m\n      (remove-key-seq m ks))\n    (if (= (get m ks :zprint-not-found) :zprint-not-found) m (dissoc m ks))))\n\n(defn ignore-key-seq\n  \"Given a map and a key sequence, remove that key sequence if\n  it appears in the map leaving behind a key :zprint-ignored, \n  and terminate the reduce if it changes the map.\"\n  [m ks]\n  (if (coll? ks)\n    (if (= (get-in m ks :zprint-not-found) :zprint-not-found)\n      m\n      (assoc-in m ks :zprint-ignored))\n    (if (= (get m ks :zprint-not-found) :zprint-not-found)\n      m\n      (assoc m ks :zprint-ignored))))\n\n(defn map-ignore\n  \"Take a map and remove any of the key sequences specified from it.\n  Note that this only works for sexpressions, not for actual zippers.\"\n  [caller {{:keys [key-ignore key-ignore-silent]} caller, :as options} zloc]\n  (let [ignored-silent (if key-ignore-silent\n                         (reduce ignore-key-seq-silent zloc key-ignore-silent)\n                         zloc)\n        ignored (if key-ignore\n                  (reduce ignore-key-seq ignored-silent key-ignore)\n                  ignored-silent)]\n    ignored))\n\n;;\n;; # Pre-processing for two-up printing\n;;\n\n(defn partition-all-2-nc\n  \"Input is (zseqnws zloc) where one assumes that these are pairs.\n  Thus, a seq of zlocs.  Output is a sequence of seqs, where the\n  seqs are usually pairs, but might be single things.  Doesn't pair\n  up comments or #_(...) unevaled sexpressions.  The ones before\n  the first part of a pair come as a single element in what would\n  usually be a pair, and the ones between the first and second parts\n  of a pair come inside the pair.  There may be an arbitrary number\n  of elements between the first and second elements of the pair\n  (one per line).  If there are any comments or unevaled sexpressions,\n  don't sort the keys, as we might lose track of where the comments\n  or unevaled s-expressions go.\"\n  [options coll]\n  (when-not (empty? coll)\n    (let [max-length (get-max-length options)]\n      (loop [remaining coll\n             no-sort? nil\n             index 0\n             out (transient [])]\n        (if-not remaining\n          [no-sort? (persistent! out)]\n          (let [[new-remaining pair-vec new-no-sort?]\n                  (cond\n                    (pair-element? (first remaining)) [(next remaining)\n                                                       [(first remaining)] true]\n                    (or (pair-element? (second remaining))\n                        (middle-element? options (second remaining)))\n                      (let [[comment-seq rest-seq]\n                              ;(split-with pair-element? (next remaining))\n                              (split-with #(or (pair-element? %)\n                                               (middle-element? options %))\n                                          (next remaining))]\n                        [(next rest-seq)\n                         (into []\n                               (concat [(first remaining)]\n                                       comment-seq\n                                       [(first rest-seq)])) true])\n                    (= (count remaining) 1) [(next remaining)\n                                             [(first remaining)] nil]\n                    :else [(next (next remaining))\n                           [(first remaining) (second remaining)] nil])]\n            #_(println \"partition-all-2-nc: count new-remaining:\"\n                       (count new-remaining))\n            (recur (cond (< (inc index) max-length) new-remaining\n                         (and (= (inc index) max-length) new-remaining)\n                           (list (zdotdotdot))\n                         :else nil)\n                   (or no-sort? new-no-sort?)\n                   (inc index)\n                   (conj! out pair-vec))))))))\n\n;;\n;; ## Multi-up printing pre-processing\n;;\n\n(defn cleave-end\n  \"Take a seq, and if it is contains a single symbol, simply return\n  it in another seq.  If it contains something else, remove any non\n  collections off of the end and return them in their own double seqs,\n  as well as return the remainder (the beginning) as a double seq.\"\n  [coll]\n  (if (or (zsymbol? (first coll)) (zreader-cond-w-symbol? (first coll)))\n    ;(symbol? (first coll))\n    (list coll)\n    (let [rev-seq (reverse coll)\n          [split-non-coll _]\n            ;(split-with (comp not zcoll?) rev-seq)\n            (split-with #(not (or (zcoll? %) (zreader-cond-w-coll? %)))\n                        rev-seq)\n          #_(def sncce split-non-coll)\n          split-non-coll (map list (reverse split-non-coll))\n          remainder (take (- (count coll) (count split-non-coll)) coll)]\n      (if (empty? remainder)\n        split-non-coll\n        (concat (list remainder) split-non-coll)))))\n\n(defn partition-all-sym\n  \"Similar to partition-all-2-nc, but instead of trying to pair things\n  up (modulo comments and unevaled expressions), this begins things\n  with a symbol, and then accumulates collections until the next symbol.\n  Returns a seq of seqs, where the first thing in each internal seq is\n  a protocol and the remaining thing in that seq are the expressions that\n  follow.  If there is a single thing, it is returned in its own internal\n  seq. ((P (foo [this a) (bar-me [this] b) (barx [this y] (+ c y))) ...)\n  Made harder by the fact that the symbol might be inside of a #?() reader\n  conditional.  It handles comments before symbols on the symbol indent, \n  and the comments before the collections on the collection indent.  \n  Since it doesn't know how many collections there are, this is not trivial.  \n  Must be called with a sequence of z-things\"\n  [options modifier-set coll]\n  #_(prn \"partition-all-sym-static:\" modifier-set)\n  #_(def scoll coll)\n  (dbg options \"partition-all-sym: coll:\" (map zstring coll))\n  (let [part-sym (partition-by\n                   #(or (zsymbol? %) (znil? %) (zreader-cond-w-symbol? %))\n                   coll)\n        split-non-coll (mapcat cleave-end part-sym)]\n    #_(def ps part-sym)\n    #_(def snc split-non-coll)\n    (loop [remaining split-non-coll\n           out (transient [])]\n      #_(prn \"remaining:\" remaining)\n      #_(prn \"out:\" out)\n      ;(prn \"remaining:\" (map (comp zstring first) remaining))\n      ;(prn \"out:\" (map (comp zstring first) out))\n      (if (empty? remaining)\n        (persistent! out)\n        (let [[next-remaining new-out]\n                (cond\n                  (and (or (zsymbol? (ffirst remaining))\n                           (znil? (ffirst remaining))\n                           (zreader-cond-w-symbol? (ffirst remaining)))\n                       (not (empty? (second remaining))))\n                    ; We have a non-collection in (first remaining) and\n                    ; we might have more than one, either because we just\n                    ; have a bunch of non-colls with no colls\n                    ; or because we have a modifier and then one or more\n                    ; non-colls (possibly with their own modifiers).\n                    (if (= (count (first remaining)) 1)\n                      ; original\n                      (do #_(prn \"a:\")\n                          ; We have a single non-coll, pull the next seq\n                          ; of one or more seqs into a seq with it.\n                          ; This is where we marry up the non-coll with\n                          ; all of its associated colls.\n                          [(nthnext remaining 2)\n                           (conj! out\n                                  (concat (first remaining)\n                                          (second remaining)))])\n                      (do #_(prn \"b:\")\n                          (if (and modifier-set\n                                   (modifier-set (zstring (ffirst remaining))))\n                            (if (= (count (first remaining)) 2)\n                              ; We have exactly two things in\n                              ; (first remaining), and the first one is\n                              ; both a non-coll and a modifier, so we know\n                              ; that the second one is a non-coll, and we\n                              ; know that we have a (second remaining) from\n                              ; above, so we bring the second remaining\n                              ; into the first remaining like we did\n                              ; above\n                              (do #_(prn \"d:\")\n                                  [(nthnext remaining 2)\n                                   (conj! out\n                                          (concat (first remaining)\n                                                  (second remaining)))])\n                              ; We have a modifier as the first thing in a\n                              ; seq of non-colls and then some more non-colls\n                              ; after that (since we don't have exactly two,\n                              ; as that case was caught above).\n                              ; Pull the next one into a seq with it.\n                              ; Do we need to check that the next one is\n                              ; also a non-coll?  That shouldn't be\n                              ; necessary,as you won't get colls in\n                              ;with non-colls.\n                              (do #_(prn \"c:\")\n                                  [(if (next (next (first remaining)))\n                                     (cons (next (next (first remaining)))\n                                           (next remaining))\n                                     (next remaining))\n                                   (conj! out\n                                          (list (ffirst remaining)\n                                                (second (first remaining))))]))\n                            ; we have more than one non-coll in first\n                            ; remaining, so pull one out, and leave the\n                            ; next ones for the next loop\n                            [(cons (next (first remaining)) (next remaining))\n                             (conj! out (list (ffirst remaining)))])))\n                  :else [(next remaining) (conj! out (first remaining))])]\n          (recur next-remaining new-out))))))\n\n(defn rstr-vec\n  \"Create an r-str-vec with, possibly, a newline at the beginning if\n  the last thing before it is a comment.\"\n  ([options ind zloc r-str r-type]\n   (let [nl (when (zcomment? (zlast zloc))\n              [[(str \"\\n\" (blanks ind)) :none :indent]])]\n     (concat nl\n             [[r-str (zcolor-map options (or r-type r-str))\n               (or r-type :right)]])))\n  ([options ind zloc r-str] (rstr-vec options ind zloc r-str nil)))\n\n(defn fzprint-binding-vec\n  [{{:keys [nl-separator?]} :binding, :as options} ind zloc]\n  (dbg options \"fzprint-binding-vec:\" (zstring (zfirst zloc)))\n  (let [options (rightmost options)\n        l-str \"[\"\n        r-str \"]\"\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options (inc ind) zloc r-str)]\n    (dbg-form options\n              \"fzprint-binding-vec exit:\"\n              (if (= (zcount zloc) 0)\n                (concat-no-nil l-str-vec r-str-vec)\n                (concat-no-nil\n                  l-str-vec\n                  (interpose-nl-hf\n                    (:binding options)\n                    (inc ind)\n                    (fzprint-map-two-up\n                      :binding\n                      options\n                      (inc ind)\n                      false\n                      (second (partition-all-2-nc options (zseqnws zloc)))))\n                  r-str-vec)))))\n\n(defn fzprint-hang\n  \"Try to hang something and try to flow it, and then see which is\n  better.  Has hang and flow indents. fzfn is the function to use \n  to do zloc.  Note what fzfn does with the input.  For instance,\n  fzprint-pairs does a (zmap-right identity zloc).  Presumably the\n  caller knows what the fzfn does, so it has to count the items\n  itself and pass it in here as zloc-count if it isn't just (zcount zloc).\"\n  [{:keys [one-line?], :as options} caller hindent findent fzfn zloc-count zloc]\n  (dbg options \"fzprint-hang:\" (zstring (zfirst zloc)) \"caller:\" caller)\n  (let [hanging (when (and (not= hindent findent) ((options caller) :hang?))\n                  (concat-no-nil [[(str \" \") :none :whitespace]]\n                                 (fzfn (in-hang options) hindent zloc)))\n        hang-count (or zloc-count (zcount zloc))\n        hr-lines (style-lines options (dec hindent) hanging)\n        ;flow (fzfn options findent zloc)\n        ]\n    (if (or (fzfit-one-line options hr-lines) one-line?)\n      hanging\n      (let [flow (concat-no-nil [[(str \"\\n\" (blanks findent)) :none :indent]]\n                                (fzfn options findent zloc))\n            _ (log-lines options \"fzprint-hang: flow:\" findent flow)\n            fd-lines (style-lines options findent flow)\n            _ (dbg options\n                   \"fzprint-hang: ending: hang-count:\" hang-count\n                   \"hanging:\" hanging\n                   \"flow:\" flow)\n            hr-good? (when (:hang? (caller options))\n                       (good-enough? caller\n                                     options\n                                     :none-hang\n                                     hang-count\n                                     (- hindent findent)\n                                     hr-lines\n                                     fd-lines))]\n        (if hr-good? hanging flow)))))\n\n(defn fzprint-pairs\n  \"Always prints pairs on a different line from other pairs.\"\n  [{{:keys [nl-separator?]} :pair, :as options} ind zloc]\n  (dbg options \"fzprint-pairs:\" (zstring (zfirst zloc)))\n  (dbg-form\n    options\n    \"fzprint-pairs: exit:\"\n    (interpose-nl-hf\n      (:pair options)\n      ind\n      (fzprint-map-two-up\n        :pair\n        options\n        ind\n        false\n        (let [[_ part] (partition-all-2-nc options (zmap-right identity zloc))]\n          #_(def fp part)\n          (dbg options\n               \"fzprint-pairs: partition:\"\n               (map (comp zstring first) part))\n          part)))))\n\n(defn fzprint-extend\n  \"Print things with a symbol and collections following.  Kind of like with\n  pairs, but not quite. This skips over zloc and does everything to the\n  right of it!\"\n  [{{:keys [nl-separator?]} :extend, :as options} ind zloc]\n  #_(def fezloc zloc)\n  (dbg options \"fzprint-extend:\" (zstring (zfirst zloc)))\n  (dbg-form\n    options\n    \"fzprint-extend: exit:\"\n    (interpose-nl-hf\n      (:extend options)\n      ind\n      (fzprint-map-two-up\n        :extend\n        (assoc options :fn-style :fn)\n        ind\n        false\n        (let [part (partition-all-sym options\n                                      (:modifiers (:extend options))\n                                      (zmap-right identity zloc))]\n          #_(def fe part)\n          (dbg options \"fzprint-extend: partition:\" (map #(map zstring %) part))\n          part)))))\n\n(defn concatv!\n  \"Given a transient vector v, concatenate all of the other\n  elements in all of the remaining collections onto v.\"\n  [v & rest]\n  (loop [cols rest\n         out v]\n    (if cols\n      (recur (next cols)\n             (loop [col (first cols)\n                    out out]\n               (if col (recur (next col) (conj! out (first col))) out)))\n      out)))\n\n(defn fzprint-one-line\n  \"Do a fzprint-seq like thing, but do it incrementally and\n  if it gets too big, return nil.\"\n  [options ind zloc]\n  (dbg-print options \"fzprint-one-line:\")\n  (let [seq-right (zmap identity zloc)\n        len (count seq-right)\n        last-index (dec len)\n        gt-1? (> (count seq-right) 1)\n        options (assoc options :one-line? true)]\n    (loop [zloc-seq seq-right\n           new-ind (long ind)\n           index 0\n           out (transient [])]\n      (if (empty? zloc-seq)\n        (do (dbg options \"fzprint-one-line: exiting count:\" (count out))\n            (persistent! out))\n        (let [next-zloc (first zloc-seq)\n              [sep next-options]\n                (cond ; this needs to come first in case there\n                      ; is only one\n                      ; element in the list -- it needs to have\n                      ; the rightcnt\n                      ; passed through\n                      (= index last-index) [(if-not (zero? index)\n                                              [[\" \" :none :whitespace]])\n                                            options]\n                      (= index 0) [nil (not-rightmost options)]\n                      :else [[[\" \" :none :whitespace]] (not-rightmost options)])\n              next-out (fzprint* next-options new-ind next-zloc)\n              _ (log-lines options \"fzprint-one-line:\" new-ind next-out)\n              [line-count max-width :as next-lines]\n                (style-lines options new-ind next-out)]\n          (if-not (fzfit-one-line next-options next-lines)\n            (do (dbg options\n                     \"fzprint-one-line: failed, too wide or too many lines!\")\n                nil)\n            (recur (next zloc-seq)\n                   (inc (long max-width))\n                   (inc index)\n                   (concatv! out sep next-out))))))))\n\n(defn fzprint-seq\n  \"Take a seq of a zloc, created by (zmap identity zloc) when zloc\n  is a collection, or (zmap-right identity zloc) when zloc is already\n  inside of a collection, and return a seq of the fzprint* of each \n  element.  No spacing between any of these elements. Note that this\n  is not a style-vec, but a seq of style-vecs of each of the elements.\n  These would need to be concatenated together to become a style-vec.\n  ind is either a constant or a seq of indents, one for each element in\n  zloc-seq.\"\n  [options ind zloc-seq]\n  (let [max-length (get-max-length options)\n        len (count zloc-seq)\n        zloc-seq (if (> len max-length)\n                   (concat (take max-length zloc-seq) (list (zdotdotdot)))\n                   zloc-seq)\n        len (count zloc-seq)]\n    (dbg options \"fzprint-seq: (count zloc-seq):\" len \"max-length:\" max-length)\n    (cond\n      (empty? zloc-seq) nil\n      (zero? max-length) [[[\"#?#\" (zcolor-map options :keyword) :element]]]\n      :else (let [left (zpmap options\n                              #(fzprint* (not-rightmost options) %1 %2)\n                              (if (coll? ind) ind (repeat ind))\n                              (butlast zloc-seq))\n                  right [(fzprint* options\n                                   (if (coll? ind) (last ind) ind)\n                                   (last zloc-seq))]]\n              (cond (= len 1) right\n                    :else (concat-no-nil left right))))))\n\n(defn fzprint-flow-seq\n  \"Take a seq of a zloc, created by (zmap identity zloc) or\n  and return a style-vec of the result.  Either it fits on one line, \n  or it is rendered on multiple lines.  You can force multiple lines \n  with force-nl?. If you want it to do less than everything in the \n  original zloc, modify the result of (zmap identity zloc) to just \n  contain what you want to print. ind is either a single indent,\n  or a seq of indents, one for each element in zloc-seq.\"\n  ([options ind zloc-seq force-nl?]\n   (dbg options \"fzprint-flow-seq: count zloc-seq:\" (count zloc-seq))\n   (let [coll-print (fzprint-seq options ind zloc-seq)\n         one-line (apply concat-no-nil\n                    (interpose [[\" \" :none :whitespace]] coll-print))\n         _ (log-lines options \"fzprint-flow-seq:\" ind one-line)\n         one-line-lines (style-lines options ind one-line)]\n     (dbg-form\n       options\n       \"fzprint-flow-seq: exit:\"\n       (if (and (not force-nl?) (fzfit-one-line options one-line-lines))\n         one-line\n         (apply concat-no-nil\n           (if (coll? ind)\n             (drop 1\n                   (interleave\n                     (map #(vector [(str \"\\n\" (blanks %)) :none :indent]) ind)\n                     coll-print))\n             (interpose [[(str \"\\n\" (blanks ind)) :none :indent]]\n               coll-print)))))))\n  ([options ind zloc-seq] (fzprint-flow-seq options ind zloc-seq nil)))\n\n\n(defn fzprint-hang-one\n  \"Try out the given zloc, and if it fits on the current line, just\n  do that. It might fit on the same line, as this may not be the rest\n  of the list that we are printing. If not, check it out with good-enough?\n  and do the best you can.  Three choices, really: fits on same line, \n  does ok as hanging, or better with flow. hindent is hang-indent, and \n  findent is flow-indent, and each contains the initial separator.  \n  Might be nice if the fn-style actually got sent to this fn.\"\n  [caller {:keys [one-line?], :as options} hindent findent zloc]\n  (dbg options \"fzprint-hang-one: hindent:\" hindent \"findent:\" findent)\n  (when (:dbg-hang options)\n    (println (dots (:pdepth options))\n             \"h1 caller:\"\n             caller\n             (zstring (if (zcoll? zloc) (zfirst zloc) zloc))))\n  (let [local-options (if (and (not one-line?) (not (:hang? (caller options))))\n                        (assoc options :one-line? true)\n                        options)\n        ; If we don't have an hindent, we better not be trying to hang\n        ; things -- in this case, we'll just flow.\n        hindent (or hindent findent)\n        hanging (when (not= hindent findent)\n                  (fzprint* (in-hang local-options) hindent zloc))\n        hang-count (zcount zloc)\n        hanging (concat-no-nil [[\" \" :none :whitespace]] hanging)\n        _ (log-lines options \"fzprint-hang-one: hanging:\" (dec hindent) hanging)\n        hr-lines (style-lines options (dec hindent) hanging)]\n    _\n    (dbg options\n         \"fzprint-hang-one: hr-lines:\" hr-lines\n         \"hang-count:\" hang-count)\n    ; if hanging is nil and one-line? is true, then we didn't fit\n    ; and should exit\n    ;\n    ; if hanging is nil and one-line? is nil, and hang? nil,\n    ; then we we don't hang and this didn't fit on the same\n    ; line and we should contine\n    ;\n    ; if hanging is true, then if one-line? is true and fzfit-one-line\n    ; is true, then we just go with hanging\n    ;\n    ; if hanging is true and if fzfit-one-line is true, then we go\n    ; with hanging.  Which is probably the same as just above.\n    ;\n    ; if hanging is true and if one-line? is nil, and if hang? is\n    ; nil, and fzfit-one-line is true then it fit on one line and we\n    ; should go with hanging.\n    ;\n    ;\n    ; Summary:\n    ;\n    ; go with hanging if:\n    ;\n    ;  o fzfit-one-line true\n    ;  o one-line? true\n    ;\n    ; Otherwise, see about flow too\n    ;\n    (if (or (fzfit-one-line options hr-lines) one-line?)\n      hanging\n      (let [flow (concat-no-nil [[(str \"\\n\" (blanks findent)) :none :indent]]\n                                (fzprint* options findent zloc))\n            _ (log-lines options \"fzprint-hang-one: flow:\" findent flow)\n            fd-lines (style-lines options findent flow)\n            _ (dbg options \"fzprint-hang-one: fd-lines:\" fd-lines)\n            _ (dbg options\n                   \"fzprint-hang-one: ending: hang-count:\" hang-count\n                   \"hanging:\" (pr-str hanging)\n                   \"flow:\" (pr-str flow))\n            hr-good? (and (:hang? (caller options))\n                          (good-enough? caller\n                                        options\n                                        :none-hang-one\n                                        hang-count\n                                        (- hindent findent)\n                                        hr-lines\n                                        fd-lines))]\n        (if hr-good? hanging flow)))))\n\n;;\n;; # Constant pair support\n;;\n\n(defn count-constant-pairs\n  \"Given a seq of zlocs, work backwards from the end, and see how\n  many elements are pairs of constants (using zconstant?).  So that\n  (... :a (stuff) :b (bother)) returns 4, since both :a and :b are\n  zconstant? true. This is made more difficult by having to skip\n  comments along the way as part of the pair check, but keep track\n  of the ones we skip so the count is right in the end.  We don't\n  expect any whitespace in this, because this seq should have been\n  produced by zmap-right or its equivalent, which already skips the\n  whitespace.\"\n  [seq-right]\n  (loop [seq-right-rev (reverse seq-right)\n         element-count 0\n         ; since it is reversed, we need a constant second\n         constant-required? nil\n         pair-size 0]\n    (let [element (first seq-right-rev)]\n      (if (empty? seq-right-rev)\n        ; remove potential elements of this pair, since we haven't\n        ; seen the end of it\n        (- element-count pair-size)\n        (let [comment? (zcomment? element)]\n          (if (and (not comment?) constant-required? (not (zconstant? element)))\n            ; we counted the right-hand and any comments of this pair, but it\n            ; isn't a pair so exit now with whatever we have so far\n            (- element-count pair-size)\n            (recur (next seq-right-rev)\n                   (inc element-count)\n                   (if comment? constant-required? (not constant-required?))\n                   (if (and constant-required? (not comment?))\n                     ; must be a constant, so start count over\n                     0\n                     (inc pair-size)))))))))\n\n(defn constant-pair\n  \"Argument is result of (zmap-right identity zloc), that is to say\n  a seq of zlocs.  Output is a [pair-seq non-paired-item-count],\n  if any.  If there are no pair-seqs, pair-seq must be nil, not\n  an empty seq.\"\n  [caller {{:keys [constant-pair? constant-pair-min]} caller, :as options}\n   seq-right]\n  (if constant-pair?\n    (let [paired-item-count (count-constant-pairs seq-right)\n          non-paired-item-count (- (count seq-right) paired-item-count)\n          _ (dbg options\n                 \"constant-pair: non-paired-items:\"\n                 non-paired-item-count)\n          pair-seq (when (>= paired-item-count constant-pair-min)\n                     (second (partition-all-2-nc options\n                                                 (drop non-paired-item-count\n                                                       seq-right))))]\n      [pair-seq non-paired-item-count])\n    [nil (count seq-right)]))\n\n;;\n;; # Take into account constant pairs\n;;\n\n(declare interpose-either-nl-hf)\n\n(declare fzprint-hang-remaining)\n\n#_(defn fzprint-hang-remaining-perf-vs-format\n    \"zloc is already down inside a collection, it is not the collection\n  itself. Operate on what is to the right of zloc.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc.\"\n    ([caller\n      {:keys [dbg? depth perf-vs-format],\n       {:keys [hang? constant-pair? constant-pair-min hang-expand hang-diff\n               nl-separator?]}\n         caller,\n       :as options} hindent findent zloc fn-style zloc-count]\n     (when (:dbg-hang options)\n       (println (dots (:pdepth options)) \"hr\" (zstring zloc)))\n     (dbg options\n          \"fzprint-hang-remaining:\" (zstring zloc)\n          \"hindent:\" hindent\n          \"findent:\" findent\n          \"caller:\" caller\n          \"nl-separator?:\" nl-separator?)\n     ; (in-hang options) slows things down here, for some reason\n     (let [seq-right (zmap-right identity zloc)\n           seq-right (if zloc-count (take zloc-count seq-right) seq-right)\n           [pair-seq non-paired-item-count]\n             (constant-pair caller options seq-right)\n           _ (dbg options\n                  \"fzprint-hang-remaining count pair-seq:\"\n                  (count pair-seq))\n           hang? (and hang?\n                      ; This is a key for \"don't hang no matter what\", it isn't\n                      ; about making it prettier. People call this routine with\n                      ; these values equal to ensure that it always flows.\n                      (not= hindent findent)\n                      ;flow-lines\n                      ;;TODO make this uneval!!!\n                      #_(or (<= (- hindent findent) hang-diff)\n                            (<= (/ (dec (first flow-lines)) (count seq-right))\n                                hang-expand)))\n           ; The zfuture options, below, kicks this off in a separate thread,\n           ; and the subsequent zat waits for it to complete.\n           hanging\n             (#?@(:clj [zfuture options]\n                  :cljs [do])\n              (let [hang-result\n                      (when hang?\n                        (if-not pair-seq\n                          ; There are no paired elements\n                          (apply concat-no-nil\n                            (interpose [[(str \"\\n\" (blanks hindent)) :none\n                                         :indent]]\n                              (fzprint-seq (in-hang options)\n                                           hindent\n                                           seq-right)))\n                          (if (not (zero? non-paired-item-count))\n                            (concat-no-nil\n                              ; The elements that are not paired\n                              (dbg-form\n                                options\n                                \"fzprint-hang-remaining: mapv:\"\n                                (apply concat-no-nil\n                                  (interpose [[(str \"\\n\" (blanks hindent)) :none\n                                               :indent]]\n                                    (zpmap\n                                      options\n                                      (partial fzprint*\n                                               (not-rightmost (in-hang options))\n                                               hindent)\n                                      (take non-paired-item-count seq-right)))))\n                              ; Got to separate them because they were done in\n                              ; two\n                              ; pieces\n                              [[(str \"\\n\" (blanks hindent)) :none :indent]]\n                              ; The elements that are paired\n                              (dbg-form options\n                                        \"fzprint-hang-remaining: fzprint-hang:\"\n                                        (interpose-nl-hf\n                                          (:pair options)\n                                          hindent\n                                          (fzprint-map-two-up :pair\n                                                              ;caller\n                                                              (in-hang options)\n                                                              hindent\n                                                              nil\n                                                              pair-seq))))\n                            ; All elements are paired\n                            (interpose-nl-hf\n                              (:pair options)\n                              hindent\n                              (fzprint-map-two-up :pair\n                                                  ;caller\n                                                  (in-hang options)\n                                                  hindent\n                                                  nil\n                                                  pair-seq)))))]\n                [hang-result (style-lines options hindent hang-result)]))\n           flow\n             (#?@(:clj [zfuture options]\n                  :cljs [do])\n              (let [flow-result\n                      (if-not pair-seq\n                        ; We don't have any constant pairs\n                        (apply concat-no-nil\n                          (interpose [[(str \"\\n\" (blanks findent)) :none\n                                       :indent]]\n                            (fzprint-seq options findent seq-right)))\n                        (if (not (zero? non-paired-item-count))\n                          ; We have constant pairs, ; but they follow\n                          ; some stuff that isn't paired.\n                          (concat-no-nil\n                            ; The elements that are not pairs\n                            (apply concat-no-nil\n                              (interpose [[(str \"\\n\" (blanks findent)) :none\n                                           :indent]]\n                                (zpmap options\n                                       (partial fzprint*\n                                                (not-rightmost options)\n                                                findent)\n                                       (take non-paired-item-count seq-right))))\n                            ; Got to separate them since we are doing them in\n                            ; two\n                            ; pieces\n                            [[(str \"\\n\" (blanks findent)) :none :indent]]\n                            ; The elements that are constant pairs\n                            (interpose-nl-hf (:pair options)\n                                             findent\n                                             (fzprint-map-two-up :pair\n                                                                 ;caller\n                                                                 options\n                                                                 findent\n                                                                 nil\n                                                                 pair-seq)))\n                          ; This code path is where we have all constant pairs.\n                          (interpose-nl-hf (:pair options)\n                                           findent\n                                           (fzprint-map-two-up :pair\n                                                               ;caller\n                                                               options\n                                                               findent\n                                                               nil\n                                                               pair-seq))))]\n                [flow-result (style-lines options findent flow-result)]))\n           ; Now that we have also kicked off a flow, let's see if there\n           ; is any point in waiting for it?\n           [hanging hanging-lines] (zat options hanging)\n           hang-count (count seq-right)\n           _ (log-lines options\n                        \"fzprint-hang-remaining: hanging:\"\n                        hindent\n                        hanging)\n           _ (dbg options\n                  \"fzprint-hang-remaining: hanging-lines:\" hanging-lines\n                  \"hang-count:\" hang-count)\n           ; flow? is -- should we wait for the flow to complete, or ignore it?\n           flow?\n             (if perf-vs-format\n               (if (> depth perf-vs-format)\n                 ;this is \"if it hangs, take it\": (if hanging nil true)\n                 ;this is \"if it hangs and isn't too bad, take it\"\n                 (if (and hanging (number? (first hanging-lines)))\n                   (not (<= (/ (dec (first hanging-lines)) (count seq-right))\n                            hang-expand))\n                   true)\n                 true)\n               true)\n           #_(options (let [[_ _ _ b-what] flow-lines]\n                        (if b-what (assoc options :dbg? true) options)))\n           #_(dbg options\n                  \"fzprint-hang-remaining: *=*=*=*=*=*\" (zstring zloc)\n                  \"hindent:\" hindent\n                  \"findent:\" findent\n                  \"caller:\" caller\n                  \"hang?\" hang?\n                  \"hang-diff\" hang-diff)\n           ; Now determine if there is any point in doing a hang, because\n           ; if the flow is beyond the expand limit, there is really no\n           ; chance that the hang is not beyond the expand limit.\n           ; This is what good-enough? does:\n           ;  (<= (/ (dec p-lines) p-count) hang-expand)\n           ;  Also need to account for the indent diffs.\n           ; Would be nice to move this into a common routine, since this\n           ; duplicates logic in good-enough?\n           ;\n           ; Yes, and this caused a proble when I put in the\n           ; hang-if-equal-flow? option in good-enough, so that now\n           ; we can't cancel the hang even though we are beyond the hang-expand\n           ; because the hang might be the same as the flow, and in that case\n           ; we don't really care how long the hang-expand is. We could make\n           ; this a feature, by having a large-ish hang-expand and having it\n           ; override hang-if-equal-flow.  If we do that, we have to reorder\n           ; the checks in good-enough to put the hang-expand check first.\n           ; I can't see any great reason for doing a flow if the hang and\n           ; flow are equal, though, so we won't do that now.  And this\n           ; code comes out.\n           ; We used to calculate hang-count by doing the hang an then counting\n           ; the output.  But ultimately this is simple a series of map calls\n           ; to the elements of seq-right, so we go right to the source for this\n           ; number now.  That let's us move the interpose calls above this\n           ; point.\n           [flow flow-lines] (when flow? (zat options flow))]\n       (dbg options \"fzprint-hang-remaining: flow-lines:\" flow-lines)\n       (when dbg?\n         (if (zero? hang-count)\n           (println \"hang-count = 0:\" (str (zmap-right zstring zloc)))))\n       (log-lines options \"fzprint-hang-remaining: flow\" findent flow)\n       (if flow-lines\n         (if (good-enough? caller\n                           options\n                           fn-style\n                           hang-count\n                           (- hindent findent)\n                           hanging-lines\n                           flow-lines)\n           (concat-no-nil [[\" \" :none :whitespace]] hanging)\n           (concat-no-nil [[(str \"\\n\" (blanks findent)) :none :indent]] flow))\n         (when hanging-lines\n           (concat-no-nil [[\" \" :none :whitespace]] hanging)))))\n    ([caller options hindent findent zloc fn-style]\n     (fzprint-hang-remaining caller options hindent findent zloc fn-style nil)))\n\n;\n; This fzprint-hang-remaining doesn't overlap the hang and the flow,\n; but does the hang first, and if we are at a sufficient depth in\n; perf-vs-format, then we don't flow if the hang worked.  A better\n; approach would be to do the overlapped hang and flow unless we\n; were at or beyond that critical depth, and then do one or the other.\n; Even with the totally serial nature of this, it isn't terribly slower\n; when perf-vs-format is nil, and it is maybe 86% of the time it takes\n; when perf-vs-format is 5, for fzprint-list*.  Which isn't nothing.\n; Obviously only interesting on a function where it gets deeper than\n; whatever depth you specify.  Not going to use it now, but not going\n; to get rid of it either.\n;\n#_(defn fzprint-hang-remaining-serial\n    \"zloc is already down inside a collection, it is not the collection\n  itself. Operate on what is to the right of zloc.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc.\"\n    ([caller\n      {:keys [dbg? depth perf-vs-format],\n       {:keys [hang? constant-pair? constant-pair-min hang-expand hang-diff\n               nl-separator?]}\n         caller,\n       :as options} hindent findent zloc fn-style zloc-count]\n     (when (:dbg-hang options)\n       (println (dots (:pdepth options)) \"hr\" (zstring zloc)))\n     (dbg options\n          \"fzprint-hang-remaining:\" (zstring zloc)\n          \"hindent:\" hindent\n          \"findent:\" findent\n          \"caller:\" caller\n          \"nl-separator?:\" nl-separator?)\n     ; (in-hang options) slows things down here, for some reason\n     (let [seq-right (zmap-right identity zloc)\n           seq-right (if zloc-count (take zloc-count seq-right) seq-right)\n           [pair-seq non-paired-item-count]\n             (constant-pair caller options seq-right)\n           _ (dbg options\n                  \"fzprint-hang-remaining count pair-seq:\"\n                  (count pair-seq))\n           hang? (and hang?\n                      ; This is a key for \"don't hang no matter what\", it isn't\n                      ; about making it prettier. People call this routine with\n                      ; these values equal to ensure that it always flows.\n                      (not= hindent findent)\n                      ;flow-lines\n                      ;;TODO make this uneval!!!\n                      #_(or (<= (- hindent findent) hang-diff)\n                            (<= (/ (dec (first flow-lines)) (count seq-right))\n                                hang-expand)))\n           ; The zfuture options, below, kicks this off in a separate thread,\n           ; and the subsequent zat waits for it to complete.\n           hanging\n             (#?@(:clj [zfuture options]\n                  :cljs [do])\n              (let [hang-result\n                      (when hang?\n                        (if-not pair-seq\n                          ; There are no paired elements\n                          (apply concat-no-nil\n                            (interpose [[(str \"\\n\" (blanks hindent)) :none\n                                         :indent]]\n                              (fzprint-seq (in-hang options)\n                                           hindent\n                                           seq-right)))\n                          (if (not (zero? non-paired-item-count))\n                            (concat-no-nil\n                              ; The elements that are not paired\n                              (dbg-form\n                                options\n                                \"fzprint-hang-remaining: mapv:\"\n                                (apply concat-no-nil\n                                  (interpose [[(str \"\\n\" (blanks hindent)) :none\n                                               :indent]]\n                                    (zpmap\n                                      options\n                                      (partial fzprint*\n                                               (not-rightmost (in-hang options))\n                                               hindent)\n                                      (take non-paired-item-count seq-right)))))\n                              ; Got to separate them because they were done in\n                              ; two\n                              ; pieces\n                              [[(str \"\\n\" (blanks hindent)) :none :indent]]\n                              ; The elements that are paired\n                              (dbg-form options\n                                        \"fzprint-hang-remaining: fzprint-hang:\"\n                                        (interpose-nl-hf\n                                          (:pair options)\n                                          hindent\n                                          (fzprint-map-two-up :pair\n                                                              ;caller\n                                                              (in-hang options)\n                                                              hindent\n                                                              nil\n                                                              pair-seq))))\n                            ; All elements are paired\n                            (interpose-nl-hf\n                              (:pair options)\n                              hindent\n                              (fzprint-map-two-up :pair\n                                                  ;caller\n                                                  (in-hang options)\n                                                  hindent\n                                                  nil\n                                                  pair-seq)))))]\n                [hang-result (style-lines options hindent hang-result)]))\n           [hanging hanging-lines] (zat options hanging)\n           hang-count (count seq-right)\n           _ (log-lines options\n                        \"fzprint-hang-remaining: hanging:\"\n                        hindent\n                        hanging)\n           _ (dbg options\n                  \"fzprint-hang-remaining: hanging-lines:\" hanging-lines\n                  \"hang-count:\" hang-count)\n           flow?\n             (if perf-vs-format\n               (if (> depth perf-vs-format)\n                 ;this is \"if it hangs, take it\": (if hanging nil true)\n                 ;this is \"if it hangs and isn't too bad, take it\"\n                 (if (and hanging (number? (first hanging-lines)))\n                   (not (<= (/ (dec (first hanging-lines)) (count seq-right))\n                            hang-expand))\n                   true)\n                 true)\n               true)\n           flow\n             (#?@(:clj [zfuture options]\n                  :cljs [do])\n              (let [flow-result\n                      (when flow?\n                        (if-not pair-seq\n                          ; We don't have any constant pairs\n                          (apply concat-no-nil\n                            (interpose [[(str \"\\n\" (blanks findent)) :none\n                                         :indent]]\n                              (fzprint-seq options findent seq-right)))\n                          (if (not (zero? non-paired-item-count))\n                            ; We have constant pairs, ; but they follow\n                            ; some stuff that isn't paired.\n                            (concat-no-nil\n                              ; The elements that are not pairs\n                              (apply concat-no-nil\n                                (interpose [[(str \"\\n\" (blanks findent)) :none\n                                             :indent]]\n                                  (zpmap options\n                                         (partial fzprint*\n                                                  (not-rightmost options)\n                                                  findent)\n                                         (take non-paired-item-count\n                                               seq-right))))\n                              ; Got to separate them since we are doing them in\n                              ; two\n                              ; pieces\n                              [[(str \"\\n\" (blanks findent)) :none :indent]]\n                              ; The elements that are constant pairs\n                              (interpose-nl-hf (:pair options)\n                                               findent\n                                               (fzprint-map-two-up :pair\n                                                                   ;caller\n                                                                   options\n                                                                   findent\n                                                                   nil\n                                                                   pair-seq)))\n                            ; This code path is where we have all constant\n                            ; pairs.\n                            (interpose-nl-hf (:pair options)\n                                             findent\n                                             (fzprint-map-two-up :pair\n                                                                 ;caller\n                                                                 options\n                                                                 findent\n                                                                 nil\n                                                                 pair-seq)))))]\n                [flow-result (style-lines options findent flow-result)]))\n           #_(options (let [[_ _ _ b-what] flow-lines]\n                        (if b-what (assoc options :dbg? true) options)))\n           #_(dbg options\n                  \"fzprint-hang-remaining: *=*=*=*=*=*\" (zstring zloc)\n                  \"hindent:\" hindent\n                  \"findent:\" findent\n                  \"caller:\" caller\n                  \"hang?\" hang?\n                  \"hang-diff\" hang-diff)\n           ; Now determine if there is any point in doing a hang, because\n           ; if the flow is beyond the expand limit, there is really no\n           ; chance that the hang is not beyond the expand limit.\n           ; This is what good-enough? does:\n           ;  (<= (/ (dec p-lines) p-count) hang-expand)\n           ;  Also need to account for the indent diffs.\n           ; Would be nice to move this into a common routine, since this\n           ; duplicates logic in good-enough?\n           ;\n           ; Yes, and this caused a proble when I put in the\n           ; hang-if-equal-flow? option in good-enough, so that now\n           ; we can't cancel the hang even though we are beyond the hang-expand\n           ; because the hang might be the same as the flow, and in that case\n           ; we don't really care how long the hang-expand is. We could make\n           ; this a feature, by having a large-ish hang-expand and having it\n           ; override hang-if-equal-flow.  If we do that, we have to reorder\n           ; the checks in good-enough to put the hang-expand check first.\n           ; I can't see any great reason for doing a flow if the hang and\n           ; flow are equal, though, so we won't do that now.  And this\n           ; code comes out.\n           ; We used to calculate hang-count by doing the hang an then counting\n           ; the output.  But ultimately this is simple a series of map calls\n           ; to the elements of seq-right, so we go right to the source for this\n           ; number now.  That let's us move the interpose calls above this\n           ; point.\n           [flow flow-lines] (zat options flow)]\n       (dbg options \"fzprint-hang-remaining: flow-lines:\" flow-lines)\n       (when dbg?\n         (if (zero? hang-count)\n           (println \"hang-count = 0:\" (str (zmap-right zstring zloc)))))\n       (log-lines options \"fzprint-hang-remaining: flow\" findent flow)\n       (if flow-lines\n         (if (good-enough? caller\n                           options\n                           fn-style\n                           hang-count\n                           (- hindent findent)\n                           hanging-lines\n                           flow-lines)\n           (concat-no-nil [[\" \" :none :whitespace]] hanging)\n           (concat-no-nil [[(str \"\\n\" (blanks findent)) :none :indent]] flow))\n         (when hanging-lines\n           (concat-no-nil [[\" \" :none :whitespace]] hanging)))))\n    ([caller options hindent findent zloc fn-style]\n     (fzprint-hang-remaining caller options hindent findent zloc fn-style nil)))\n\n(defn fzprint-hang-remaining ;-original\n  \"zloc is already down inside a collection, it is not the collection\n  itself. Operate on what is to the right of zloc.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc.\"\n  ([caller\n    {:keys [dbg? width],\n     {:keys [hang? constant-pair? constant-pair-min hang-avoid hang-expand\n             hang-diff nl-separator?]}\n       caller,\n     :as options} hindent findent zloc fn-style zloc-count]\n   (when (:dbg-hang options)\n     (println (dots (:pdepth options)) \"hr\" (zstring zloc)))\n   (dbg options\n        \"fzprint-hang-remaining:\" (zstring zloc)\n        \"hindent:\" hindent\n        \"findent:\" findent\n        \"caller:\" caller\n        \"nl-separator?:\" nl-separator?)\n   ; (in-hang options) slows things down here, for some reason\n   (let [seq-right (zmap-right identity zloc)\n         seq-right (if zloc-count (take zloc-count seq-right) seq-right)\n         [pair-seq non-paired-item-count]\n           (constant-pair caller options seq-right)\n         _ (dbg options\n                \"fzprint-hang-remaining count pair-seq:\"\n                (count pair-seq))\n         flow\n           (#?@(:clj [zfuture options]\n                :cljs [do])\n            (let [flow-result\n                    (if-not pair-seq\n                      ; We don't have any constant pairs\n                      (apply concat-no-nil\n                        (interpose [[(str \"\\n\" (blanks findent)) :none :indent]]\n                          (fzprint-seq options findent seq-right)))\n                      (if (not (zero? non-paired-item-count))\n                        ; We have constant pairs, ; but they follow\n                        ; some stuff that isn't paired.\n                        (concat-no-nil\n                          ; The elements that are not pairs\n                          (apply concat-no-nil\n                            (interpose [[(str \"\\n\" (blanks findent)) :none\n                                         :indent]]\n                              (zpmap options\n                                     (partial fzprint*\n                                              (not-rightmost options)\n                                              findent)\n                                     (take non-paired-item-count seq-right))))\n                          ; Got to separate them since we are doing them in\n                          ; two\n                          ; pieces\n                          [[(str \"\\n\" (blanks findent)) :none :indent]]\n                          ; The elements that are constant pairs\n                          (interpose-nl-hf (:pair options)\n                                           findent\n                                           (fzprint-map-two-up :pair\n                                                               ;caller\n                                                               options\n                                                               findent\n                                                               nil\n                                                               pair-seq)))\n                        ; This code path is where we have all constant pairs.\n                        (interpose-nl-hf (:pair options)\n                                         findent\n                                         (fzprint-map-two-up :pair\n                                                             ;caller\n                                                             options\n                                                             findent\n                                                             nil\n                                                             pair-seq))))]\n              [flow-result (style-lines options findent flow-result)]))\n         #_(options (let [[_ _ _ b-what] flow-lines]\n                      (if b-what (assoc options :dbg? true) options)))\n         #_(dbg options\n                \"fzprint-hang-remaining: *=*=*=*=*=*\" (zstring zloc)\n                \"hindent:\" hindent\n                \"findent:\" findent\n                \"caller:\" caller\n                \"hang?\" hang?\n                \"hang-diff\" hang-diff)\n         ; Now determine if there is any point in doing a hang, because\n         ; if the flow is beyond the expand limit, there is really no\n         ; chance that the hang is not beyond the expand limit.\n         ; This is what good-enough? does:\n         ;  (<= (/ (dec p-lines) p-count) hang-expand)\n         ;  Also need to account for the indent diffs.\n         ; Would be nice to move this into a common routine, since this\n         ; duplicates logic in good-enough?\n         ;\n         ; Yes, and this caused a proble when I put in the\n         ; hang-if-equal-flow? option in good-enough, so that now\n         ; we can't cancel the hang even though we are beyond the hang-expand\n         ; because the hang might be the same as the flow, and in that case\n         ; we don't really care how long the hang-expand is. We could make\n         ; this a feature, by having a large-ish hang-expand and having it\n         ; override hang-if-equal-flow.  If we do that, we have to reorder\n         ; the checks in good-enough to put the hang-expand check first.\n         ; I can't see any great reason for doing a flow if the hang and\n         ; flow are equal, though, so we won't do that now.  And this\n         ; code comes out.\n         ;\n         hang? (and hang?\n                    ; This is a key for \"don't hang no matter what\", it isn't\n                    ; about making it prettier. People call this routine with\n                    ; these values equal to ensure that it always flows.\n                    (not= hindent findent)\n                    ; This is not the original, below.\n                    (or (not hang-avoid)\n                        (< (count seq-right) (* (- width hindent) hang-avoid)))\n                    ;flow-lines\n                    ;;TODO make this uneval!!!\n                    #_(or (<= (- hindent findent) hang-diff)\n                          (<= (/ (dec (first flow-lines)) (count seq-right))\n                              hang-expand)))\n         hanging\n           (#?@(:clj [zfuture options]\n                :cljs [do])\n            (let [hang-result\n                    (when hang?\n                      (if-not pair-seq\n                        ; There are no paired elements\n                        (apply concat-no-nil\n                          (interpose [[(str \"\\n\" (blanks hindent)) :none\n                                       :indent]]\n                            (fzprint-seq (in-hang options) hindent seq-right)))\n                        (if (not (zero? non-paired-item-count))\n                          (concat-no-nil\n                            ; The elements that are not paired\n                            (dbg-form\n                              options\n                              \"fzprint-hang-remaining: mapv:\"\n                              (apply concat-no-nil\n                                (interpose [[(str \"\\n\" (blanks hindent)) :none\n                                             :indent]]\n                                  (zpmap\n                                    options\n                                    (partial fzprint*\n                                             (not-rightmost (in-hang options))\n                                             hindent)\n                                    (take non-paired-item-count seq-right)))))\n                            ; Got to separate them because they were done in two\n                            ; pieces\n                            [[(str \"\\n\" (blanks hindent)) :none :indent]]\n                            ; The elements that are paired\n                            (dbg-form options\n                                      \"fzprint-hang-remaining: fzprint-hang:\"\n                                      (interpose-nl-hf\n                                        (:pair options)\n                                        hindent\n                                        (fzprint-map-two-up :pair\n                                                            ;caller\n                                                            (in-hang options)\n                                                            hindent\n                                                            nil\n                                                            pair-seq))))\n                          ; All elements are paired\n                          (interpose-nl-hf (:pair options)\n                                           hindent\n                                           (fzprint-map-two-up :pair\n                                                               ;caller\n                                                               (in-hang options)\n                                                               hindent\n                                                               nil\n                                                               pair-seq)))))]\n              [hang-result (style-lines options hindent hang-result)]))\n         ; We used to calculate hang-count by doing the hang an then counting\n         ; the output.  But ultimately this is simple a series of map calls\n         ; to the elements of seq-right, so we go right to the source for this\n         ; number now.  That let's us move the interpose calls above this\n         ; point.\n         [flow flow-lines] (zat options flow)\n         [hanging hanging-lines] (zat options hanging)\n         hang-count (count seq-right)\n         _ (log-lines options\n                      \"fzprint-hang-remaining: hanging:\"\n                      hindent\n                      hanging)\n         _ (dbg options\n                \"fzprint-hang-remaining: hanging-lines:\" hanging-lines\n                \"hang-count:\" hang-count)]\n     (dbg options \"fzprint-hang-remaining: flow-lines:\" flow-lines)\n     (when dbg?\n       (if (zero? hang-count)\n         (println \"hang-count = 0:\" (str (zmap-right zstring zloc)))))\n     (log-lines options \"fzprint-hang-remaining: flow\" findent flow)\n     (when flow-lines\n       (if (good-enough? caller\n                         options\n                         fn-style\n                         hang-count\n                         (- hindent findent)\n                         hanging-lines\n                         flow-lines)\n         (concat-no-nil [[\" \" :none :whitespace]] hanging)\n         (concat-no-nil [[(str \"\\n\" (blanks findent)) :none :indent]] flow)))))\n  ([caller options hindent findent zloc fn-style]\n   (fzprint-hang-remaining caller options hindent findent zloc fn-style nil)))\n\n;;\n;; # Utilities to modify list printing in various ways\n;;\n\n\n;;\n;; Which fn-styles use :list {:indent n} instead of\n;; :list {:indent-arg n}\n;;\n\n(def body-set\n  #{:binding :arg1-> :arg2 :arg2-fn :arg2-pair :pair-fn :fn :arg1-body\n    :arg1-pair-body :none-body :noarg1-body :flow-body})\n\n(def body-map\n  {:arg1-body :arg1,\n   :arg1-pair-body :arg1-pair,\n   :none-body :none,\n   :flow-body :flow,\n   :noarg1-body :noarg1,\n   :force-nl-body :force-nl})\n\n;;\n;; If the noarg1? value is set, this is the mapping for functions\n;; immediately below\n;; \n\n(def noarg1-set #{:noarg1 :arg1->})\n\n(def noarg1-map\n  {:arg1 :none,\n   :arg1-pair :pair-fn,\n   :arg1-extend :extend,\n   :arg2 :arg1,\n   :arg2-pair :arg1-pair})\n\n(defn noarg1\n  \"Set noarg1 in the options if it is the right fn-type.\"\n  [options fn-type]\n  (if (noarg1-set fn-type) (assoc options :no-arg1? true) options))\n\n(def fn-style->caller\n  {:arg1-pair-body :pair,\n   :arg1-pair :pair,\n   :arg2-pair :pair,\n   :extend :extend,\n   :binding :binding,\n   :arg1-extend :extend,\n   :arg2-extend :extend,\n   :pair-fn :pair})\n\n(defn allow-one-line?\n  \"Should we allow this function to print on a single line?\"\n  [{:keys [fn-force-nl fn-gt2-force-nl fn-gt3-force-nl], :as options} len\n   fn-style]\n  (not (or (fn-force-nl fn-style)\n           (and (> len 3) (fn-gt2-force-nl fn-style))\n           (and (> len 4) (fn-gt3-force-nl fn-style))\n           (if-let [future-caller (fn-style->caller fn-style)]\n             (let [caller-map (future-caller options)]\n               (or (:flow? caller-map) (:force-nl? caller-map)))))))\n\n(defn modify-zloc\n  \"If the (caller options) has a value for :return-altered-zipper, then\n  examine the value.  It should be [<depth> <symbol> <fn>]. \n  If the <depth> is nil, any depth will do. If the\n  <symbol> is nil, any symbol will do.  If the <depth> and <symbol>\n  match, then the <fn> is called as (fn caller options zloc), and must\n  return a new zloc.\"\n  [caller options zloc]\n  (let [[depth trigger-symbol modify-fn :as return-altered-zipper-value]\n          (:return-altered-zipper (caller options))]\n    (dbg options\n         \"modify-zloc caller:\" caller\n         \"ztype\" (:ztype options)\n         \"return-altered-zipper-value:\" return-altered-zipper-value)\n    (if (or (not= (:ztype options) :zipper) (nil? return-altered-zipper-value))\n      zloc\n      (let [call-fn? (and (or (nil? depth) (= (:depth options) depth))\n                          (or (not trigger-symbol)\n                              (= trigger-symbol (zsexpr (zfirst zloc))))\n                          modify-fn)]\n        (dbg options \"modify-zloc: zloc\" (zstring zloc) \"call-fn?\" call-fn?)\n        (if call-fn?\n          (let [return (modify-fn caller options zloc)]\n            (dbg options \"modify-zloc return:\" (zstring return))\n            return)\n          zloc)))))\n\n(defn fzprint-list*\n  \"Print a list, which might be a list or an anon fn.  \n  Lots of work to make a list look good, as that is typically code. \n  Presently all of the callers of this are :list.\"\n  [caller l-str r-str\n   {:keys [fn-map user-fn-map one-line? fn-style no-arg1? fn-force-nl],\n    :as options} ind zloc]\n  ; The options map can get re-written down a bit below, so don't get\n  ; anything with destructuring that might change with a rewritten  options map!\n  (let [max-length (get-max-length options)\n        zloc (modify-zloc caller options zloc)\n        len (zcount zloc)\n        zloc (if (> len max-length) (ztake-append max-length zloc '...) zloc)\n        len (zcount zloc)\n        l-str-len (count l-str)\n        arg-1-coll? (not (or (zkeyword? (zfirst zloc))\n                             (zsymbol? (zfirst zloc))))\n        ; Use an alternative arg-1-indent if the fn-style is forced on input\n        ; and we don't actually have an arg-1 from which we can get an indent.\n        ; Now, we might want to allow arg-1-coll? to give us an arg-1-indent,\n        ; maybe, someday, so we could hang next to it.\n        ; But for now, this will do.\n        arg-1-indent-alt? (and arg-1-coll? fn-style)\n        fn-str (if-not arg-1-coll? (zstring (zfirst zloc)))\n        fn-style (or fn-style (fn-map fn-str) (user-fn-map fn-str))\n        ; if we don't have a function style, let's see if we can get\n        ; one by removing the namespacing\n        fn-style (if (and (not fn-style) fn-str)\n                   (fn-map (last (clojure.string/split fn-str #\"/\")))\n                   fn-style)\n        ; Do we have a [fn-style options] vector?\n        ; **** NOTE: The options map can change here, and if it does,\n        ; some of the things found in it above would have to change too!\n        options\n          (if (vector? fn-style) (merge-deep options (second fn-style)) options)\n        fn-style (if (vector? fn-style) (first fn-style) fn-style)\n        ; Get indents which might have changed if the options map was\n        ; re-written by the function style being a vector.\n        indent (:indent (options caller))\n        indent-arg (:indent-arg (options caller))\n        ; set indent based on fn-style\n        indent (if (body-set fn-style) indent (or indent-arg indent))\n        one-line-ok? (allow-one-line? options len fn-style)\n        ; remove -body from fn-style if it was there\n        fn-style (or (body-map fn-style) fn-style)\n        ; All styles except :hang, :flow, and :flow-body need three\n        ; elements minimum. We could put this in the fn-map,\n        ; but until there are more than three exceptions, seems\n        ; like too much mechanism.\n        fn-style (if (#{:hang :flow :flow-body :binding} fn-style)\n                   fn-style\n                   (if (< len 3) nil fn-style))\n        ;fn-style (if (= fn-style :hang) fn-style (if (< len 3) nil fn-style))\n        fn-style (if no-arg1? (or (noarg1-map fn-style) fn-style) fn-style)\n        ; no-arg? only affect one level down...\n        options (if no-arg1? (dissoc options :no-arg1?) options)\n        ; If l-str isn't one char, create an indent adjustment.  Largely\n        ; for anonymous functions, which otherwise would have their own\n        ; :anon config to parallel :list, which would be just too much\n        indent-adj (dec l-str-len)\n        ; The default indent is keyed off of whether or not the first thing\n        ; in the list is itself a list, since that list could evaluate to a\n        ; fn.  You can't replace the zlist? with arg-1-coll?, since if you do\n        ; multi-arity functions aren't done right, since the argument vector\n        ; is a coll?, and so arg-1-coll? is set, and then you get a two space\n        ; indent for multi-arity functions, which is wrong.\n        ; We could, conceivably, use zvector? here to specifically handle\n        ; multi-arity functions.  Or we could remember we are in a defn and\n        ; do something special there, or we could at least decide that we\n        ; were in code when we did this zlist? thing, since that is all about\n        ; code.  That wouldn't work if it was the top-level form, but would\n        ; otherwise.\n        default-indent (if (zlist? (zfirst zloc)) indent l-str-len)\n        arg-1-indent (if-not (or arg-1-coll? (zcomment? (zfirst zloc)))\n                       (+ ind (inc l-str-len) (count fn-str)))\n        ; If we don't have an arg-1-indent, and we noticed that the inputs\n        ; justify using an alternative, then use the alternative.\n        arg-1-indent (or arg-1-indent (when arg-1-indent-alt? (+ indent ind)))\n        ; Tell people inside that we are in code.\n        ; We don't catch places where the first thing in a list is\n        ; a collection or a seq which yields a function.\n        options (if (not arg-1-coll?) (assoc options :in-code? fn-str) options)\n        options (assoc options :pdepth (inc (long (or (:pdepth options) 0))))\n        _ (when (:dbg-hang options)\n            (println (dots (:pdepth options)) \"fzs\" fn-str))\n        new-ind (+ indent ind)\n        one-line-ind (+ l-str-len ind)\n        options (if fn-style (dissoc options :fn-style) options)\n        loptions (not-rightmost options)\n        roptions options\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n        _ (dbg options\n               \"fzprint-list*:\" (zstring zloc)\n               \"fn-str\" fn-str\n               \"fn-style:\" fn-style\n               \"ind:\" ind\n               \"indent:\" indent\n               \"default-indent:\" default-indent\n               \"one-line-ok?\" one-line-ok?\n               \"arg-1-coll?\" arg-1-coll?\n               \"arg-1-indent:\" arg-1-indent\n               \"l-str:\" (str \"'\" l-str \"'\")\n               \"indent-adj:\" indent-adj\n               \"len:\" len\n               \"one-line?:\" one-line?\n               \"rightcnt:\" (:rightcnt options))\n        one-line (if (zero? len)\n                   :empty\n                   (when one-line-ok?\n                     (fzprint-one-line options one-line-ind zloc)))]\n    (cond\n      one-line (if (= one-line :empty)\n                 (concat-no-nil l-str-vec r-str-vec)\n                 (concat-no-nil l-str-vec one-line r-str-vec))\n      ; If we are in :one-line mode, and it didn't fit on one line,\n      ; we are done!  We don't see this debugging, below.  Suppose\n      ; we never get here?\n      one-line?\n        (dbg options \"fzprint-list*:\" fn-str \" one-line did not work!!!\")\n      (dbg options \"fzprint-list*: fn-style:\" fn-style) nil\n      (= len 0) (concat-no-nil l-str-vec r-str-vec)\n      (= len 1) (concat-no-nil l-str-vec\n                               (fzprint* roptions one-line-ind (zfirst zloc))\n                               r-str-vec)\n      ; Must have at least two elements, third thru n are optional\n      (and (= fn-style :binding) (> len 1) (zvector? (zsecond zloc)))\n        (let [[hang-or-flow binding-style-vec] (fzprint-hang-unless-fail\n                                                 loptions\n                                                 arg-1-indent\n                                                 (+ indent ind)\n                                                 fzprint-binding-vec\n                                                 (zsecond zloc))\n              binding-style-vec (if (= hang-or-flow :hang)\n                                  (concat-no-nil [[\" \" :none :whitespace]]\n                                                 binding-style-vec)\n                                  binding-style-vec)]\n          (concat-no-nil\n            l-str-vec\n            ; TODO: get rid of inc ind\n            (fzprint* loptions (inc ind) (zfirst zloc))\n            binding-style-vec\n            (if (> len 2)\n              (concat-no-nil [[(str \"\\n\" (blanks (+ indent ind))) :none\n                               :indent]]\n                             ; here we use options, because fzprint-flow-seq\n                             ; will sort it out\n                             (fzprint-flow-seq options\n                                               (+ indent ind)\n                                               (nthnext (zmap identity zloc) 2)\n                                               :force-nl)\n                             r-str-vec)\n              r-str-vec)))\n      (= fn-style :pair-fn) (concat-no-nil\n                              l-str-vec\n                              (fzprint* loptions (inc ind) (zfirst zloc))\n                              ;    [[(str \" \") :none :whitespace]]\n                              (fzprint-hang\n                                options\n                                :pair-fn\n                                arg-1-indent\n                                (+ indent ind)\n                                fzprint-pairs\n                                (count (zmap-right identity (znthnext zloc 0)))\n                                (znthnext zloc 0))\n                              r-str-vec)\n      (= fn-style :extend)\n        (concat-no-nil l-str-vec\n                       (fzprint* loptions (inc ind) (zfirst zloc))\n                       [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n                       ; I think fzprint-pairs will sort out which\n                       ; is and isn't the rightmost because of two-up\n                       (fzprint-extend options (+ indent ind) (znthnext zloc 0))\n                       r-str-vec)\n      ; needs (> len 2) but we already checked for that above in fn-style\n      (or (and (= fn-style :fn) (not (zlist? (zsecond zloc))))\n          (= fn-style :arg2)\n          (= fn-style :arg2-fn)\n          (= fn-style :arg2-pair)\n          (= fn-style :arg2-extend))\n        (let [second-element (fzprint-hang-one caller\n                                               (if (= len 2) options loptions)\n                                               ; This better not be nil\n                                               arg-1-indent\n                                               (+ indent ind)\n                                               (zsecond zloc))\n              [line-count max-width]\n                ; arg-1-indent better not be nil here either\n                (style-lines loptions arg-1-indent second-element)\n              third (zthird zloc)\n              first-three\n                (when second-element\n                  (concat-no-nil\n                    (fzprint* loptions\n                              ;(inc ind)\n                              (+ indent ind)\n                              (zfirst zloc))\n                    second-element\n                    (if (or (= fn-style :arg2)\n                            (= fn-style :arg2-pair)\n                            (= fn-style :arg2-fn)\n                            (and (zvector? third) (= line-count 1)))\n                      (fzprint-hang-one caller\n                                        (if (= len 3) options loptions)\n                                        ;(inc max-width)\n                                        max-width\n                                        (+ indent ind)\n                                        third)\n                      (concat-no-nil [[(str \"\\n\" (blanks (+ indent ind))) :none\n                                       :indent]]\n                                     (fzprint* (if (= len 3) options loptions)\n                                               (+ indent ind)\n                                               third)))))]\n          (when first-three\n            (if (= len 3)\n              (concat-no-nil l-str-vec first-three r-str-vec)\n              (concat-no-nil\n                l-str-vec\n                first-three\n                (cond\n                  (= fn-style :arg2-pair)\n                    (concat-no-nil\n                      [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n                      (fzprint-pairs options (+ indent ind) (znthnext zloc 2)))\n                  (= fn-style :arg2-extend)\n                    (concat-no-nil\n                      [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n                      (fzprint-extend options (+ indent ind) (znthnext zloc 2)))\n                  :else (fzprint-hang-remaining caller\n                                                ;options\n                                                (if (= fn-style :arg2-fn)\n                                                  (assoc options :fn-style :fn)\n                                                  options)\n                                                (+ indent ind)\n                                                ; force flow\n                                                (+ indent ind)\n                                                (znthnext zloc 2)\n                                                fn-style))\n                r-str-vec))))\n      (and (= fn-style :arg1-mixin) (> len 3))\n        (let [arg-vec-index (or (zfind #(or (zvector? %)\n                                            (when (zlist? %)\n                                              (zvector? (zfirst %))))\n                                       zloc)\n                                0)\n              doc-string? (string? (zsexpr (zthird zloc)))\n              mixin-start (if doc-string? 4 3)\n              mixin-length (- arg-vec-index mixin-start)\n              mixins? (pos? mixin-length)\n              doc-string (when doc-string?\n                           (fzprint-hang-one caller\n                                             loptions\n                                             (+ indent ind)\n                                             ; force flow\n                                             (+ indent ind)\n                                             (zthird zloc)))\n              ; Have to deal with no arg-vec-index!!\n              mixins\n                (when mixins?\n                  (let [mixin-sentinal (fzprint-hang-one caller\n                                                         loptions\n                                                         (+ indent ind)\n                                                         ; force flow\n                                                         (+ indent ind)\n                                                         (if doc-string?\n                                                           (zfourth zloc)\n                                                           (zthird zloc)))\n                        [line-count max-width]\n                          (style-lines loptions (+ indent ind) mixin-sentinal)]\n                    (concat-no-nil mixin-sentinal\n                                   (fzprint-hang-remaining\n                                     caller\n                                     loptions\n                                     ; Apparently hang-remaining gives you a\n                                     ; space after the current thing, so we\n                                     ; need to account for it now, since\n                                     ; max-width is the end of the current\n                                     ; thing\n                                     (inc max-width)\n                                     (dec (+ indent indent ind))\n                                     (znthnext zloc (if doc-string? 3 2))\n                                     fn-style\n                                     mixin-length))))]\n          (concat-no-nil\n            l-str-vec\n            (fzprint* loptions (inc ind) (zfirst zloc))\n            (fzprint-hang-one caller\n                              (if (= len 2) options loptions)\n                              arg-1-indent\n                              (+ indent ind)\n                              (zsecond zloc))\n            (cond (and doc-string? mixins?) (concat-no-nil doc-string mixins)\n                  doc-string? doc-string\n                  mixins? mixins\n                  ; This is a hack, would be nice to have a better way to\n                  ; handle these situations.  Likely the only one so far.\n                  :else [[\"\" :none :whitespace]])\n            (fzprint-hang-remaining\n              caller\n              (noarg1 options fn-style)\n              (+ indent ind)\n              ; force flow\n              (+ indent ind)\n              (znthnext zloc\n                        (if mixins? (dec arg-vec-index) (if doc-string? 2 1)))\n              fn-style)\n            r-str-vec))\n      (or (= fn-style :arg1-pair)\n          (= fn-style :arg1)\n          (= fn-style :arg1-force-nl)\n          (= fn-style :arg1->))\n        (concat-no-nil\n          l-str-vec\n          (fzprint* loptions (inc ind) (zfirst zloc))\n          (fzprint-hang-one caller\n                            (if (= len 2) options loptions)\n                            arg-1-indent\n                            (+ indent ind)\n                            (zsecond zloc))\n          ; then either pair or remaining-seq\n          ; we don't do a full hanging here.\n          (when (> len 2)\n            (if (= fn-style :arg1-pair)\n              (concat-no-nil\n                [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n                (fzprint-pairs options (+ indent ind) (znthnext zloc 1)))\n              (fzprint-hang-remaining caller\n                                      (noarg1 options fn-style)\n                                      (+ indent ind)\n                                      ; force flow\n                                      (+ indent ind)\n                                      (znthnext zloc 1)\n                                      fn-style)))\n          r-str-vec)\n      ; we know that (> len 2) if fn-style not= nil\n      (= fn-style :arg1-extend)\n        (cond\n          (zvector? (zsecond zloc))\n            (concat-no-nil\n              l-str-vec\n              (fzprint* loptions (inc ind) (zfirst zloc))\n              [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n              (fzprint* loptions (inc ind) (zsecond zloc))\n              [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n              ; This needs to be (znthnext zloc 1) and not 2 because\n              ; fzprint-extend does (zmap-right identity zloc), skipping\n              ; the first one!\n              (fzprint-extend options (+ indent ind) (znthnext zloc 1))\n              r-str-vec)\n          :else (concat-no-nil\n                  l-str-vec\n                  (fzprint* loptions (inc ind) (zfirst zloc))\n                  (fzprint-hang-one caller\n                                    (if (= len 2) options loptions)\n                                    arg-1-indent\n                                    (+ indent ind)\n                                    (zsecond zloc))\n                  [[(str \"\\n\" (blanks (+ indent ind))) :none :indent]]\n                  (fzprint-extend options (+ indent ind) (znthnext zloc 1))\n                  r-str-vec))\n      ;\n      ; Unspecified seq, might be a fn, might not.\n      ; If (first zloc) is a seq, we won't have an\n      ; arg-1-indent.  In that case, just flow it\n      ; out with remaining seq.  Since we already\n      ; know that it won't fit on one line.  If it\n      ; might be a fn, try hanging and flow and do\n      ; what we like better.  Note that default-indent\n      ; might be 1 here, which means that we are pretty\n      ; sure that the (zfirst zloc) isn't a function\n      ; and we aren't doing code.\n      ;\n      :else\n        (concat-no-nil\n          l-str-vec\n          (fzprint* loptions (+ l-str-len ind) (zfirst zloc))\n          (if (and arg-1-indent (not= fn-style :flow))\n            (fzprint-hang-remaining caller\n                                    (noarg1 options fn-style)\n                                    arg-1-indent\n                                    (+ indent ind indent-adj)\n                                    (znthnext zloc 0)\n                                    fn-style)\n            ; This might be a collection as the first thing, or it\n            ; might be a :flow type.  Do different indents for these.\n            (let [local-indent (if (= fn-style :flow)\n                                 (+ indent ind)\n                                 (+ default-indent ind indent-adj))]\n              (concat-no-nil [[(str \"\\n\" (blanks local-indent)) :none :indent]]\n                             (fzprint-flow-seq (noarg1 options fn-style)\n                                               local-indent\n                                               (nthnext (zmap identity zloc) 1)\n                                               :force-nl))))\n          r-str-vec))))\n\n(defn fzprint-list\n  \"Pretty print and focus style a :list element.\"\n  [options ind zloc]\n  (fzprint-list* :list \"(\" \")\" (rightmost options) ind zloc))\n\n(defn fzprint-anon-fn\n  \"Pretty print and focus style a fn element.\"\n  [options ind zloc]\n  (fzprint-list* :list \"#(\" \")\" (rightmost options) ind zloc))\n\n(defn any-zcoll?\n  \"Return true if there are any collections in the collection.\"\n  [options ind zloc]\n  (let [coll?-seq (zmap zcoll? zloc)] (reduce #(or %1 %2) nil coll?-seq)))\n\n;;\n;; # Put things on the same line\n;;\n\n(defn wrap-zmap\n  \"Given the output from fzprint-seq, which is a style-vec in\n  the making without spacing, but with extra [] around the elements,\n  wrap the elements to the right margin.\"\n  [caller\n   {:keys [width rightcnt], {:keys [wrap-after-multi?]} caller, :as options} ind\n   coll-print]\n  #_(prn \"wz:\" coll-print)\n  (let [last-index (dec (count coll-print))\n        rightcnt (fix-rightcnt rightcnt)]\n    (loop [cur-seq coll-print\n           cur-ind ind\n           index 0\n           previous-newline? false\n           ; transient here slows things down, interestingly enough\n           out []]\n      (if-not cur-seq\n        out\n        (let [next-seq (first cur-seq)]\n          (when next-seq\n            (let [multi? (> (count (first cur-seq)) 1)\n                  this-seq (first cur-seq)\n                  _ (log-lines options \"wrap-zmap:\" ind this-seq)\n                  _ (dbg options \"wrap-zmap: ind:\" ind \"this-seq:\" this-seq)\n                  [linecnt max-width lines] (style-lines options ind this-seq)\n                  last-width (last lines)\n                  len (- last-width ind)\n                  len (max 0 len)\n                  newline? (= (nth (first this-seq) 2) :newline)\n                  width (if (= index last-index) (- width rightcnt) width)\n                  ; need to check size, and if one line and fits, should fit\n                  fit? (and (not newline?)\n                            (or (zero? index)\n                                (and (if multi? (= linecnt 1) true)\n                                     (<= (+ cur-ind len) width))))\n                  new-ind (cond\n                            (or (= (nth (first this-seq) 2) :comment)\n                                (= (nth (first this-seq) 2) :comment-inline))\n                              (inc width)\n                            (and multi? (> linecnt 1) (not wrap-after-multi?))\n                              width\n                            fit? (+ cur-ind len 1)\n                            newline? ind\n                            :else (+ ind len 1))]\n              #_(prn \"------ this-seq:\" this-seq\n                     \"lines:\" lines\n                     \"linecnt:\" linecnt\n                     \"multi?\" multi?\n                     \"newline?:\" newline?\n                     \"previous-newline?:\" previous-newline?\n                     \"linecnt:\" linecnt\n                     \"max-width:\" max-width\n                     \"last-width:\" last-width\n                     \"len:\" len\n                     \"cur-ind:\" cur-ind\n                     \"new-ind:\" new-ind\n                     \"width:\" width\n                     \"fit?\" fit?)\n              ; need to figure out what to do with a comment,\n              ; want to force next line to not fit whether or not\n              ; this line fit.  Comments are already multi-line, and\n              ; it is really not clear what multi? does in this routine\n              (recur\n                (next cur-seq)\n                new-ind\n                (inc index)\n                newline?\n                ; TODO: concat-no-nil fails here, why?\n                (concat\n                  out\n                  (if fit?\n                    (if (not (zero? index))\n                      (concat-no-nil [[\" \" :none :whitespace]] this-seq)\n                      this-seq)\n                    (if newline?\n                      [[(str \"\\n\" (blanks (dec new-ind))) :none :indent]]\n                      (if previous-newline?\n                        (concat-no-nil [[\" \" :none :indent]] this-seq)\n                        (concat-no-nil [[(str \"\\n\" (blanks ind)) :none :indent]]\n                                       this-seq)))))))))))))\n(defn remove-nl\n  \"Remove any [_ _ :newline] from the seq.\"\n  [coll]\n  (remove #(= (nth (first %) 2) :newline) coll))\n\n(defn internal-validate\n  \"Validate an options map that was returned from some internal configuration\n  expression or configuration.  Either returns the options map or throws\n  an error.\"\n  [options error-str]\n  (let [errors (validate-options options)\n        errors (when errors\n                 (str \"Options resulting from \" error-str\n                      \" had these errors: \" errors))]\n    (if (not (empty? errors))\n      (throw (#?(:clj Exception.\n                 :cljs js/Error.)\n              errors))\n      options)))\n\n(defn fzprint-vec*\n  \"Print basic stuff like a vector or a set.  Several options for how to\n  print them.\"\n  [caller l-str r-str\n   {:keys [rightcnt in-code?],\n    {:keys [wrap-coll? wrap? binding? option-fn-first respect-nl? sort?\n            sort-in-code?]}\n      caller,\n    :as options} ind zloc]\n  (if (and binding? (= (:depth options) 1))\n    (fzprint-binding-vec options ind zloc)\n    (let [l-str-vec [[l-str (zcolor-map options l-str) :left]]\n          r-str-vec (rstr-vec options ind zloc r-str)\n          new-options (when option-fn-first\n                        (let [first-sexpr (zsexpr (zfirst-no-comment zloc))]\n                          (internal-validate\n                            (option-fn-first options first-sexpr)\n                            (str \":vector :option-fn-first called with \"\n                                 first-sexpr))))\n          #_(prn \"new-options:\" new-options)\n          {{:keys [wrap-coll? wrap? binding? option-fn-first respect-nl? sort?\n                   sort-in-code?]}\n             caller,\n           :as options}\n            (merge-deep options new-options)\n          ; If sort? is true, then respect-nl? makes no sense.  At present,\n          ; sort? and respect-nl? are not both supported for the same structure,\n          ; so this doesn't really matter, but if in the future they were, this\n          ; would help.\n          respect-nl? (and respect-nl? (not sort?))\n          new-ind (+ (count l-str) ind)\n          _ (dbg-pr options \"fzprint-vec*:\" (zstring zloc) \"new-ind:\" new-ind)\n          zloc-seq\n            (if respect-nl? (zmap-w-nl identity zloc) (zmap identity zloc))\n          zloc-seq (if (and sort? (if in-code? sort-in-code? true))\n                     (order-out caller options identity zloc-seq)\n                     zloc-seq)\n          coll-print (if (zero? (zcount zloc))\n                       [[[\"\" :none :whitespace]]]\n                       (fzprint-seq options new-ind zloc-seq))\n          _ (dbg-pr options \"fzprint-vec*: coll-print:\" coll-print)\n          ; If we got any nils from fzprint-seq and we were in :one-line mode\n          ; then give up -- it didn't fit on one line.\n          coll-print (if-not (contains-nil? coll-print) coll-print)\n          one-line (when coll-print\n                     ; should not be necessary with contains-nil? above\n                     (apply concat-no-nil\n                       (interpose [[\" \" :none :whitespace]]\n                         ; This causes single line things to also respect-nl\n                         ; when it is enabled.  Could be separately controlled\n                         ; instead of with :respect-nl? if desired.\n                         (if respect-nl? coll-print (remove-nl coll-print)))))\n          _ (log-lines options \"fzprint-vec*:\" new-ind one-line)\n          one-line-lines (style-lines options new-ind one-line)]\n      (when one-line-lines\n        (if (fzfit-one-line options one-line-lines)\n          (concat-no-nil l-str-vec one-line r-str-vec)\n          (if (or (and (not wrap-coll?) (any-zcoll? options new-ind zloc))\n                  (not wrap?))\n            (concat-no-nil l-str-vec\n                           (apply concat-no-nil\n                             (interpose [[(str \"\\n\" (blanks new-ind)) :none\n                                          :indent]]\n                               (remove-nl coll-print)))\n                           r-str-vec)\n            ; Since there are either no collections in this vector or set or\n            ; whatever, or if there are, it is ok to wrap them, print it\n            ; wrapped on the same line as much as possible:\n            ;           [a b c d e f\n            ;            g h i j]\n            (concat-no-nil\n              l-str-vec\n              (do (dbg options \"fzprint-vec*: wrap coll-print:\" coll-print)\n                  (wrap-zmap caller options new-ind coll-print))\n              r-str-vec)))))))\n\n(defn fzprint-vec\n  [options ind zloc]\n  (fzprint-vec* :vector \"[\" \"]\" (rightmost options) ind zloc))\n\n(defn fzprint-array\n  [options ind zloc]\n  (fzprint-vec* :array \"[\" \"]\" (rightmost options) ind zloc))\n\n(defn fzprint-set\n  \"Pretty print and focus style a :set element.\"\n  [options ind zloc]\n  (fzprint-vec* :set \"#{\" \"}\" (rightmost options) ind zloc))\n\n; not clear transient helps here\n(defn interpose-either\n  \"Do the same as interpose, but different seps depending on pred?.\"\n  [sep-true sep-nil pred? coll]\n  (loop [coll coll\n         out (transient [])\n         interpose? nil]\n    (if (empty? coll)\n      (persistent! out)\n      (recur (next coll)\n             (if interpose?\n               (conj-it! out sep-true (first coll))\n               (if (zero? (count out))\n                 (conj! out (first coll))\n                 (conj-it! out sep-nil (first coll))))\n             (pred? (first coll))))))\n\n; transient helped a lot here\n(defn interpose-either-nl-hf\n  \"Do the same as interpose, but different seps depending on pred-fn\n  return and nl-separator?.\"\n  [sep-true sep-true-nl sep-nil sep-nil-nl\n   {:keys [nl-separator? nl-separator-flow?], :as suboptions} ;nl-separator?\n   pred-fn coll]\n  (loop [coll coll\n         out (transient [])\n         interpose? nil\n         add-nl? nil]\n    (if (empty? coll)\n      (apply concat-no-nil (persistent! out))\n      (let [[hangflow style-vec] (first coll)]\n        (recur (next coll)\n               (if interpose?\n                 (conj-it! out (if add-nl? sep-true-nl sep-true) style-vec)\n                 (if (zero? (count out))\n                   ;(empty? out)\n                   (conj! out style-vec)\n                   (conj-it! out (if add-nl? sep-nil-nl sep-nil) style-vec)))\n               (when pred-fn (pred-fn style-vec))\n               ; should we put an extra new-line before the next element?\n               ; Two styles here:\n               ;  o  always put one if the previous pair contained a new-line\n               ;     which could be (but is not) the default\n               ;     To do this you would do:\n               ;       (and nl-separator? (not (single-line? style-vec)))\n               ;  o  put one only if the previous right hand part of the\n               ;     pair did a flow (which is the current default)\n               ;     To do this, you look for whether or not the return\n               ;     from fzprint-map-two-up said it was a flow\n               (and nl-separator? (= hangflow :flow)))))))\n\n(defn interpose-nl-hf\n  \"Put a single or double line between pairs returned from fzprint-map-two-up.\n  The first argument is the map resulting from (:map options) or (:pair options)\n  or whatever.  It should have :nl-separator? and :nl-separator-flow? in it.\"\n  [suboptions ind coll]\n  (interpose-either-nl-hf nil\n                          nil\n                          [[(str \"\\n\" (blanks ind)) :none :indent]]\n                          [[(str \"\\n\") :none :indent]\n                           [(str \"\\n\" (blanks ind)) :none :indent]]\n                          suboptions\n                          #_(:nl-separator? suboptions)\n                          nil\n                          coll))\n\n(defn fzprint-map*\n  [caller l-str r-str\n   {:keys [one-line? ztype map-depth in-code?],\n    {:keys [comma? key-ignore key-ignore-silent nl-separator? force-nl? lift-ns?\n            lift-ns-in-code?]}\n      caller,\n    :as options} ind zloc]\n  (let [options (assoc options :map-depth (inc map-depth))\n        zloc (if (and (= ztype :sexpr) (or key-ignore key-ignore-silent))\n               (map-ignore caller options zloc)\n               zloc)\n        [no-sort? pair-seq] (partition-all-2-nc (no-max-length options)\n                                                (zseqnws zloc))\n        [ns lift-pair-seq] (when (and lift-ns?\n                                      (if in-code? lift-ns-in-code? true))\n                             (zlift-ns pair-seq))\n        l-str (if ns (str \"#:\" ns l-str) l-str)\n        pair-seq (or lift-pair-seq pair-seq)\n        pair-seq\n          (if no-sort? pair-seq (order-out caller options first pair-seq))\n        ; This is where you might put max-length\n        max-length (get-max-length options)\n        pair-count (count pair-seq)\n        pair-seq (if (> pair-count max-length)\n                   (concat (take max-length pair-seq)\n                           (list (list (zdotdotdot))))\n                   pair-seq)\n        indent (count l-str)\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options (+ indent ind) zloc r-str)]\n    (if (empty? pair-seq)\n      (concat-no-nil l-str-vec r-str-vec)\n      (let [_ (dbg options\n                   \"fzprint-map*:\" (zstring zloc)\n                   \"ind:\" ind\n                   \"comma?\" comma?\n                   \"rightcnt:\" (:rightcnt options))\n            ; A possible one line representation of this map, but this is\n            ; optimistic and needs to be validated.\n            pair-print-one-line\n              (fzprint-map-two-up\n                caller\n                (if one-line? options (assoc options :one-line? true))\n                (+ indent ind)\n                comma?\n                pair-seq)\n            pair-print-one-line (remove-hangflow pair-print-one-line)\n            ; Does it fit on line line?\n            pair-print-one-line\n              (when (fzfit-one-line\n                      options\n                      (style-lines options (+ indent ind) pair-print-one-line))\n                pair-print-one-line)\n            one-line (when pair-print-one-line\n                       (apply concat-no-nil\n                         (interpose-either [[\", \" :none :whitespace]]\n                                           [[\" \" :none :whitespace]]\n                                           (constantly comma?)\n                                           pair-print-one-line)))\n            one-line-lines (style-lines options (+ indent ind) one-line)\n            one-line (when (fzfit-one-line options one-line-lines) one-line)]\n        (if one-line\n          (concat-no-nil l-str-vec one-line r-str-vec)\n          ; It didn't fit on one line.\n          (when (not one-line?)\n            ; We weren't required to fit it on one line\n            (let [pair-print (fzprint-map-two-up caller\n                                                 options\n                                                 (+ indent ind)\n                                                 comma?\n                                                 pair-seq)]\n              (concat-no-nil l-str-vec\n                             ;(apply concat-no-nil\n                             (interpose-either-nl-hf\n                               [[\",\" ;(str \",\" (blanks (inc ind)))\n                                 :none :whitespace]\n                                [(str \"\\n\" (blanks (inc ind))) :none :indent]]\n                               [[\",\" ;(str \",\" (blanks (inc ind)))\n                                 :none :whitespace] ; Fix issue #59 -- don't put\n                                ; blanks to indent before the next \\n\n                                [\"\\n\" :none :indent]\n                                [(str \"\\n\" (blanks (inc ind))) :none :indent]]\n                               [[(str \"\\n\" (blanks (inc ind))) :none :indent]]\n                               [[(str \"\\n\" (blanks (inc ind))) :none :indent]\n                                [(str \"\\n\" (blanks (inc ind))) :none :indent]]\n                               (:map options)\n                               ;nl-separator?\n                               #(and comma?\n                                     (not= (nth (first %) 2) :comment)\n                                     (not= (nth (first %) 2) :comment-inline))\n                               pair-print)\n                             ; )\n                             r-str-vec))))))))\n\n(defn fzprint-map\n  \"Format a real map. ONLY WORKES ON STRUCTURES AT PRESENT\"\n  [options ind zloc]\n  (let [[ns lifted-map] nil]\n    ;(zlift-ns zloc)]\n    (if ns\n      (fzprint-map* :map\n                    (str \"#:\" ns \"{\")\n                    \"}\"\n                    (rightmost options)\n                    ind\n                    lifted-map)\n      (fzprint-map* :map \"{\" \"}\" (rightmost options) ind zloc))))\n\n(defn object-str?\n  \"Return true if the string starts with #object[\"\n  [s]\n  (re-find #\"^#object\\[\" s))\n\n(defn fzprint-object\n  \"Print something that looks like #object[...] in a way\n  that will acknowledge the structure inside of the [...]\"\n  ([options ind zloc zloc-value]\n   (fzprint-vec* :object\n                 \"#object[\"\n                 \"]\"\n                 options\n                 ind\n                 (zobj-to-vec zloc zloc-value)))\n  ([options ind zloc]\n   (fzprint-vec* :object \"#object[\" \"]\" options ind (zobj-to-vec zloc))))\n\n(defn hash-identity-str\n  \"Find the hash-code identity for an object.\"\n  [obj]\n  #?(:clj (Integer/toHexString (System/identityHashCode obj))\n     :cljs (str (hash obj))))\n\n; (with-out-str\n;    (printf \"%08x\" (System/identityHashCode obj))))\n\n(defn fzprint-atom\n  [{{:keys [object?]} :atom, :as options} ind zloc]\n  (if (and object? (object-str? (zstring zloc)))\n    (fzprint-object options ind zloc (zderef zloc))\n    (let [l-str \"#<\"\n          r-str \">\"\n          indent (count l-str)\n          l-str-vec [[l-str (zcolor-map options l-str) :left]]\n          r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n          arg-1 (str \"Atom@\" (hash-identity-str zloc))\n          arg-1-indent (+ ind indent 1 (count arg-1))]\n      (dbg-pr options\n              \"fzprint-atom: arg-1:\" arg-1\n              \"zstring arg-1:\" (zstring zloc))\n      (concat-no-nil l-str-vec\n                     [[arg-1 (zcolor-map options :none) :element]]\n                     (fzprint-hang-one :unknown\n                                       (rightmost options)\n                                       arg-1-indent\n                                       (+ indent ind)\n                                       (zderef zloc))\n                     r-str-vec))))\n\n(defn fzprint-future-promise-delay-agent\n  \"Print out a future or a promise or a delay.  These can only be \n  sexpressions, since they don't exist in a textual representation \n  of code (or data for that matter).  That means that we can use \n  regular sexpression operations on zloc.\"\n  [options ind zloc]\n  (let [zloc-type (cond (zfuture? zloc) :future\n                        (zpromise? zloc) :promise\n                        (zdelay? zloc) :delay\n                        (zagent? zloc) :agent\n                        :else (throw (#?(:clj Exception.\n                                         :cljs js/Error.)\n                                      \"Not a future, promise, or delay:\"\n                                      (zstring zloc))))]\n    (if (and (:object? (options zloc-type)) (object-str? (zstring zloc)))\n      (if (or (= zloc-type :agent) (realized? zloc))\n        (fzprint-object options ind zloc (zderef zloc))\n        (fzprint-object options ind zloc))\n      (let [l-str \"#<\"\n            r-str \">\"\n            indent (count l-str)\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n            type-str (case zloc-type\n                       :future \"Future@\"\n                       :promise \"Promise@\"\n                       :delay \"Delay@\"\n                       :agent \"Agent@\")\n            arg-1 (str type-str (hash-identity-str zloc))\n            #?@(:clj [arg-1\n                      (if (and (= zloc-type :agent) (agent-error zloc))\n                        (str arg-1 \" FAILED\")\n                        arg-1)])\n              arg-1-indent\n            (+ ind indent 1 (count arg-1)) zloc-realized?\n            (if (= zloc-type :agent) true (realized? zloc)) value\n            (if zloc-realized?\n              (zderef zloc)\n              (case zloc-type\n                :future \"pending\"\n                :promise \"not-delivered\"\n                :delay \"pending\"))\n              options\n            (if zloc-realized? options (assoc options :string-str? true))]\n        (dbg-pr options\n                \"fzprint-fpda: arg-1:\" arg-1\n                \"zstring arg-1:\" (zstring zloc))\n        (concat-no-nil l-str-vec\n                       [[arg-1 (zcolor-map options :none) :element]]\n                       (fzprint-hang-one :unknown\n                                         (rightmost options)\n                                         arg-1-indent\n                                         (+ indent ind)\n                                         value)\n                       r-str-vec)))))\n\n(defn fzprint-fn-obj\n  \"Print a function object, what you get when you put a function in\n  a collection, for instance.  This doesn't do macros, you will notice.\n  It also can't be invoked when zloc is a zipper.\"\n  [{{:keys [object?]} :fn-obj, :as options} ind zloc]\n  (if (and object? (object-str? (zstring zloc)))\n    (fzprint-object options ind zloc)\n    (let [l-str \"#<\"\n          r-str \">\"\n          indent (count l-str)\n          l-str-vec [[l-str (zcolor-map options :fn) :left]]\n          r-str-vec (rstr-vec options (+ indent ind) zloc r-str :fn)\n          arg-1-left \"Fn@\"\n          arg-1-right (hash-identity-str zloc)\n          arg-1-indent (+ ind indent 1 (count arg-1-left) (count arg-1-right))\n          class-str (pr-str #?(:clj (class zloc)\n                               :cljs (type zloc)))\n          #?@(:clj [[class-name & more]\n                    (s/split (s/replace-first class-str #\"\\$\" \"/\") #\"\\$\") color\n                    (if (re-find #\"clojure\" class-name)\n                      (zcolor-map options :fn)\n                      :none) arg-2 (str class-name (when more \"[fn]\"))]\n              :cljs [name-js (str (.-name zloc)) color\n                     (if (or (re-find #\"^clojure\" name-js)\n                             (re-find #\"^cljs\" name-js))\n                       (zcolor-map options :fn)\n                       :none) name-split (clojure.string/split name-js #\"\\$\")\n                     arg-2\n                     (str (apply str (interpose \".\" (butlast name-split)))\n                          \"/\"\n                          (last name-split))])]\n      (dbg-pr options\n              \"fzprint-fn-obj: arg-1:\"\n              arg-1-left\n              arg-1-right\n              \"zstring arg-1:\"\n              (zstring zloc))\n      (concat-no-nil l-str-vec\n                     [[arg-1-left (zcolor-map options :fn) :element]]\n                     [[arg-1-right (zcolor-map options :none) :element]]\n                     (fzprint-hang-one :unknown\n                                       (rightmost (assoc options\n                                                    :string-str? true\n                                                    :string-color color))\n                                       arg-1-indent\n                                       (+ indent ind)\n                                       arg-2)\n                     r-str-vec))))\n\n(defn fzprint-ns\n  [options ind zloc]\n  (let [l-str \"#<\"\n        r-str \">\"\n        indent (count l-str)\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n        arg-1 \"Namespace\"\n        arg-1-indent (+ ind indent 1 (count arg-1))]\n    (dbg-pr options\n            \"fzprint-atom: arg-1:\" arg-1\n            \"zstring arg-1:\" (zstring zloc))\n    (concat-no-nil l-str-vec\n                   [[arg-1 (zcolor-map options :none) :element]]\n                   (fzprint-hang-one :unknown\n                                     (rightmost options)\n                                     arg-1-indent\n                                     (+ indent ind)\n                                     (ns-name zloc))\n                   r-str-vec)))\n\n(defn dec-depth\n  \"Given an options map, decrement the :depth value and return the result.\"\n  [options]\n  (when options (assoc options :depth (dec (or (:depth options) 1)))))\n\n(defn fzprint-record\n  [{{:keys [record-type? to-string?]} :record, :as options} ind zloc]\n  (if to-string?\n    (fzprint* options ind (. zloc toString))\n    (if-not record-type?\n      ; if not printing as record-type, turn it into map\n      (fzprint* options ind (into {} zloc))\n      (let [l-str \"#\"\n            r-str \"\"\n            indent (count l-str)\n            l-str-vec [[l-str (zcolor-map options l-str) :left]]\n            r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n            arg-1 (pr-str #?(:clj (class zloc)\n                             :cljs (type zloc)))\n            arg-1 (let [tokens (clojure.string/split arg-1 #\"\\.\")]\n                    (apply str\n                      (conj (into [] (interpose \".\" (butlast tokens)))\n                            \"/\"\n                            (last tokens))))\n            arg-1-indent (+ ind indent 1 (count arg-1))]\n        (dbg-pr options\n                \"fzprint-record: arg-1:\" arg-1\n                \"zstring zloc:\" (zstring zloc))\n        (concat-no-nil l-str-vec\n                       [[arg-1 (zcolor-map options :none) :element]]\n                       (fzprint-hang-one :record\n                                         (dec-depth options)\n                                         ;(rightmost options)\n                                         arg-1-indent\n                                         (+ indent ind)\n                                         ; this only works because\n                                         ; we never actually get here\n                                         ; with a zipper, just an sexpr\n                                         (into {} zloc))\n                       r-str-vec)))))\n\n(defn fzprint-meta\n  \"Print the two items in a meta node.  Different because it doesn't print\n  a single collection, so it doesn't do any indent or rightmost.  It also\n  uses a different approach to calling fzprint-flow-seq with the\n  results zmap, so that it prints all of the seq, not just the rightmost.\"\n  [options ind zloc]\n  (let [l-str \"^\"\n        r-str \"\"\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options ind zloc r-str)]\n    (dbg-pr options \"fzprint-meta: zloc:\" (zstring zloc))\n    (concat-no-nil\n      l-str-vec\n      (fzprint-flow-seq\n        ; No rightmost, because this isn't a collection.\n        ; This is essentially two separate things.\n        options\n        ; no indent for second line, as the leading ^ is\n        ; not a normal collection beginning\n        ; TODO: change this to (+ (count l-str) ind)\n        (apply vector (+ (count l-str) ind) (repeat (dec (zcount zloc)) ind))\n        ;[(inc ind) ind]\n        (zmap identity zloc))\n      r-str-vec)))\n\n(defn fzprint-reader-macro\n  \"Print a reader-macro, often a reader-conditional. Adapted for differences\n  in parsing #?@ between rewrite-clj and rewrite-cljs.  Also adapted for\n  the rewrite-clj not parsing namespaced maps in the version presently\n  used.\"\n  [options ind zloc]\n  (let [zstr (zstring (zfirst zloc))\n        ; rewrite-cljs parses #?@ differently from rewrite-clj.  In\n        ; rewrite-cljs zfirst is ?@, not ?, so deal with that.\n        ; Not clear which is correct, I could see it go either way.\n        alt-at? (and (= (count zstr) 2) (= (subs zstr 1 2) \"@\"))\n        reader-cond? (= (subs zstr 0 1) \"?\")\n        ; are we dealing with a namespaced map?\n        namespaced? (= (subs zstr 0 1) \":\")\n        at? (or (= (ztag (zsecond zloc)) :deref) alt-at?)\n        l-str (cond (and reader-cond? at?) \"#?@\"\n                    (and reader-cond? (zcoll? (zsecond zloc))) \"#?\"\n                    reader-cond?\n                      (throw (#?(:clj Exception.\n                                 :cljs js/Error.)\n                              (str \"Unknown reader macro: '\" (zstring zloc)\n                                   \"' zfirst zloc: \" (zstring (zfirst zloc)))))\n                    namespaced? (str \"#\" zstr)\n                    :else \"#\")\n        r-str \"\"\n        ; Error to debug zpst\n        _ (when (:dbg-bug? options)\n            #?(:clj (+ \"a\" \"b\")\n               :cljs nil))\n        indent (count l-str)\n        ; we may want to color this based on something other than\n        ; its actual character string\n        l-str-vec [[l-str (zcolor-map options l-str) :left]]\n        r-str-vec (rstr-vec options (+ indent ind) zloc r-str)\n        floc\n          (if (and at? (not alt-at?)) (zfirst (zsecond zloc)) (zsecond zloc))]\n    (dbg-pr options\n            \"fzprint-reader-macro: zloc:\" (zstring zloc)\n            \"floc:\" (zstring floc)\n            \"l-str:\" l-str)\n    (concat-no-nil\n      l-str-vec\n      ; Because there is a token here in the zipper, we need something to\n      ; make the focus positioning come out right.\n      [[\"\" :none :element]]\n      (if reader-cond?\n        ; yes rightmost, this is a collection\n        (fzprint-map* :reader-cond\n                      \"(\"\n                      \")\"\n                      (rightmost options)\n                      (+ indent ind)\n                      floc)\n        ; not reader-cond?\n        (fzprint-flow-seq options\n                          (+ indent ind)\n                          (let [zloc-seq (zmap identity zloc)]\n                            (if namespaced? (next zloc-seq) zloc-seq))))\n      r-str-vec)))\n\n(def prefix-tags\n  {:quote \"'\",\n   :syntax-quote \"`\",\n   :unquote \"~\",\n   :unquote-splicing \"~@\",\n   :deref \"@\",\n   :var \"#'\",\n   :uneval \"#_\"})\n\n(defn prefix-options\n  \"Change options as necessary based on prefix tag.\"\n  [options prefix-tag]\n  (cond (= prefix-tag :uneval) (assoc options\n                                 :color-map (:color-map (:uneval options)))\n        (= prefix-tag :syntax-quote)\n          (-> options\n              (assoc-in [:color-map :paren]\n                        (:syntax-quote-paren (:color-map options)))\n              (assoc-in [:color-map :hash-paren]\n                        (:syntax-quote-paren (:color-map options))))\n        :else options))\n\n;; Fix fzprint* to look at cursor to see if there is one, and\n;; fzprint to set cursor with binding.  If this works, might pass\n;; it around.  Maybe pass ctx to everyone and they can look at it\n;; or something.  But for testing, let's just do this.\n\n;;\n;; # The center of the zprint universe\n;;\n;; Looked into alternative ways to dispatch this, but at the end of\n;; the day, this looked like the best.\n;;\n\n(defn fzprint*\n  \"The pretty print part of fzprint.\"\n  [{:keys [width rightcnt fn-map hex? shift-seq dbg? dbg-print? in-hang?\n           one-line? string-str? string-color depth max-depth trim-comments?\n           in-code? max-hang-depth max-hang-span max-hang-count],\n    :as options} indent zloc]\n  (let [avail (- width indent)\n        ; note that depth affects how comments are printed, toward the end\n        options (assoc options :depth (inc depth))\n        options (if (or dbg? dbg-print?)\n                  (assoc options\n                    :dbg-indent (str (get options :dbg-indent \"\")\n                                     (cond one-line? \"o\"\n                                           in-hang? \"h\"\n                                           :else \".\")))\n                  options)\n        _ (dbg options\n               \"fzprint* **** rightcnt:\"\n               rightcnt\n               \"depth:\"\n               depth\n               (pr-str (zstring zloc)))\n        dbg-data @fzprint-dbg\n        dbg-focus? (and dbg? (= dbg-data (second (zfind-path zloc))))\n        options (if dbg-focus? (assoc options :dbg :on) options)\n        _ (if dbg-focus? (println \"fzprint dbg-data:\" dbg-data))]\n    #_(def zlocx zloc)\n    ; We don't check depth if it is not a collection.  We might have\n    ; just not incremented depth if it wasn't a collection, but this\n    ; may be equivalent.\n    (cond (and (zcoll? zloc)\n               (or (>= depth max-depth) (zero? (get-max-length options))))\n            (if (= zloc (zdotdotdot))\n              [[\"...\" (zcolor-map options :none) :element]]\n              [[(:max-depth-string options) (zcolor-map options :keyword)\n                :element]])\n          (and in-hang?\n               (not in-code?)\n               ;(> (/ indent width) 0.3)\n               (or (> (- depth in-hang?) max-hang-span)\n                   (and (not one-line?)\n                        (> (zcount zloc) max-hang-count)\n                        (> depth max-hang-depth))))\n            nil\n          (zrecord? zloc) (fzprint-record options indent zloc)\n          (zlist? zloc) (fzprint-list options indent zloc)\n          (zvector? zloc) (fzprint-vec options indent zloc)\n          (zmap? zloc) (fzprint-map options indent zloc)\n          (zset? zloc) (fzprint-set options indent zloc)\n          (zanonfn? zloc) (fzprint-anon-fn options indent zloc)\n          (zfn-obj? zloc) (fzprint-fn-obj options indent zloc)\n          (zarray? zloc)\n            (if (:object? (:array options))\n              (fzprint-object options indent zloc)\n              (fzprint-array #?(:clj (if (:hex? (:array options))\n                                       (assoc options\n                                         :hex? (:hex? (:array options))\n                                         :shift-seq (zarray-to-shift-seq zloc))\n                                       options)\n                                :cljs options)\n                             indent\n                             (zexpandarray zloc)))\n          (zatom? zloc) (fzprint-atom options indent zloc)\n          (zmeta? zloc) (fzprint-meta options indent zloc)\n          (prefix-tags (ztag zloc)) (fzprint-vec* :none\n                                                  (prefix-tags (ztag zloc))\n                                                  \"\"\n                                                  (prefix-options options\n                                                                  (ztag zloc))\n                                                  indent\n                                                  zloc)\n          (zns? zloc) (fzprint-ns options indent zloc)\n          (or (zpromise? zloc) (zfuture? zloc) (zdelay? zloc) (zagent? zloc))\n            (fzprint-future-promise-delay-agent options indent zloc)\n          (zreader-macro? zloc) (fzprint-reader-macro options indent zloc)\n          ; This is needed to not be there for newlines in parse-string-all,\n          ; but is needed for respect-nl? support.\n          (and (= (ztag zloc) :newline) (> depth 0)) [[\"\\n\" :none :newline]]\n          :else\n            (let [zstr (zstring zloc)\n                  overflow-in-hang?\n                    (and in-hang?\n                         (> (+ (count zstr) indent (or rightcnt 0)) width))]\n              (cond\n                (zcomment? zloc)\n                  (let [zcomment\n                          ; Do we have a file-level comment that is way too\n                          ; long??\n                          (if (and (zero? depth) (not trim-comments?))\n                            zstr\n                            (clojure.string/replace zstr \"\\n\" \"\"))\n                        ; Only check for inline comments if we are doing them\n                        ; otherwise we get left with :comment-inline element\n                        ; types that don't go away\n                        inline-spaces (when (:inline? (:comment options))\n                                        (zinlinecomment? zloc))]\n                    (dbg options \"fzprint* trim-comments?:\" trim-comments?)\n                    (if (and (:count? (:comment options)) overflow-in-hang?)\n                      (do (dbg options \"fzprint*: overflow comment ========\")\n                          nil)\n                      #_[[zcomment (zcolor-map options :comment) :comment]]\n                      (if inline-spaces\n                        [[zcomment (zcolor-map options :comment) :comment-inline\n                          inline-spaces]]\n                        [[zcomment (zcolor-map options :comment) :comment]])))\n                ; Really just testing for whitespace, comments filtered above\n                (zwhitespaceorcomment? zloc) [[zstr :none :whitespace]]\n                ; At this point, having filtered out whitespace and\n                ; comments above, now we expect zsexpr will work for all of\n                ; the remaining things.\n                ;\n                ; If we are going to overflow, and we are doing a hang, let's\n                ; stop now!\n                overflow-in-hang?\n                  (do (dbg options \"fzprint*: overflow <<<<<<<<<<\") nil)\n                (zkeyword? zloc) [[zstr (zcolor-map options :keyword) :element]]\n                (string? (zsexpr zloc))\n                  [[(if string-str?\n                      (str (zsexpr zloc))\n                      ; zstr\n                      (zstring zloc))\n                    (if string-color string-color (zcolor-map options :string))\n                    :element]]\n                (showfn? fn-map (zsexpr zloc)) [[zstr (zcolor-map options :fn)\n                                                 :element]]\n                (show-user-fn? options (zsexpr zloc))\n                  [[zstr (zcolor-map options :user-fn) :element]]\n                (number? (zsexpr zloc))\n                  [[(if hex? (znumstr zloc hex? shift-seq) zstr)\n                    (zcolor-map options :number) :element]]\n                (nil? (zsexpr zloc)) [[zstr (zcolor-map options :nil) :element]]\n                :else [[zstr (zcolor-map options :none) :element]])))))\n\n;;\n;; # Comment Wrap Support\n;;\n\n(defn last-space\n  \"Take a string and an index, and look for the last space prior to the\n  index. If we wanted to tie ourselves to 1.8, we could use \n  clojure.string/last-index-of, but we don't.  However, we use similar\n  conventions, i.e., if no space is found, return nil, and if the index\n  is a space return that value, and accept any from-index, including one\n  larger than the length of the string.\"\n  [s from-index]\n  (let [from-index (min (dec (count s)) from-index)\n        rev-seq (reverse (take (inc from-index) s))\n        seq-after-space (take-while #(not= % \\space) rev-seq)\n        space-index (- from-index (count seq-after-space))]\n    (if (neg? space-index) nil space-index)))\n\n(defn next-space\n  \"Take a string and an index, and look for the next space *after* the\n  index. If no space is found, return nil. Accept any from-index, \n  including one larger than the length of the string.\"\n  [s from-index]\n  (let [from-index (inc from-index)]\n    (when (< from-index (count s))\n      (let [seq-after-space (take-while #(not= % \\space)\n                                        (drop from-index (seq s)))\n            space-index (+ from-index (count seq-after-space))]\n        (if (>= space-index (count s)) nil space-index)))))\n\n; transient may have made this worse\n(defn wrap-comment\n  \"If this is a comment, and it is too long, word wrap it to the right width.\n  Note that top level comments may well end with a newline, so remove it\n  and reapply it at the end if that is the case.\"\n  [width [s color stype :as element] start]\n  (if-not (= stype :comment)\n    element\n    (let [comment-width (- width start)\n          semi-str (re-find #\";*\" s)\n          rest-str (subs s (count semi-str))\n          space-str (re-find #\" *\" rest-str)\n          rest-str (subs rest-str (count space-str))\n          newline? (re-find #\"\\n$\" s)\n          comment-width (- comment-width (count semi-str) (count space-str))\n          #_(println \"\\ncomment-width:\" comment-width\n                     \"semi-str:\" semi-str\n                     \"space-str:\" space-str\n                     \"rest-str:\" rest-str)]\n      (loop [comment-str rest-str\n             out (transient [])]\n        #_(prn \"comment-str:\" comment-str)\n        (if (empty? comment-str)\n          (if (zero? (count out))\n            ;(empty? out)\n            (if newline?\n              [[semi-str color stype] [\"\\n\" :none :indent]]\n              [[semi-str color stype]])\n            (persistent! (if newline? (conj! out [\"\\n\" :none :indent]) out)))\n          (let [last-space-index (if (<= (count comment-str) comment-width)\n                                   (dec (count comment-str))\n                                   (if (<= comment-width 0)\n                                     (or (next-space comment-str 0)\n                                         (dec (count comment-str)))\n                                     (or (last-space comment-str comment-width)\n                                         (next-space comment-str comment-width)\n                                         (dec (count comment-str)))))\n                next-comment (clojure.string/trimr\n                               (subs comment-str 0 (inc last-space-index)))]\n            #_(prn \"last-space-index:\" last-space-index\n                   \"next-comment:\" next-comment)\n            (recur\n              (subs comment-str (inc last-space-index))\n              (if (zero? (count out))\n                ;(empty? out)\n                (conj! out [(str semi-str space-str next-comment) color stype])\n                (conj! (conj! out [(str \"\\n\" (blanks start)) :none :indent])\n                       [(str semi-str space-str next-comment) color\n                        :comment-wrap])))))))))\n\n(defn loc-vec\n  \"Takes the start of this vector and the vector itself.\"\n  [start [s]]\n  (let [split (split-lf s)\n        #_(clojure.string/split s #\"\\n\")]\n    (if (= (count split) 1) (+ start (count s)) (count (last split)))))\n\n(defn style-loc-vec\n  \"Take a style-vec and produce a style-loc-vec with the starting column\n  of each element in the style-vec.\"\n  [style-vec]\n  (butlast (reductions loc-vec 0 style-vec)))\n\n; Transient didn't help here, rather it hurt a bit.\n\n(defn lift-vec\n  \"Take a transient output vector and a vector and lift any style-vec elements\n  out of the input vector.\"\n  [out-vec element]\n  (if (string? (first element))\n    (conj out-vec element)\n    (loop [element-vec element\n           out out-vec]\n      (if-not element-vec\n        out\n        (recur (next element-vec) (conj out (first element-vec)))))))\n\n(defn lift-style-vec\n  \"Take a style-vec [[s color type] [s color type] [[s color type]\n  [s color type]] [s color type] ...] and lift out the inner vectors.\"\n  [style-vec]\n  (reduce lift-vec [] style-vec))\n\n(defn fzprint-wrap-comments\n  \"Take the final output style-vec, and wrap any comments which run over\n  the width. Looking for \"\n  [{:keys [width], :as options} style-vec]\n  #_(def wcsv style-vec)\n  (let [start-col (style-loc-vec style-vec)\n        #_(def stc start-col)\n        _ (dbg options \"fzprint-wrap-comments: style-vec:\" (pr-str style-vec))\n        _ (dbg options \"fzprint-wrap-comments: start-col:\" start-col)\n        wrap-style-vec (mapv (partial wrap-comment width) style-vec start-col)\n        #_(def wsv wrap-style-vec)\n        _ (dbg options \"fzprint-wrap-comments: wrap:\" (pr-str style-vec))\n        out-style-vec (lift-style-vec wrap-style-vec)]\n    out-style-vec))\n\n(defn fzprint-inline-comments\n  \"Try to bring inline comments back onto the line on which they belong.\"\n  [{:keys [width], :as options} style-vec]\n  #_(def fic style-vec)\n  (loop [cvec style-vec\n         out []]\n    (if-not cvec\n      out\n      (let [[s c e :as element] (first cvec)\n            [_ _ ne nn :as next-element] (second cvec)\n            new-element (cond (and (= e :indent) (= ne :comment-inline))\n                                [(blanks nn) c :whitespace]\n                              (= e :comment-inline) [s c :comment]\n                              :else element)]\n        (recur (next cvec) (conj out new-element))))))\n\n;;\n;; # External interface to all fzprint functions\n;;\n\n(defn fzprint\n  \"The pretty print part of fzprint.\"\n  [options indent zloc]\n  #_(def opt options)\n  #_(println \"fzprint: indent:\" indent \"(:indent options)\" (:indent options))\n  ; if we are doing specs, find the docstring and modify it with\n  ; the spec output.\n  #_(println \"fn-name:\" (:fn-name options))\n  #_(println \"spec:\" (:value (:spec options)))\n  (let [zloc (if-not (and (= (:ztype options) :zipper) (:value (:spec options)))\n               zloc\n               (add-spec-to-docstring zloc (:value (:spec options))))\n        style-vec (fzprint* (assoc options\n                              :depth 0\n                              :map-depth 0)\n                            indent\n                            zloc)]\n    #_(def fsv style-vec)\n    style-vec))\n\n;    (if (= (:ztype options) :sexpr)\n;      style-vec\n;      (if (:wrap? (:comment options))\n;        (fzprint-wrap-comments options style-vec)\n;        style-vec))))\n\n;;\n;; # Basic functions for testing results -- used only for tests\n;;\n\n(defn line-count \"Count lines in a string.\" [s] (inc (count (re-seq #\"\\n\" s))))\n\n(defn line-widths\n  \"Return a vector the lengths of lines.\"\n  [s]\n  (map count (clojure.string/split s #\"\\n\")))\n\n(defn max-width\n  \"Split a string into lines, and figure the max width.\"\n  [s]\n  (reduce max (line-widths s)))\n\n;;\n;; # Tab Expansion\n;;\n\n(defn expand-tabs\n  \"Takes a string, and expands tabs inside of the string based\n  on a tab-size argument.\"\n  ([tab-size s]\n   (apply str\n     (loop [char-seq (seq s)\n            cur-len (long 0)\n            out (transient [])]\n       (if (empty? char-seq)\n         (persistent! out)\n         (let [this-char (first char-seq)\n               tab-expansion (if (= this-char \\tab)\n                               (- tab-size (mod cur-len tab-size))\n                               nil)]\n           (recur (rest char-seq)\n                  (if (= this-char \\newline)\n                    0\n                    (+ cur-len (long (or tab-expansion 1))))\n                  (if tab-expansion\n                    (apply conj-it! out (seq (blanks tab-expansion)))\n                    (conj! out this-char))))))))\n  ([s] (expand-tabs 8 s)))\n\n;;\n;; # Needed for expectations testing\n;;\n;; Seems defrecord doesn't work in test environment, which is pretty odd.\n;;\n\n(defrecord r [left right])\n(defn make-record [l r] (new r l r))\n\n;;\n;; End of testing functions\n;;","~:reader-features",["^M",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["zprint.zprint/blanks","n","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","zprint.zprint/dots","zprint.zprint/indent","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","zprint.zprint/conj-it!","seq51635","self__4777__auto__","cljs.core/seq","rest","out","cljs.core/first","more","cljs.core/next","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","zprint.zprint/split-lf","s","input","cljs.core/not","next-lf","clojure.string.index_of.cljs$core$IFn$_invoke$arity$2","chunk","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","zprint.zprint/split-lf-2","temp__5733__auto__","G__51666","zprint.zprint/zpmap","js/Error","options","f","coll","cljs.core.map.cljs$core$IFn$_invoke$arity$2","coll1","coll2","cljs.core.map.cljs$core$IFn$_invoke$arity$3","zprint.zprint/zat","value","zprint.zprint/fzprint-dbg","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","p__51678","map__51680","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","zprint.zprint/log-lines","dbg-print?","dbg-indent","in-hang?","dbg-output","ind","style-vec","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","zprint.zprint/showfn?","fn-map","f-str","or__4185__auto__","cljs.core/re-find","cljs.core/Symbol","e51686","cljs.core/meta","G__51687","cljs.core/name","e","zprint.zprint/show-user-fn?","user-fn-map","e51712","cljs.core/empty?","zprint.zprint/right-separator-map","p__51722","p__51723","p__51724","map__51727","map__51728","map__51729","vec__51730","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__51733","zprint.zprint/good-enough?","caller","width","rightcnt","dbg?","hang-flow","hang-type-flow","hang-flow-limit","general-hang-adjust","hang-if-equal-flow?","hang-expand","hang-diff","hang-size","hang-adjust","fn-style","p-count","indent-diff","p-lines","p-maxwidth","p-length-seq","p-what","b-lines","b-maxwidth","_","b-what","p-last-maxwidth","cljs.core/last","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","result","and__4174__auto__","zprint.zprint/fix-rightcnt","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","factor","zprint.zprint/in-hang","zprint.zprint/contains-nil?","cljs.core/count","p1__51783#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/coll?","zprint.zprint/concat-no-nil-alt","seq51784","cljs.core/transient","c","cljs.core/persistent!","zprint.zprint/concat-no-nil","seq51787","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","v","o","cljs.core/reduced","cljs.core/conj!","zprint.zprint/force-vector","cljs.core/vector?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","zprint.zprint/keyword-fn?","vec__51804","left","right","clojure.string.split.cljs$core$IFn$_invoke$arity$2","fexpr__51807","p__51808","map__51811","zprint.zprint/get-max-length","max-length","depth","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","x__4276__auto__","y__4277__auto__","zprint.zprint/no-max-length","p__51820","vec__51821","zprint.zprint/accumulate-ll","count-comment?","cur-len","just-eol?","just-comment?","in","tag","eol?","comment?","count-s","p__51840","p__51841","vec__51844","vec__51847","zprint.zprint/generate-ll","element","vec__51854","l","r","cljs.core/List","zprint.zprint/line-lengths-iter","next-vec","current-string","line-length","previous-comment?","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","vec__51877","vec__51880","advance?","next-string","force-newline?","new-line-length","zprint.zprint/line-lengths","length-vec","vec__51888","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","zprint.zprint/single-line?","p1__51891#","p2__51892#","p1__51893#","clojure.string/includes?","zprint.zprint/find-what","s-vec","vec__51894","what","this","zprint.zprint/style-lines","lengths","cljs.core/max","dbg-ge","p__51898","p__51899","map__51900","vec__51901","zprint.zprint/fzfit","line-count","max-width","style-lines-return","zprint.zprint/fzfit-one-line","lines","zprint.zprint/rightmost","zprint.zprint/not-rightmost","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","zprint.zprint/c-r-pair","commas?","rightmost-pair?","rightmost?","zprint.zprint/str->key","p__51912","map__51914","zprint.zprint/zcolor-map","color-map","key-or-str","G__51920","cljs.core/Keyword","zprint.zprint/hangflow","hangflow?","hang-or-flow","zprint.zprint/fzprint-hang-unless-fail","hindent","findent","fzfn","zloc","G__51929","zprint.zfns/zstring","zprint.zfns/zfirst","hanging","G__51930","G__51931","G__51932","value__51598__auto__","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","zprint.zprint.concat_no_nil.cljs$core$IFn$_invoke$arity$variadic","zprint.zprint/replace-color","local-color","vec__51937","vec__51940","string","color","p__51951","p__51952","map__51953","map__51954","vec__51955","zprint.zprint/fzprint-two-up","one-line?","do-in-hang?","map-depth","hang?","dbg-local?","dbg-cnt?","indent","indent-arg","flow?","key-color","key-depth-color","key-value-color","justify-width","lloc","rloc","xloc","pair","vec__51962","vec__51965","local-hang?","local-options","loptions","roptions","local-roptions","value-color-map","G__51969","zprint.zfns/zsexpr","zprint.config.merge_deep.cljs$core$IFn$_invoke$arity$variadic","modifier-set","modifier?","G__51975","zprint.zprint/middle-element?","G__51976","arg-1","zprint.zprint/fzprint*","arg-1-line-count","arg-1-max-width","arg-1-lines","combined-arg-1","G__51978","G__51979","G__51980","arg-1-fit-oneline?","arg-1-fit?","arg-1-width","hanging-width","hanging-spaces","hanging-indent","flow-indent","zprint.zfns/zvector?","vec__51981","zprint.zprint/fzprint-binding-vec","G__51988","G__51989","G__51990","hang-count","zprint.zfns/zcount","hanging-lines","fit?","flow-it?","flow","flow-lines","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","G__51991","G__51992","G__51993","G__51994","zprint.zprint/fzprint-flow-seq","cljs.core/nnext","p__52000","map__52001","map__52002","zprint.zprint/fzprint-justify-width","justify?","firsts","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","p1__51995#","G__52005","G__52006","G__52007","style-seq","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","each-one-line?","p1__51996#","p2__51997#","p1__51998#","p2__51999#","x__4273__auto__","y__4274__auto__","cljs.core/second","G__52013","zprint.zprint/fit-within?","size","zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$3","remaining","zprint.zprint/remove-hangflow","hf-style-vec","p__52024","map__52025","map__52026","zprint.zprint/fzprint-map-two-up","force-nl?","parallel?","caller-map","len","caller-options","justify-options","G__52043","G__52044","beginning-coll","cljs.core/butlast","beginning-remaining","zprint.zprint.fit_within_QMARK_.cljs$core$IFn$_invoke$arity$2","beginning","zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$3","cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic","end-coll","end-remaining","end","temp__5735__auto__","end-result","zprint.zprint/compare-keys","x","y","cljs.core/compare","zprint.zprint/compare-ordered-keys","key-value","zdotdotdot","p__52055","map__52056","map__52057","zprint.zprint/order-out","sort?","sort-in-code?","key-order","in-code?","access","p1__52052#","p2__52053#","cljs.core.sort.cljs$core$IFn$_invoke$arity$2","G__52065","G__52066","fexpr__52064","zprint.zfns/zdotdotdot","G__52067","G__52068","zprint.zprint/pair-element?","zprint.zfns/zcomment?","zprint.zfns/zuneval?","p__52073","map__52074","zprint.zprint/remove-key-seq","m","ks","this-key","next-key","removed-map","G__52078","G__52079","zprint.zprint/ignore-key-seq-silent","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$3","zprint.zprint/ignore-key-seq","cljs.core/assoc-in","p__52086","map__52087","map__52088","zprint.zprint/map-ignore","key-ignore","key-ignore-silent","ignored-silent","ignored","zprint.zprint/partition-all-2-nc","no-sort?","index","vec__52107","new-remaining","pair-vec","new-no-sort?","vec__52110","comment-seq","rest-seq","p1__52095#","cljs.core/split-with","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","zprint.zprint/cleave-end","G__52118","zprint.zfns/zsymbol?","G__52121","zprint.zfns/zreader-cond-w-symbol?","vec__52123","rev-seq","cljs.core/reverse","split-non-coll","p1__52115#","zprint.zfns/zcoll?","zprint.zfns/zreader-cond-w-coll?","cljs.core/list","remainder","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","zprint.zprint/partition-all-sym","part-sym","p1__52127#","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","zprint.zfns/znil?","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","vec__52162","next-remaining","new-out","G__52186","cljs.core/ffirst","G__52189","G__52190","cljs.core/nthnext","G__52191","G__52192","cljs.core/cons","G__52203","zprint.zprint/rstr-vec","r-str","r-type","nl","G__52208","zprint.zfns/zlast","zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$5","p__52213","map__52214","map__52215","nl-separator?","G__52220","l-str","l-str-vec","r-str-vec","zprint.zprint.rstr_vec.cljs$core$IFn$_invoke$arity$4","G__52222","G__52223","G__52224","zprint.zprint/interpose-nl-hf","zprint.zfns/zseqnws","p__52229","map__52230","zprint.zprint/fzprint-hang","zloc-count","G__52233","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__52239","fexpr__52238","G__52240","G__52241","G__52242","hr-lines","fd-lines","hr-good?","p__52245","map__52246","map__52247","zprint.zprint/fzprint-pairs","G__52250","G__52251","G__52252","G__52253","vec__52254","part","zprint.zfns/zmap-right","cljs.core/identity","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","p__52260","map__52262","map__52263","zprint.zprint/fzprint-extend","G__52266","G__52267","G__52268","G__52269","p1__52257#","zprint.zprint/concatv!","seq52278","G__52279","self__4776__auto__","cols","col","zprint.zprint/fzprint-one-line","seq-right","zprint.zfns/zmap","last-index","gt-1?","zloc-seq","new-ind","cljs.core/long","vec__52305","vec__52308","next-zloc","sep","next-options","next-out","next-lines","zprint.zprint.concatv_BANG_.cljs$core$IFn$_invoke$arity$variadic","zprint.zprint/fzprint-seq","p1__52318#","p2__52319#","zprint.zprint.zpmap.cljs$core$IFn$_invoke$arity$4","G__52339","G__52340","G__52341","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","G__52349","G__52353","G__52354","G__52366","coll-print","one-line","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","one-line-lines","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","p1__52360#","cljs.core/PersistentVector","zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$4","p__52375","map__52376","zprint.zprint/fzprint-hang-one","G__52380","G__52385","G__52386","G__52387","zprint.zprint/count-constant-pairs","seq-right-rev","element-count","constant-required?","pair-size","zprint.zfns/zconstant?","p__52400","map__52401","map__52402","zprint.zprint/constant-pair","constant-pair?","constant-pair-min","paired-item-count","non-paired-item-count","pair-seq","G__52422","zprint.zprint/fzprint-hang-remaining","p__52427","map__52430","map__52431","hang-avoid","vec__52437","vec__52440","vec__52443","flow-result","G__52453","G__52454","G__52456","G__52457","G__52458","G__52459","hang-result","G__52469","G__52470","G__52471","G__52475","G__52476","G__52477","zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$7","zprint.zprint/body-set","zprint.zprint/body-map","zprint.zprint/noarg1-set","zprint.zprint/noarg1-map","zprint.zprint/noarg1","fn-type","zprint.zprint/fn-style->caller","p__52493","map__52495","zprint.zprint/allow-one-line?","fn-force-nl","fn-gt2-force-nl","fn-gt3-force-nl","future-caller","zprint.zprint/modify-zloc","vec__52511","trigger-symbol","modify-fn","return-altered-zipper-value","call-fn?","G__52539","return","p__52547","map__52549","zprint.zprint/fzprint-list*","no-arg1?","G__52556","G__52557","G__52558","zprint.zfns/ztake-append","l-str-len","arg-1-coll?","G__52561","zprint.zfns/zkeyword?","G__52562","arg-1-indent-alt?","fn-str","G__52564","G__52567","one-line-ok?","fexpr__52574","indent-adj","default-indent","G__52576","zprint.zfns/zlist?","arg-1-indent","G__52578","one-line-ind","G__52580","G__52581","G__52582","G__52585","zprint.zfns/zsecond","vec__52587","binding-style-vec","G__52590","G__52591","G__52592","G__52595","G__52596","G__52597","G__52599","G__52600","zprint.zfns/znthnext","G__52602","G__52603","G__52604","G__52619","vec__52622","second-element","third","zprint.zfns/zthird","first-three","G__52632","G__52633","G__52634","G__52645","G__52646","G__52647","zprint.zprint.fzprint_hang_remaining.cljs$core$IFn$_invoke$arity$6","arg-vec-index","G__52656","p1__52545#","G__52657","zprint.zfns/zfind","G__52659","doc-string?","G__52661","mixin-start","mixin-length","mixins?","doc-string","mixins","vec__52662","mixin-sentinal","zprint.zfns/zfourth","G__52669","G__52670","G__52675","G__52676","G__52677","G__52682","G__52683","G__52684","G__52685","G__52686","G__52687","G__52688","G__52689","G__52690","G__52691","G__52692","G__52693","G__52694","G__52695","G__52696","G__52697","G__52698","G__52699","local-indent","zprint.zprint/fzprint-list","zprint.zprint/fzprint-anon-fn","zprint.zprint/any-zcoll?","coll?-seq","p1__52704#","p2__52705#","p__52707","map__52710","map__52711","zprint.zprint/wrap-zmap","wrap-after-multi?","cur-seq","cur-ind","previous-newline?","next-seq","vec__52736","multi?","this-seq","linecnt","last-width","newline?","zprint.zprint/remove-nl","p1__52753#","zprint.zprint/internal-validate","error-str","errors","zprint.config.validate_options.cljs$core$IFn$_invoke$arity$1","p__52764","map__52767","map__52768","zprint.zprint/fzprint-vec*","wrap-coll?","wrap?","binding?","option-fn-first","respect-nl?","map__52775","map__52776","new-options","first-sexpr","G__52777","zprint.zfns/zfirst-no-comment","zprint.zfns/zmap-w-nl","zprint.zprint/fzprint-vec","zprint.zprint/fzprint-array","zprint.zprint/fzprint-set","zprint.zprint/interpose-either","sep-true","sep-nil","pred?","interpose?","zprint.zprint.conj_it_BANG_.cljs$core$IFn$_invoke$arity$variadic","G__52804","p__52807","map__52812","zprint.zprint/interpose-either-nl-hf","sep-true-nl","sep-nil-nl","nl-separator-flow?","suboptions","pred-fn","add-nl?","vec__52831","hangflow","p__52867","map__52872","map__52873","zprint.zprint/fzprint-map*","ztype","comma?","lift-ns?","lift-ns-in-code?","vec__52887","vec__52890","ns","lift-pair-seq","zprint.zfns/zlift-ns","pair-count","pair-print-one-line","cljs.core/constantly","pair-print","p1__52862#","zprint.zprint/fzprint-map","vec__52917","lifted-map","zprint.zprint/object-str?","G__52924","zprint.zprint/fzprint-object","zloc-value","zprint.zfns/zobj-to-vec","zprint.zprint/hash-identity-str","obj","cljs.core/hash","p__52929","map__52930","map__52931","zprint.zprint/fzprint-atom","object?","zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$4","zprint.zfns/zderef","zprint.zprint/fzprint-future-promise-delay-agent","zloc-type","zprint.zfns/zfuture?","zprint.zfns/zpromise?","zprint.zfns/zdelay?","zprint.zfns/zagent?","cljs.core/realized?","zprint.zprint.fzprint_object.cljs$core$IFn$_invoke$arity$3","type-str","G__52947","zloc-realized?","G__52948","p__52949","map__52950","map__52951","zprint.zprint/fzprint-fn-obj","arg-1-left","arg-1-right","class-str","cljs.core/type","name-js","name-split","arg-2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","zprint.zprint/fzprint-ns","cljs.core/ns-name","zprint.zprint/dec-depth","p__52957","map__52958","map__52959","zprint.zprint/fzprint-record","record-type?","to-string?","G__52962","G__52963","G__52964","G__52967","G__52968","G__52969","tokens","zprint.zprint/fzprint-meta","zprint.zprint.fzprint_flow_seq.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","zprint.zprint/fzprint-reader-macro","zstr","G__52978","alt-at?","reader-cond?","namespaced?","at?","G__52980","zprint.zfns/ztag","G__52982","G__52986","floc","G__52987","zprint.zprint/prefix-tags","zprint.zprint/prefix-options","prefix-tag","p__53008","map__53009","hex?","shift-seq","string-str?","string-color","max-depth","trim-comments?","max-hang-depth","max-hang-span","max-hang-count","cljs.core/deref","avail","dbg-data","dbg-focus?","zprint.zfns/zfind-path","zprint.zfns/zrecord?","zprint.zfns/zmap?","zprint.zfns/zset?","zprint.zfns/zanonfn?","zprint.zfns/zfn-obj?","zprint.zfns/zarray?","zprint.zfns/zexpandarray","zprint.zfns/zatom?","zprint.zfns/zmeta?","G__53034","G__53035","zprint.zfns/zns?","zprint.zfns/zreader-macro?","overflow-in-hang?","zcomment","clojure.string/replace","inline-spaces","zprint.zfns/zinlinecomment?","zprint.zfns/zwhitespaceorcomment?","zprint.zfns/znumstr","zprint.zprint/last-space","from-index","seq-after-space","p1__53040#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","space-index","zprint.zprint/next-space","p1__53043#","p__53045","vec__53046","zprint.zprint/wrap-comment","stype","start","comment-width","semi-str","rest-str","space-str","comment-str","last-space-index","next-comment","clojure.string/trimr","p__53058","vec__53059","zprint.zprint/loc-vec","split","zprint.zprint/style-loc-vec","cljs.core.reductions.cljs$core$IFn$_invoke$arity$3","zprint.zprint/lift-vec","out-vec","element-vec","zprint.zprint/lift-style-vec","p__53068","map__53069","zprint.zprint/fzprint-wrap-comments","start-col","wrap-style-vec","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","out-style-vec","p__53077","map__53079","zprint.zprint/fzprint-inline-comments","cvec","vec__53089","vec__53092","ne","nn","next-element","new-element","zprint.zprint/fzprint","zprint.zutil/add-spec-to-docstring","zprint.zprint/line-count","cljs.core/re-seq","zprint.zprint/line-widths","zprint.zprint/max-width","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","G__53106","zprint.zprint/expand-tabs","tab-size","char-seq","this-char","tab-expansion","cljs.core/mod","cljs.core/rest","zprint.zprint.expand_tabs.cljs$core$IFn$_invoke$arity$2","this__4439__auto__","k__4440__auto__","this__4441__auto__","k53110","else__4442__auto__","G__53117","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","ret__4461__auto__","p__53140","vec__53141","k__4462__auto__","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","G__53109","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","this__4435__auto__","h__4297__auto__","fexpr__53158","coll__4436__auto__","cljs.core/hash-unordered-coll","this53111","other53112","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core/-with-meta","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__53159","cljs.core/keyword-identical?","expr__53160","G__53162","G__53163","G__53164","G__53165","this__4451__auto__","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","zprint.zprint/r","this__4482__auto__","writer__4483__auto__","cljs.core/-write","G__53114","extmap__4478__auto__","G__53166","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","zprint.zprint/->r","zprint.zprint/map->r","zprint.zprint/make-record"]]],"~:cache-keys",["~#cmap",[["^2P","goog/dom/tagname.js"],[1573583361000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^M",[]],"~:deps-syms",["^X","~$goog.dom.HtmlElement"]]],["^2P","rewrite_clj/node/token.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","~$rewrite-clj.node.protocols"]]],["^2P","cljs/spec/gen/alpha.cljs"],[1576261309000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","~$goog.Uri"]]],["^2P","cljs/tools/reader/impl/utils.cljs"],[1551455708000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^[","~$goog.string"]]],["^2P","goog/math/math.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","~$goog.array","~$goog.asserts"]]],["^2P","rewrite_clj/parser/core.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","~$rewrite-clj.node","~$rewrite-clj.reader","~$rewrite-clj.parser.keyword","~$rewrite-clj.parser.string","~$rewrite-clj.parser.token","~$rewrite-clj.parser.whitespace","~$cljs.tools.reader.reader-types"]]],["^2P","rewrite_clj/parser/string.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3;","^3<","^38"]]],["^2P","goog/html/trustedtypes.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","goog/labs/useragent/browser.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^39","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^2P","goog/html/safeurl.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^3:","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3D"]]],["^2P","goog/array/array.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^3:"]]],["^2P","rewrite_clj/zip/seqz.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","~$rewrite-clj.zip.base","~$rewrite-clj.zip.editz","~$rewrite-clj.zip.findz","~$rewrite-clj.zip.insert","~$rewrite-clj.zip.move","~$clojure.zip"]]],["^2P","rewrite_clj/zip/move.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","~$rewrite-clj.zip.whitespace","^3P"]]],["^2P","goog/debug/error.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","rewrite_clj/zip.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3K","^T","^3O","^3M","^3L","^3N","~$rewrite-clj.zip.removez","~$rewrite-clj.zip.seqz","^3P"]]],["^2P","rewrite_clj/zip/editz.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3K","^3O","^3R","~$rewrite-clj.zip.utils","^3Q","^3;","^3P"]]],["^2P","cljs/tools/reader/edn.cljs"],[1551455708000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","~$cljs.tools.reader.impl.errors","^3A","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^38","~$goog.string.StringBuffer"]]],["^2P","zprint/rewrite.cljc"],[1553196208000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^[","^10","^T","^3;","^V","^3K","^3Q","^3O","^3R","^3L","^3P"]]],["^2P","goog/dom/nodetype.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","cljs/tools/reader/impl/inspect.cljs"],[1551455708000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W"]]],["^2P","zprint/config.cljc"],[1553196208000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^[","~$clojure.set","~$clojure.data","~$zprint.spec","~$zprint.rewrite","~$cljs.reader"]]],["^2P","cljs/tools/reader.cljs"],[1551455708000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3A","^3V","^3W","^3U","^39","^38","^3Y"]]],["^2P","rewrite_clj/node/forms.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^36"]]],["^2P","rewrite_clj/zip/insert.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3K","^3Q","^3;","^3P"]]],["^2P","goog/string/typedstring.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","rewrite_clj/zip/utils.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3P"]]],["^2P","goog/object/object.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","goog/dom/asserts.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^3:"]]],"~:SHADOW-TIMESTAMP",[1580514166000,1576261309000],["^2P","goog/math/long.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^3:","~$goog.reflect"]]],["^2P","rewrite_clj/node/reader_macro.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^36","~$rewrite-clj.node.whitespace"]]],["^2P","goog/html/trustedresourceurl.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^3:","~$goog.html.trustedtypes","^3G","^3H","^3I","^3J"]]],["^2P","goog/string/internal.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","goog/functions/functions.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","rewrite_clj/zip/findz.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3K","^3O","^3;","^3Q","^3P"]]],["^2P","goog/html/safestyle.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^39","^3:","~$goog.html.SafeUrl","^3I","^3J","^3D"]]],["^2P","goog/dom/safe.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^3:","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^47","^3F","~$goog.html.uncheckedconversions","^3I","^3D"]]],["^2P","clojure/walk.cljs"],[1576261309000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W"]]],["^2P","goog/structs/map.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^2P","rewrite_clj/node/meta.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^36","^45"]]],["^2P","goog/html/safehtml.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^39","^3:","~$goog.dom.TagName","~$goog.dom.tags","^4;","^4<","~$goog.html.SafeStyleSheet","^47","^3F","^46","^3G","^3H","~$goog.labs.userAgent.browser","^3C","^3I","^3J","^3D"]]],["^2P","goog/dom/tags.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^3C"]]],["^2P","rewrite_clj/node/stringz.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^36","^3X","^["]]],["^2P","rewrite_clj/node/comment.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^36"]]],["^2P","rewrite_clj/node/keyword.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^36"]]],["^2P","cljs/reader.cljs"],[1576261309000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3C","^3X","~$cljs.tools.reader.edn","^3Y"]]],["^2P","goog/asserts/asserts.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^2P","zprint/zutil.cljc"],[1553196208000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^[","^Y","^T","^3;","^V","^3K","^3Q","^3O","^3R","^3L","^3P"]]],["^2P","goog/uri/uri.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^39","^3:","^38","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^2P","goog/i18n/bidi.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","rewrite_clj/node/protocols.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^["]]],["^2P","rewrite_clj/node/seq.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^36"]]],["^2P","rewrite_clj/node/uneval.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^36"]]],["^2P","cljs/spec/alpha.cljs"],[1576261309000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3C","~$clojure.walk","~$cljs.spec.gen.alpha","^["]]],["^2P","goog/fs/url.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","goog/base.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",[]]],["^2P","goog/structs/structs.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^39","^3C"]]],["^2P","cljs/tools/reader/impl/errors.cljs"],[1551455708000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3A","^[","~$cljs.tools.reader.impl.inspect"]]],["^2P","rewrite_clj/node/whitespace.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^36"]]],["^2P","rewrite_clj/node/coercer.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^36","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^45"]]],["^2P","clojure/string.cljs"],[1576261309000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^38","^3Y"]]],["^2P","rewrite_clj/parser.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","~$rewrite-clj.parser.core","^3;","^3<"]]],["^2P","rewrite_clj/parser/keyword.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3;","^3A","^3<"]]],["^2P","zprint/zfns.cljc"],[1553196208000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W"]]],["^2P","rewrite_clj/parser/token.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3;","^3<","^38"]]],["^2P","goog/string/string.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","~$goog.dom.safe","^4=","^3I","^3D"]]],["^2P","clojure/data.cljs"],[1576261309000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3Z"]]],["^2P","goog/reflect/reflect.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","rewrite_clj/node/fn.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^36","^4L"]]],["^2P","goog/labs/useragent/util.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^3D"]]],["^2P","rewrite_clj/node.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","~$rewrite-clj.node.coercer","^36","^4Q","^4X","^45","^4Y","^4O","^4P","^4U","^4S","^4W","^4R","^4T","^4V"]]],["^2P","rewrite_clj/zip/removez.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3O","^3T","^3Q","^3P"]]],["^2P","clojure/zip.cljs"],[1576261309000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W"]]],["^2P","goog/string/stringbuffer.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","cljs/tools/reader/reader_types.cljs"],[1551455708000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3V","^38","^3Y"]]],["^2P","goog/iter/iter.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^39","^3:","^49","~$goog.math"]]],["^2P","zprint/spec.cljc"],[1553196208000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","~$cljs.spec.alpha"]]],["^2P","goog/html/uncheckedconversions.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^3:","^4:","^4;","^4<","^4B","^47","^3F","^3I","^3D"]]],["^2P","rewrite_clj/reader.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3X","^3A","^3W","^38","^36"]]],["^2P","rewrite_clj/node/quote.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^36"]]],["^2P","cljs/tools/reader/impl/commons.cljs"],[1551455708000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3U","^3A","^3V"]]],["^2P","goog/dom/htmlelement.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X"]]],["^2P","cljs/core.cljs"],[1576261309000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["~$goog.math.Long","~$goog.math.Integer","^38","^3C","^39","^37","^3Y"]]],["^2P","goog/html/safescript.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^3:","^46","^3I","^3J"]]],["^2P","goog/html/safestylesheet.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^39","^3:","^4<","^3C","^3I","^3J","^3D"]]],["^2P","goog/math/integer.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^44"]]],["^2P","zprint/zprint.cljc"],[1553196208000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^[","^Y","^Z","^U","^10","^T","^V"]]],["^2P","clojure/set.cljs"],[1576261309000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W"]]],["^2P","goog/uri/utils.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^39","^3:","^38"]]],["^2P","goog/string/const.js"],[1573583361000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^3:","^3J"]]],["^2P","rewrite_clj/zip/base.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3;","^T","^3Q","^3P"]]],["^2P","rewrite_clj/zip/whitespace.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3;","^3P"]]],["^2P","zprint/ansi.cljc"],[1553196208000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^["]]],["^2P","rewrite_clj/parser/whitespace.cljs"],[1523216157000,"^31",["^ ","^32",null,"^33",["^M",[]],"^34",["^X","^W","^3;","^3<"]]]]],"~:clj-info",["^ ","jar:file:/Users/wvelezva/.m2/repository/zprint/zprint/0.4.15/zprint-0.4.15.jar!/zprint/smacros.cljc",1553196208000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1551455708000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1551455708000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1540637940000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1551455708000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1551455708000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1501012539000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1551455708000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/spec/alpha.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/zprint/zprint/0.4.15/zprint-0.4.15.jar!/zprint/macros.cljc",1553196208000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1551455708000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1563395860000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/reader.clj",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/spec/gen/alpha.cljc",1576261309000,"jar:file:/Users/wvelezva/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1576261309000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","zprint/zprint.cljc","^7",1,"^8",14,"^9",1,"^:",27,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^G","^H","^G","^I","^G","^J","^G","^K","^G"],"^L",["^M",[]],"^N","^O","^R",null,"^S",["^ ","^T","^T","~$p","^T","^U","^U","^V","^V","^W","^W","^X","^X","^Y","^Y","^Z","^Z","~$s","^[","~$z","^V","^[","^[","^10","^10"],"^11",["^M",["^12","^13"]],"~:shadow/js-access-global",["^M",["Error"]],"^14",["^ ","^15","^Y","^16","^Y","^17","^Y","^18","^Y","^19","^Y","^1:","^Y","^1;","^Y","^1<","^Y","^1=","^Y","^1>","^Y","^1?","^Y","^1@","^Y","^1A","^Y","^1B","^Y","^1C","^Y","^1D","^U","^1E","^Y","^1F","^Y","^1G","^Y","^1H","^U","^1I","^Y","^1J","^Y","^1K","^Y","^1L","^Y","^1M","^Y","^1N","^Z","^1O","^Y","^1P","^Y","^1Q","^Y","^1R","^Y","^1S","^10","^1T","^Y","^1U","^Y","^1V","^Y","^1W","^Y","^1X","^Y","^1Y","^Y","^1Z","^Y","^1[","^Y","^20","^Y","^21","^Y","^22","^Y","^23","^Y","^24","^Y","^25","^Y","^26","^Y","^27","^Y","^28","^Y","^29","^Y","^2:","^Y","^2;","^Y","^2<","^Y","^2=","^Y","^2>","^Y","^2?","^Y","^2@","^Y","^2A","^Y","^2B","^Y","^2C","^Y","^2D","^Y","^2E","^Y","^2F","^Y"],"~:defs",["^ ","~$body-set",["^ ","^N","~$zprint.zprint/body-set","^6","zprint/zprint.cljc","^7",2446,"^8",1,"^9",2446,"^:",14,"^5",["^ ","^6","zprint/zprint.cljc","^7",2446,"^8",6,"^9",2446,"^:",14],"~:tag","~$cljs.core/ISet"],"~$allow-one-line?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2487,"^8",7,"^9",2487,"^:",22,"~:arglists",["^2H",["~$quote",["^2H",[[["^ ","~:keys",["~$fn-force-nl","~$fn-gt2-force-nl","~$fn-gt3-force-nl"],"^2K","~$options"],"~$len","~$fn-style"]]]]],"~:doc","Should we allow this function to print on a single line?"],"^N","~$zprint.zprint/allow-one-line?","^6","zprint/zprint.cljc","^:",22,"~:method-params",["^2H",[["~$p__52493","^6:","^6;"]]],"~:protocol-impl",null,"~:arglists-meta",["^2H",[null,null]],"^8",1,"~:variadic?",false,"^7",2487,"~:ret-tag","~$boolean","^9",2487,"~:max-fixed-arity",3,"~:fn-var",true,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^66","^67","^68"],"^2K","^69"],"^6:","^6;"]]]]],"^6<","Should we allow this function to print on a single line?"],"~$replace-color",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",665,"^8",7,"^9",665,"^:",20,"^63",["^2H",["^64",["^2H",[["~$local-color","~$style-vec"]]]]],"^6<","Given a style-vec with exactly one thing in it, replace the color\n  with whatever local color we have determined is correct."],"^N","~$zprint.zprint/replace-color","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["^6H","^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",665,"^6C",["^M",[null,"~$cljs.core/IVector"]],"^9",665,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6H","^6I"]]]]],"^6<","Given a style-vec with exactly one thing in it, replace the color\n  with whatever local color we have determined is correct."],"~$fzprint-inline-comments",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3899,"^8",7,"^9",3899,"^:",30,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["~$width"],"^2K","^69"],"^6I"]]]]],"^6<","Try to bring inline comments back onto the line on which they belong."],"^N","~$zprint.zprint/fzprint-inline-comments","^6","zprint/zprint.cljc","^:",30,"^6>",["^2H",[["~$p__53077","^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3899,"^6C",["^M",["~$clj","^6K"]],"^9",3899,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^6M"],"^2K","^69"],"^6I"]]]]],"^6<","Try to bring inline comments back onto the line on which they belong."],"~$right-separator-map",["^ ","^N","~$zprint.zprint/right-separator-map","^6","zprint/zprint.cljc","^7",154,"^8",1,"^9",154,"^:",25,"^5",["^ ","^6","zprint/zprint.cljc","^7",154,"^8",6,"^9",154,"^:",25],"^5[","~$cljs.core/IMap"],"~$fzprint-justify-width",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",961,"^8",7,"^9",961,"^:",28,"^63",["^2H",["^64",["^2H",[["~$caller",["^30",[["^ ","^65",["~$justify?"]],"^6U","^2K","^69"]],"~$ind","~$coll"]]]]],"^6<","Figure the width for a justification of a set of pairs in coll.  \n  Also, decide if it makes any sense to justify the pairs at all.\n  For instance, they all need to be one-line."],"^N","~$zprint.zprint/fzprint-justify-width","^6","zprint/zprint.cljc","^:",28,"^6>",["^2H",[["^6U","~$p__52000","^6W","^6X"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",961,"^6C",["^M",["~$number","~$clj-nil"]],"^9",961,"^6E",4,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U",["^30",[["^ ","^65",["^6V"]],"^6U","^2K","^69"]],"^6W","^6X"]]]]],"^6<","Figure the width for a justification of a set of pairs in coll.  \n  Also, decide if it makes any sense to justify the pairs at all.\n  For instance, they all need to be one-line."],"~$expand-tabs",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3965,"^8",7,"^9",3965,"^:",18,"^63",["^2H",["^64",["^2H",[["~$tab-size","~$s"],["~$s"]]]]],"^6<","Takes a string, and expands tabs inside of the string based\n  on a tab-size argument.","~:top-fn",["^ ","^6B",false,"~:fixed-arity",2,"^6E",2,"^6>",["^2H",[["^72","~$s"],["~$s"]]],"^63",["^2H",[["^72","~$s"],["~$s"]]],"^6A",["^2H",[null,null]]]],"^N","~$zprint.zprint/expand-tabs","^6","zprint/zprint.cljc","^:",18,"^73",["^ ","^6B",false,"^74",2,"^6E",2,"^6>",["^2H",[["^72","~$s"],["~$s"]]],"^63",["^2H",[["^72","~$s"],["~$s"]]],"^6A",["^2H",[null,null]]],"^6>",["^2H",[["^72","~$s"],["~$s"]]],"^6@",null,"^74",2,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"~:methods",[["^ ","^74",2,"^6B",false,"^5[","~$any"],["^ ","^74",1,"^6B",false,"^5[","^77"]],"^7",3965,"^9",3965,"^6E",2,"^6F",true,"^63",["^2H",[["^72","~$s"],["~$s"]]],"^6<","Takes a string, and expands tabs inside of the string based\n  on a tab-size argument."],"~$fzprint-list",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2920,"^8",7,"^9",2920,"^:",19,"^63",["^2H",["^64",["^2H",[["^69","^6W","~$zloc"]]]]],"^6<","Pretty print and focus style a :list element."],"^N","~$zprint.zprint/fzprint-list","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",2920,"^6C",["^M",["^6P","^70"]],"^9",2920,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Pretty print and focus style a :list element."],"~$fzprint-hang-remaining",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2230,"^8",7,"^9",2230,"^:",29,"^63",["^2H",["^64",["^2H",[["^6U",["^30",["^65",["~$dbg?","^6M"],["^ ","^65",["~$hang?","~$constant-pair?","~$constant-pair-min","~$hang-avoid","~$hang-expand","~$hang-diff","~$nl-separator?"]],"^6U","^2K","^69"]],"~$hindent","~$findent","^79","^6;","~$zloc-count"],["^6U","^69","^7D","^7E","^79","^6;"]]]]],"^6<","zloc is already down inside a collection, it is not the collection\n  itself. Operate on what is to the right of zloc.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc.","^73",["^ ","^6B",false,"^74",7,"^6E",7,"^6>",["^2H",[["^6U",["^30",["^65",["^7<","^6M"],["^ ","^65",["^7=","^7>","^7?","^7@","^7A","^7B","^7C"]],"^6U","^2K","^69"]],"^7D","^7E","^79","^6;","^7F"],["^6U","^69","^7D","^7E","^79","^6;"]]],"^63",["^2H",[["^6U",["^30",["^65",["^7<","^6M"],["^ ","^65",["^7=","^7>","^7?","^7@","^7A","^7B","^7C"]],"^6U","^2K","^69"]],"^7D","^7E","^79","^6;","^7F"],["^6U","^69","^7D","^7E","^79","^6;"]]],"^6A",["^2H",[null,null]]]],"^N","~$zprint.zprint/fzprint-hang-remaining","^6","zprint/zprint.cljc","^:",29,"^73",["^ ","^6B",false,"^74",7,"^6E",7,"^6>",["^2H",[["^6U",["^30",["^65",["^7<","^6M"],["^ ","^65",["^7=","^7>","^7?","^7@","^7A","^7B","^7C"]],"^6U","^2K","^69"]],"^7D","^7E","^79","^6;","^7F"],["^6U","^69","^7D","^7E","^79","^6;"]]],"^63",["^2H",[["^6U",["^30",["^65",["^7<","^6M"],["^ ","^65",["^7=","^7>","^7?","^7@","^7A","^7B","^7C"]],"^6U","^2K","^69"]],"^7D","^7E","^79","^6;","^7F"],["^6U","^69","^7D","^7E","^79","^6;"]]],"^6A",["^2H",[null,null]]],"^6>",["^2H",[["^6U",["^30",["^65",["^7<","^6M"],["^ ","^65",["^7=","^7>","^7?","^7@","^7A","^7B","^7C"]],"^6U","^2K","^69"]],"^7D","^7E","^79","^6;","^7F"],["^6U","^69","^7D","^7E","^79","^6;"]]],"^6@",null,"^74",7,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^76",[["^ ","^74",7,"^6B",false,"^5[",["^M",["^6P","^70"]]],["^ ","^74",6,"^6B",false,"^5[",["^M",["^6P","^70"]]]],"^7",2230,"^9",2230,"^6E",7,"^6F",true,"^63",["^2H",[["^6U",["^30",["^65",["^7<","^6M"],["^ ","^65",["^7=","^7>","^7?","^7@","^7A","^7B","^7C"]],"^6U","^2K","^69"]],"^7D","^7E","^79","^6;","^7F"],["^6U","^69","^7D","^7E","^79","^6;"]]],"^6<","zloc is already down inside a collection, it is not the collection\n  itself. Operate on what is to the right of zloc.  We already know\n  that the given zloc won't fit on the current line. [Besides, we\n  ensure that if there are two things remaining anyway. ???] So\n  now, try hanging and see if that is better than flow.  Unless\n  :hang? is nil, in which case we will just flow.  hindent is\n  hang-indent, and findent is flow-indent. This should never be\n  called with :one-line because this is only called from fzprint-list*\n  after the one-line processing is done. If the hindent equals the\n  flow indent, then just do flow.  Do only zloc-count non-whitespace\n  elements of zloc."],"~$blanks",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",30,"^8",7,"^9",30,"^:",13,"^63",["^2H",["^64",["^2H",[["~$n"]]]]],"^6<","Produce a blank string of desired size."],"^N","~$zprint.zprint/blanks","^6","zprint/zprint.cljc","^:",13,"^6>",["^2H",[["~$n"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",30,"^6C","^77","^9",30,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$n"]]]]],"^6<","Produce a blank string of desired size."],"~$remove-hangflow",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",995,"^8",7,"^9",995,"^:",22,"^63",["^2H",["^64",["^2H",[["~$hf-style-vec"]]]]],"^6<","Convert a hangflow style-vec to a regular style-vec."],"^N","~$zprint.zprint/remove-hangflow","^6","zprint/zprint.cljc","^:",22,"^6>",["^2H",[["^7K"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",995,"^6C",["^M",["~$cljs.core/LazySeq","^70"]],"^9",995,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^7K"]]]]],"^6<","Convert a hangflow style-vec to a regular style-vec."],"~$concat-no-nil-alt",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",279,"^8",7,"^9",279,"^:",24,"^63",["^2H",["^64",["^2H",[["~$&","~$rest"]]]]],"^6<","Concatentate multiple sequences, but if any of them are nil, return nil.\n  This version is 15-20% slower than the version below. Keeping it around\n  just for illustrative purposes.","^73",["^ ","^6B",true,"^74",0,"^6E",0,"^6>",[["^2H",["^7O"]]],"^63",["^2H",[["~$&","^7O"]]],"^6A",["^2H",[null]]]],"^N","~$zprint.zprint/concat-no-nil-alt","^6","zprint/zprint.cljc","^:",24,"^73",["^ ","^6B",true,"^74",0,"^6E",0,"^6>",[["^2H",["^7O"]]],"^63",["^2H",[["~$&","^7O"]]],"^6A",["^2H",[null]]],"^6>",[["^2H",["^7O"]]],"^6@",null,"^74",0,"^6A",["^2H",[null]],"^8",1,"^6B",true,"^76",[["^ ","^74",0,"^6B",true,"^5[",["^M",["^6P","^70"]]]],"^7",279,"^6C","^77","^9",279,"^6E",0,"^6F",true,"^63",["^2H",[["~$&","^7O"]]],"^6<","Concatentate multiple sequences, but if any of them are nil, return nil.\n  This version is 15-20% slower than the version below. Keeping it around\n  just for illustrative purposes."],"~$dots",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",35,"^8",7,"^9",35,"^:",11,"^63",["^2H",["^64",["^2H",[["~$n"]]]]],"^6<","Produce a dot string of desired size."],"^N","~$zprint.zprint/dots","^6","zprint/zprint.cljc","^:",11,"^6>",["^2H",[["~$n"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",35,"^6C","^77","^9",35,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$n"]]]]],"^6<","Produce a dot string of desired size."],"~$partition-all-sym",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1292,"^8",7,"^9",1292,"^:",24,"^63",["^2H",["^64",["^2H",[["^69","~$modifier-set","^6X"]]]]],"^6<","Similar to partition-all-2-nc, but instead of trying to pair things\n  up (modulo comments and unevaled expressions), this begins things\n  with a symbol, and then accumulates collections until the next symbol.\n  Returns a seq of seqs, where the first thing in each internal seq is\n  a protocol and the remaining thing in that seq are the expressions that\n  follow.  If there is a single thing, it is returned in its own internal\n  seq. ((P (foo [this a) (bar-me [this] b) (barx [this y] (+ c y))) ...)\n  Made harder by the fact that the symbol might be inside of a #?() reader\n  conditional.  It handles comments before symbols on the symbol indent, \n  and the comments before the collections on the collection indent.  \n  Since it doesn't know how many collections there are, this is not trivial.  \n  Must be called with a sequence of z-things"],"^N","~$zprint.zprint/partition-all-sym","^6","zprint/zprint.cljc","^:",24,"^6>",["^2H",[["^69","^7T","^6X"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1292,"^6C","^6P","^9",1292,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^7T","^6X"]]]]],"^6<","Similar to partition-all-2-nc, but instead of trying to pair things\n  up (modulo comments and unevaled expressions), this begins things\n  with a symbol, and then accumulates collections until the next symbol.\n  Returns a seq of seqs, where the first thing in each internal seq is\n  a protocol and the remaining thing in that seq are the expressions that\n  follow.  If there is a single thing, it is returned in its own internal\n  seq. ((P (foo [this a) (bar-me [this] b) (barx [this y] (+ c y))) ...)\n  Made harder by the fact that the symbol might be inside of a #?() reader\n  conditional.  It handles comments before symbols on the symbol indent, \n  and the comments before the collections on the collection indent.  \n  Since it doesn't know how many collections there are, this is not trivial.  \n  Must be called with a sequence of z-things"],"~$conj-it!",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",42,"^8",7,"^9",42,"^:",15,"^63",["^2H",["^64",["^2H",[["~$&","^7O"]]]]],"^6<","Make a version of conj! that take multiple arguments.","^73",["^ ","^6B",true,"^74",0,"^6E",0,"^6>",[["^2H",["^7O"]]],"^63",["^2H",[["~$&","^7O"]]],"^6A",["^2H",[null]]]],"^N","~$zprint.zprint/conj-it!","^6","zprint/zprint.cljc","^:",15,"^73",["^ ","^6B",true,"^74",0,"^6E",0,"^6>",[["^2H",["^7O"]]],"^63",["^2H",[["~$&","^7O"]]],"^6A",["^2H",[null]]],"^6>",[["^2H",["^7O"]]],"^6@",null,"^74",0,"^6A",["^2H",[null]],"^8",1,"^6B",true,"^76",[["^ ","^74",0,"^6B",true,"^5[","^77"]],"^7",42,"^6C","^77","^9",42,"^6E",0,"^6F",true,"^63",["^2H",[["~$&","^7O"]]],"^6<","Make a version of conj! that take multiple arguments."],"~$fzfit-one-line",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",558,"^8",7,"^9",558,"^:",21,"^63",["^2H",["^64",["^2H",[["^69","~$style-lines-return"]]]]],"^6<","Given the return from style-lines  and options, \n  return true if it fits on a single line."],"^N","~$zprint.zprint/fzfit-one-line","^6","zprint/zprint.cljc","^:",21,"^6>",["^2H",[["^69","^7Y"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",558,"^6C","^6D","^9",558,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^7Y"]]]]],"^6<","Given the return from style-lines  and options, \n  return true if it fits on a single line."],"~$line-count",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3949,"^8",7,"^9",3949,"^:",17,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Count lines in a string."],"^N","~$zprint.zprint/line-count","^6","zprint/zprint.cljc","^:",17,"^6>",["^2H",[["~$s"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3949,"^6C","^6[","^9",3949,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Count lines in a string."],"~$concatv!",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1506,"^8",7,"^9",1506,"^:",15,"^63",["^2H",["^64",["^2H",[["~$v","~$&","^7O"]]]]],"^6<","Given a transient vector v, concatenate all of the other\n  elements in all of the remaining collections onto v.","^73",["^ ","^6B",true,"^74",1,"^6E",1,"^6>",[["^2H",["~$v","^7O"]]],"^63",["^2H",[["~$v","~$&","^7O"]]],"^6A",["^2H",[null]]]],"^N","~$zprint.zprint/concatv!","^6","zprint/zprint.cljc","^:",15,"^73",["^ ","^6B",true,"^74",1,"^6E",1,"^6>",[["^2H",["~$v","^7O"]]],"^63",["^2H",[["~$v","~$&","^7O"]]],"^6A",["^2H",[null]]],"^6>",[["^2H",["~$v","^7O"]]],"^6@",null,"^74",1,"^6A",["^2H",[null]],"^8",1,"^6B",true,"^76",[["^ ","^74",1,"^6B",true]],"^7",1506,"^6C","^77","^9",1506,"^6E",1,"^6F",true,"^63",["^2H",[["~$v","~$&","^7O"]]],"^6<","Given a transient vector v, concatenate all of the other\n  elements in all of the remaining collections onto v."],"~$fzprint-seq",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1561,"^8",7,"^9",1561,"^:",18,"^63",["^2H",["^64",["^2H",[["^69","^6W","~$zloc-seq"]]]]],"^6<","Take a seq of a zloc, created by (zmap identity zloc) when zloc\n  is a collection, or (zmap-right identity zloc) when zloc is already\n  inside of a collection, and return a seq of the fzprint* of each \n  element.  No spacing between any of these elements. Note that this\n  is not a style-vec, but a seq of style-vecs of each of the elements.\n  These would need to be concatenated together to become a style-vec.\n  ind is either a constant or a seq of indents, one for each element in\n  zloc-seq."],"^N","~$zprint.zprint/fzprint-seq","^6","zprint/zprint.cljc","^:",18,"^6>",["^2H",[["^69","^6W","^84"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1561,"^6C",["^M",["^6P","^6K","^70"]],"^9",1561,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^84"]]]]],"^6<","Take a seq of a zloc, created by (zmap identity zloc) when zloc\n  is a collection, or (zmap-right identity zloc) when zloc is already\n  inside of a collection, and return a seq of the fzprint* of each \n  element.  No spacing between any of these elements. Note that this\n  is not a style-vec, but a seq of style-vecs of each of the elements.\n  These would need to be concatenated together to become a style-vec.\n  ind is either a constant or a seq of indents, one for each element in\n  zloc-seq."],"~$loc-vec",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3851,"^8",7,"^9",3851,"^:",14,"^63",["^2H",["^64",["^2H",[["~$start",["~$s"]]]]]],"^6<","Takes the start of this vector and the vector itself."],"^N","~$zprint.zprint/loc-vec","^6","zprint/zprint.cljc","^:",14,"^6>",["^2H",[["^87","~$p__53058"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3851,"^6C","^6[","^9",3851,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^87",["~$s"]]]]]],"^6<","Takes the start of this vector and the vector itself."],"~$partition-all-2-nc",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1216,"^8",7,"^9",1216,"^:",25,"^63",["^2H",["^64",["^2H",[["^69","^6X"]]]]],"^6<","Input is (zseqnws zloc) where one assumes that these are pairs.\n  Thus, a seq of zlocs.  Output is a sequence of seqs, where the\n  seqs are usually pairs, but might be single things.  Doesn't pair\n  up comments or #_(...) unevaled sexpressions.  The ones before\n  the first part of a pair come as a single element in what would\n  usually be a pair, and the ones between the first and second parts\n  of a pair come inside the pair.  There may be an arbitrary number\n  of elements between the first and second elements of the pair\n  (one per line).  If there are any comments or unevaled sexpressions,\n  don't sort the keys, as we might lose track of where the comments\n  or unevaled s-expressions go."],"^N","~$zprint.zprint/partition-all-2-nc","^6","zprint/zprint.cljc","^:",25,"^6>",["^2H",[["^69","^6X"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1216,"^6C",["^M",["^6K","^70"]],"^9",1216,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6X"]]]]],"^6<","Input is (zseqnws zloc) where one assumes that these are pairs.\n  Thus, a seq of zlocs.  Output is a sequence of seqs, where the\n  seqs are usually pairs, but might be single things.  Doesn't pair\n  up comments or #_(...) unevaled sexpressions.  The ones before\n  the first part of a pair come as a single element in what would\n  usually be a pair, and the ones between the first and second parts\n  of a pair come inside the pair.  There may be an arbitrary number\n  of elements between the first and second elements of the pair\n  (one per line).  If there are any comments or unevaled sexpressions,\n  don't sort the keys, as we might lose track of where the comments\n  or unevaled s-expressions go."],"~$fzprint-future-promise-delay-agent",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3352,"^8",7,"^9",3352,"^:",41,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Print out a future or a promise or a delay.  These can only be \n  sexpressions, since they don't exist in a textual representation \n  of code (or data for that matter).  That means that we can use \n  regular sexpression operations on zloc."],"^N","~$zprint.zprint/fzprint-future-promise-delay-agent","^6","zprint/zprint.cljc","^:",41,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3352,"^6C",["^M",["^6P","^70"]],"^9",3352,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Print out a future or a promise or a delay.  These can only be \n  sexpressions, since they don't exist in a textual representation \n  of code (or data for that matter).  That means that we can use \n  regular sexpression operations on zloc."],"~$rightmost",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",569,"^8",7,"^9",569,"^:",16,"^63",["^2H",["^64",["^2H",[["^69"]]]]],"^6<","Increase the rightmost count, if any, and return one if not."],"^N","~$zprint.zprint/rightmost","^6","zprint/zprint.cljc","^:",16,"^6>",["^2H",[["^69"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",569,"^6C",["^M",["^6P","^77"]],"^9",569,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69"]]]]],"^6<","Increase the rightmost count, if any, and return one if not."],"~$split-lf-2",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",60,"^8",7,"^9",60,"^:",17,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Do split for newlines, instead of using regular expressions.\n  Maximum split is 2."],"^N","~$zprint.zprint/split-lf-2","^6","zprint/zprint.cljc","^:",17,"^6>",["^2H",[["~$s"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",60,"^6C","^6K","^9",60,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Do split for newlines, instead of using regular expressions.\n  Maximum split is 2."],"~$c-r-pair",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",579,"^8",7,"^9",579,"^:",15,"^63",["^2H",["^64",["^2H",[["~$commas?","~$rightmost-pair?","~$rightmost?","^69"]]]]],"^6<","Handle the complexity of commas and rightmost-pair with options.\n  If it isn't a rightmost, it loses rightmost status.\n  If it is a rightmost, and in the rightmost pair, it gain one rightmost\n  since it has the right end thing (and we don't care about the comma).\n  If it is the rightmost of the non-rightmost-pair, then the comma\n  matters, and we handle that appropriately.  Whew!"],"^N","~$zprint.zprint/c-r-pair","^6","zprint/zprint.cljc","^:",15,"^6>",["^2H",[["^8C","^8D","^8E","^69"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",579,"^6C",["^M",[null,"^6P","^77","^70"]],"^9",579,"^6E",4,"^6F",true,"^63",["^2H",["^64",["^2H",[["^8C","^8D","^8E","^69"]]]]],"^6<","Handle the complexity of commas and rightmost-pair with options.\n  If it isn't a rightmost, it loses rightmost status.\n  If it is a rightmost, and in the rightmost pair, it gain one rightmost\n  since it has the right end thing (and we don't care about the comma).\n  If it is the rightmost of the non-rightmost-pair, then the comma\n  matters, and we handle that appropriately.  Whew!"],"~$fzprint-fn-obj",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3408,"^8",7,"^9",3408,"^:",21,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["~$object?"]],"~:fn-obj","^2K","^69"]],"^6W","^79"]]]]],"^6<","Print a function object, what you get when you put a function in\n  a collection, for instance.  This doesn't do macros, you will notice.\n  It also can't be invoked when zloc is a zipper."],"^N","~$zprint.zprint/fzprint-fn-obj","^6","zprint/zprint.cljc","^:",21,"^6>",["^2H",[["~$p__52949","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3408,"^6C",["^M",["^6P","^70"]],"^9",3408,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["^8H"]],"^8I","^2K","^69"]],"^6W","^79"]]]]],"^6<","Print a function object, what you get when you put a function in\n  a collection, for instance.  This doesn't do macros, you will notice.\n  It also can't be invoked when zloc is a zipper."],"~$single-line?",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",503,"^8",7,"^9",503,"^:",19,"^63",["^2H",["^64",["^2H",[["^6I"]]]]],"^6<","This looks at a style vec and doesn't do all that style-lines does.\n  It just looks for a new-line in the strings, and returns true if it\n  doesn't find one."],"^N","~$zprint.zprint/single-line?","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",503,"^6C","^6D","^9",503,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6I"]]]]],"^6<","This looks at a style vec and doesn't do all that style-lines does.\n  It just looks for a new-line in the strings, and returns true if it\n  doesn't find one."],"~$fzprint-map*",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3194,"^8",7,"^9",3194,"^:",19,"^63",["^2H",["^64",["^2H",[["^6U","~$l-str","~$r-str",["^30",["^65",["~$one-line?","~$ztype","~$map-depth","~$in-code?"],["^ ","^65",["~$comma?","~$key-ignore","~$key-ignore-silent","^7C","~$force-nl?","~$lift-ns?","~$lift-ns-in-code?"]],"^6U","^2K","^69"]],"^6W","^79"]]]]]],"^N","~$zprint.zprint/fzprint-map*","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["^6U","^8O","^8P","~$p__52867","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3194,"^6C",["^M",["^6P","^70"]],"^9",3194,"^6E",6,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U","^8O","^8P",["^30",["^65",["^8Q","^8R","^8S","^8T"],["^ ","^65",["^8U","^8V","^8W","^7C","^8X","^8Y","^8Z"]],"^6U","^2K","^69"]],"^6W","^79"]]]]]],"~$constant-pair",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1739,"^8",7,"^9",1739,"^:",20,"^63",["^2H",["^64",["^2H",[["^6U",["^30",[["^ ","^65",["^7>","^7?"]],"^6U","^2K","^69"]],"~$seq-right"]]]]],"^6<","Argument is result of (zmap-right identity zloc), that is to say\n  a seq of zlocs.  Output is a [pair-seq non-paired-item-count],\n  if any.  If there are no pair-seqs, pair-seq must be nil, not\n  an empty seq."],"^N","~$zprint.zprint/constant-pair","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["^6U","~$p__52400","^92"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1739,"^6C","^6K","^9",1739,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U",["^30",[["^ ","^65",["^7>","^7?"]],"^6U","^2K","^69"]],"^92"]]]]],"^6<","Argument is result of (zmap-right identity zloc), that is to say\n  a seq of zlocs.  Output is a [pair-seq non-paired-item-count],\n  if any.  If there are no pair-seqs, pair-seq must be nil, not\n  an empty seq."],"~$order-out",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1123,"^8",7,"^9",1123,"^:",16,"^63",["^2H",["^64",["^2H",[["^6U",["^30",[["^ ","^65",["~$sort?","~$sort-in-code?","~$key-order","~$key-value"]],"^6U","^65",["^8T"],"^2K","^69"]],"~$access","~$out"]]]]],"^6<","A variety of sorting and ordering options for the output of\n  partition-all-2-nc.  It can sort, which is the default, but if\n  the caller has a key-order vector, it will extract any keys in\n  that vector and place them first (in order) before sorting the\n  other keys.  If sorting is not called for, does nothing."],"^N","~$zprint.zprint/order-out","^6","zprint/zprint.cljc","^:",16,"^6>",["^2H",[["^6U","~$p__52055","^9:","^9;"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1123,"^6C",["^M",[null,"~$seq","~$cljs.core/IList"]],"^9",1123,"^6E",4,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U",["^30",[["^ ","^65",["^96","^97","^98","^99"]],"^6U","^65",["^8T"],"^2K","^69"]],"^9:","^9;"]]]]],"^6<","A variety of sorting and ordering options for the output of\n  partition-all-2-nc.  It can sort, which is the default, but if\n  the caller has a key-order vector, it will extract any keys in\n  that vector and place them first (in order) before sorting the\n  other keys.  If sorting is not called for, does nothing."],"~$fzprint-two-up",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",676,"^8",7,"^9",676,"^:",21,"^63",["^2H",["^64",["^2H",[["^6U",["^30",["^65",["^8Q","^7<","~$dbg-indent","~$in-hang?","~$do-in-hang?","^8S"],["^ ","^65",["^7=","~$dbg-local?","~$dbg-cnt?","~$indent","~$indent-arg","~$flow?","~$key-color","~$key-depth-color","~$key-value-color"]],"^6U","^2K","^69"]],"^6W","^8C","~$justify-width","^8D",["~$lloc","~$rloc","~$xloc","^2K","~$pair"]]]]]],"^6<","Print a single pair of things (though it might not be exactly a\n  pair, given comments and :extend and the like), like bindings in\n  a let, clauses in a cond, keys and values in a map.  Controlled\n  by various maps, the key of which is caller.  This will return a\n  style-vec (or nil), unless hangflow? is true, in which case it\n  will return [:hang <style-vec>] or [:flow <style-vec>] so that\n  the upstream folks know whether this was a hang or flow and can\n  do the right thing based on that."],"^N","~$zprint.zprint/fzprint-two-up","^6","zprint/zprint.cljc","^:",21,"^6>",["^2H",[["^6U","~$p__51951","^6W","^8C","^9L","^8D","~$p__51952"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",676,"^6C",["^M",["^6K","^70"]],"^9",676,"^6E",7,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U",["^30",["^65",["^8Q","^7<","^9A","^9B","^9C","^8S"],["^ ","^65",["^7=","^9D","^9E","^9F","^9G","^9H","^9I","^9J","^9K"]],"^6U","^2K","^69"]],"^6W","^8C","^9L","^8D",["^9M","^9N","^9O","^2K","^9P"]]]]]],"^6<","Print a single pair of things (though it might not be exactly a\n  pair, given comments and :extend and the like), like bindings in\n  a let, clauses in a cond, keys and values in a map.  Controlled\n  by various maps, the key of which is caller.  This will return a\n  style-vec (or nil), unless hangflow? is true, in which case it\n  will return [:hang <style-vec>] or [:flow <style-vec>] so that\n  the upstream folks know whether this was a hang or flow and can\n  do the right thing based on that."],"~$prefix-tags",["^ ","^N","~$zprint.zprint/prefix-tags","^6","zprint/zprint.cljc","^7",3604,"^8",1,"^9",3604,"^:",17,"^5",["^ ","^6","zprint/zprint.cljc","^7",3604,"^8",6,"^9",3604,"^:",17],"^5[","^6S"],"~$fzprint-flow-seq",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1591,"^8",7,"^9",1591,"^:",23,"^63",["^2H",["^64",["^2H",[["^69","^6W","^84","^8X"],["^69","^6W","^84"]]]]],"^6<","Take a seq of a zloc, created by (zmap identity zloc) or\n  and return a style-vec of the result.  Either it fits on one line, \n  or it is rendered on multiple lines.  You can force multiple lines \n  with force-nl?. If you want it to do less than everything in the \n  original zloc, modify the result of (zmap identity zloc) to just \n  contain what you want to print. ind is either a single indent,\n  or a seq of indents, one for each element in zloc-seq.","^73",["^ ","^6B",false,"^74",4,"^6E",4,"^6>",["^2H",[["^69","^6W","^84","^8X"],["^69","^6W","^84"]]],"^63",["^2H",[["^69","^6W","^84","^8X"],["^69","^6W","^84"]]],"^6A",["^2H",[null,null]]]],"^N","~$zprint.zprint/fzprint-flow-seq","^6","zprint/zprint.cljc","^:",23,"^73",["^ ","^6B",false,"^74",4,"^6E",4,"^6>",["^2H",[["^69","^6W","^84","^8X"],["^69","^6W","^84"]]],"^63",["^2H",[["^69","^6W","^84","^8X"],["^69","^6W","^84"]]],"^6A",["^2H",[null,null]]],"^6>",["^2H",[["^69","^6W","^84","^8X"],["^69","^6W","^84"]]],"^6@",null,"^74",4,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^76",[["^ ","^74",4,"^6B",false,"^5[","^77"],["^ ","^74",3,"^6B",false,"^5[","^77"]],"^7",1591,"^9",1591,"^6E",4,"^6F",true,"^63",["^2H",[["^69","^6W","^84","^8X"],["^69","^6W","^84"]]],"^6<","Take a seq of a zloc, created by (zmap identity zloc) or\n  and return a style-vec of the result.  Either it fits on one line, \n  or it is rendered on multiple lines.  You can force multiple lines \n  with force-nl?. If you want it to do less than everything in the \n  original zloc, modify the result of (zmap identity zloc) to just \n  contain what you want to print. ind is either a single indent,\n  or a seq of indents, one for each element in zloc-seq."],"~$noarg1-map",["^ ","^N","~$zprint.zprint/noarg1-map","^6","zprint/zprint.cljc","^7",2465,"^8",1,"^9",2465,"^:",16,"^5",["^ ","^6","zprint/zprint.cljc","^7",2465,"^8",6,"^9",2465,"^:",16],"^5[","^6S"],"~$zcolor-map",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",625,"^8",7,"^9",625,"^:",17,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["~$color-map"],"^2K","^69"],"~$key-or-str"]]]]],"^6<","Look up the thing in the zprint-color-map.  Accepts keywords or\n  strings."],"^N","~$zprint.zprint/zcolor-map","^6","zprint/zprint.cljc","^:",17,"^6>",["^2H",[["~$p__51912","^:0"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",625,"^6C","^77","^9",625,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^9["],"^2K","^69"],"^:0"]]]]],"^6<","Look up the thing in the zprint-color-map.  Accepts keywords or\n  strings."],"~$fzprint-ns",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3457,"^8",7,"^9",3457,"^:",17,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]]],"^N","~$zprint.zprint/fzprint-ns","^6","zprint/zprint.cljc","^:",17,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3457,"^6C",["^M",["^6P","^70"]],"^9",3457,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]]],"~$str->key",["^ ","^N","~$zprint.zprint/str->key","^6","zprint/zprint.cljc","^7",608,"^8",1,"^9",608,"^:",14,"^5",["^ ","^6","zprint/zprint.cljc","^7",608,"^8",6,"^9",608,"^:",14],"^5[","^6S"],"~$fzprint-hang-one",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1622,"^8",7,"^9",1622,"^:",23,"^63",["^2H",["^64",["^2H",[["^6U",["^ ","^65",["^8Q"],"^2K","^69"],"^7D","^7E","^79"]]]]],"^6<","Try out the given zloc, and if it fits on the current line, just\n  do that. It might fit on the same line, as this may not be the rest\n  of the list that we are printing. If not, check it out with good-enough?\n  and do the best you can.  Three choices, really: fits on same line, \n  does ok as hanging, or better with flow. hindent is hang-indent, and \n  findent is flow-indent, and each contains the initial separator.  \n  Might be nice if the fn-style actually got sent to this fn."],"^N","~$zprint.zprint/fzprint-hang-one","^6","zprint/zprint.cljc","^:",23,"^6>",["^2H",[["^6U","~$p__52375","^7D","^7E","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1622,"^6C",["^M",["^6P","^70"]],"^9",1622,"^6E",5,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U",["^ ","^65",["^8Q"],"^2K","^69"],"^7D","^7E","^79"]]]]],"^6<","Try out the given zloc, and if it fits on the current line, just\n  do that. It might fit on the same line, as this may not be the rest\n  of the list that we are printing. If not, check it out with good-enough?\n  and do the best you can.  Three choices, really: fits on same line, \n  does ok as hanging, or better with flow. hindent is hang-indent, and \n  findent is flow-indent, and each contains the initial separator.  \n  Might be nice if the fn-style actually got sent to this fn."],"~$fzprint-extend",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1481,"^8",7,"^9",1481,"^:",21,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["^7C"]],"~:extend","^2K","^69"]],"^6W","^79"]]]]],"^6<","Print things with a symbol and collections following.  Kind of like with\n  pairs, but not quite. This skips over zloc and does everything to the\n  right of it!"],"^N","~$zprint.zprint/fzprint-extend","^6","zprint/zprint.cljc","^:",21,"^6>",["^2H",[["~$p__52260","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1481,"^6C","^77","^9",1481,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["^7C"]],"^:;","^2K","^69"]],"^6W","^79"]]]]],"^6<","Print things with a symbol and collections following.  Kind of like with\n  pairs, but not quite. This skips over zloc and does everything to the\n  right of it!"],"~$find-what",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",513,"^8",7,"^9",513,"^:",16,"^63",["^2H",["^64",["^2H",[["^6I"]]]]],"^6<","Given a style-vec, come up with a string that gives some hint of \n  where this style-vec came from."],"^N","~$zprint.zprint/find-what","^6","zprint/zprint.cljc","^:",16,"^6>",["^2H",[["^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",513,"^6C",["^M",[null,"^77","^70"]],"^9",513,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6I"]]]]],"^6<","Given a style-vec, come up with a string that gives some hint of \n  where this style-vec came from."],"~$fzprint-atom",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3329,"^8",7,"^9",3329,"^:",19,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["^8H"]],"~:atom","^2K","^69"]],"^6W","^79"]]]]]],"^N","~$zprint.zprint/fzprint-atom","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["~$p__52929","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3329,"^6C",["^M",["^6P","^70"]],"^9",3329,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["^8H"]],"^:A","^2K","^69"]],"^6W","^79"]]]]]],"~$fix-rightcnt",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",595,"^8",7,"^9",595,"^:",19,"^63",["^2H",["^64",["^2H",[["~$rightcnt"]]]]],"^6<","Handle issue with rightcnt."],"^N","~$zprint.zprint/fix-rightcnt","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["^:E"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",595,"^6C","^6[","^9",595,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^:E"]]]]],"^6<","Handle issue with rightcnt."],"~$r",["^ ","~:num-fields",2,"~:protocols",["^M",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","^6S","~$cljs.core/ILookup"]],"^N","~$zprint.zprint/r","^6","zprint/zprint.cljc","^:",13,"~:type",true,"^8",12,"~:internal-ctor",true,"^7",3994,"~:record",true,"^9",3994,"^5[","~$function","~:skip-protocol-flag",["^M",["^:I","^:J","^:K","^:L","^:M","^:N","^:O","^:P","^:Q","^:R","^:S","^:T","^:U","^6S","^:V"]]],"~$remove-nl",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3019,"^8",7,"^9",3019,"^:",16,"^63",["^2H",["^64",["^2H",[["^6X"]]]]],"^6<","Remove any [_ _ :newline] from the seq."],"^N","~$zprint.zprint/remove-nl","^6","zprint/zprint.cljc","^:",16,"^6>",["^2H",[["^6X"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3019,"^6C","^7M","^9",3019,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6X"]]]]],"^6<","Remove any [_ _ :newline] from the seq."],"~$fzprint-map",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3288,"^8",7,"^9",3288,"^:",18,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Format a real map. ONLY WORKES ON STRUCTURES AT PRESENT"],"^N","~$zprint.zprint/fzprint-map","^6","zprint/zprint.cljc","^:",18,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3288,"^6C",["^M",["^6P","^70"]],"^9",3288,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Format a real map. ONLY WORKES ON STRUCTURES AT PRESENT"],"~$fzprint-vec*",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3039,"^8",7,"^9",3039,"^:",19,"^63",["^2H",["^64",["^2H",[["^6U","^8O","^8P",["^30",["^65",["^:E","^8T"],["^ ","^65",["~$wrap-coll?","~$wrap?","~$binding?","~$option-fn-first","~$respect-nl?","^96","^97"]],"^6U","^2K","^69"]],"^6W","^79"]]]]],"^6<","Print basic stuff like a vector or a set.  Several options for how to\n  print them."],"^N","~$zprint.zprint/fzprint-vec*","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["^6U","^8O","^8P","~$p__52764","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3039,"^6C",["^M",["^6P","^70"]],"^9",3039,"^6E",6,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U","^8O","^8P",["^30",["^65",["^:E","^8T"],["^ ","^65",["^;6","^;7","^;8","^;9","^;:","^96","^97"]],"^6U","^2K","^69"]],"^6W","^79"]]]]],"^6<","Print basic stuff like a vector or a set.  Several options for how to\n  print them."],"~$wrap-comment",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3802,"^8",7,"^9",3802,"^:",19,"^63",["^2H",["^64",["^2H",[["^6M",["~$s","~$color","~$stype","^2K","~$element"],"^87"]]]]],"^6<","If this is a comment, and it is too long, word wrap it to the right width.\n  Note that top level comments may well end with a newline, so remove it\n  and reapply it at the end if that is the case."],"^N","~$zprint.zprint/wrap-comment","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["^6M","~$p__53045","^87"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3802,"^6C",["^M",[null,"^6P"]],"^9",3802,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6M",["~$s","^;>","^;?","^2K","^;@"],"^87"]]]]],"^6<","If this is a comment, and it is too long, word wrap it to the right width.\n  Note that top level comments may well end with a newline, so remove it\n  and reapply it at the end if that is the case."],"~$log-lines",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",99,"^8",7,"^9",99,"^:",16,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["~$dbg-print?","^9A","^9B"],"^2K","^69"],"~$dbg-output","^6W","^6I"]]]]],"^6<","Accept a style-vec that we are about to hand to style-lines, and\n  output it if called for, to aid in debugging."],"^N","~$zprint.zprint/log-lines","^6","zprint/zprint.cljc","^:",16,"^6>",["^2H",[["~$p__51678","^;E","^6W","^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",99,"^6C","^70","^9",99,"^6E",4,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^;D","^9A","^9B"],"^2K","^69"],"^;E","^6W","^6I"]]]]],"^6<","Accept a style-vec that we are about to hand to style-lines, and\n  output it if called for, to aid in debugging."],"~$line-widths",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3951,"^8",7,"^9",3951,"^:",18,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Return a vector the lengths of lines."],"^N","~$zprint.zprint/line-widths","^6","zprint/zprint.cljc","^:",18,"^6>",["^2H",[["~$s"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3951,"^6C","^7M","^9",3951,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Return a vector the lengths of lines."],"^9F",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",40,"^8",7,"^9",40,"^:",13,"^63",["^2H",["^64",["^2H",[[]]]]],"^6<","error"],"^N","~$zprint.zprint/indent","^6","zprint/zprint.cljc","^:",13,"^6>",["^2H",[[]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",40,"^6C","^70","^9",40,"^6E",0,"^6F",true,"^63",["^2H",["^64",["^2H",[[]]]]],"^6<","error"],"~$lift-style-vec",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3878,"^8",7,"^9",3878,"^:",21,"^63",["^2H",["^64",["^2H",[["^6I"]]]]],"^6<","Take a style-vec [[s color type] [s color type] [[s color type]\n  [s color type]] [s color type] ...] and lift out the inner vectors."],"^N","~$zprint.zprint/lift-style-vec","^6","zprint/zprint.cljc","^:",21,"^6>",["^2H",[["^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3878,"^6C",["^M",[null,"^77"]],"^9",3878,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6I"]]]]],"^6<","Take a style-vec [[s color type] [s color type] [[s color type]\n  [s color type]] [s color type] ...] and lift out the inner vectors."],"~$fzprint-map-two-up",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1000,"^8",7,"^9",1000,"^:",25,"^63",["^2H",["^64",["^2H",[["^6U",["^30",[["^ ","^65",["^6V","^8X"]],"^6U","^65",["^6M","^:E","^8Q","~$parallel?"],"^2K","^69"]],"^6W","^8C","^6X"]]]]],"^6<","Accept a sequence of pairs, and map fzprint-two-up across those pairs.\n  If you have :one-line? set, this will return nil if it is way over,\n  but it can't accurately tell exactly what will fit on one line, since\n  it doesn't know the separators and such.  So, :one-line? true is a\n  performance optimization, so it doesn't do a whole huge map just to\n  find out that it could not possibly have fit on one line.  So, this\n  returns a sequence of style-vecs, where the indentation for the\n  stuff inside of the pairs is already there, but the separators of\n  the style-vecs (including indentation and commas) is done by the\n  caller of fzprint-map-two-up. Always returns a sequence of vector pairs:\n  [[:hang <style-vec-for-one-pair>] [:flow <style-vec-for-one-pair>] ...].\n  If you want a style vec instead, call remove-hangflow on the return \n  from fzprint-map-two-up.  This will use one-line?, but not check to see\n  that it actually fits.  If you care about that, then you should check the\n  return yourself.  It will, however, make an estimate of whether or not\n  it will fit and if it clearly doesn't, it will return a nil."],"^N","~$zprint.zprint/fzprint-map-two-up","^6","zprint/zprint.cljc","^:",25,"^6>",["^2H",[["^6U","~$p__52024","^6W","^8C","^6X"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1000,"^6C",["^M",["^6P","^6K","^70"]],"^9",1000,"^6E",5,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U",["^30",[["^ ","^65",["^6V","^8X"]],"^6U","^65",["^6M","^:E","^8Q","^;N"],"^2K","^69"]],"^6W","^8C","^6X"]]]]],"^6<","Accept a sequence of pairs, and map fzprint-two-up across those pairs.\n  If you have :one-line? set, this will return nil if it is way over,\n  but it can't accurately tell exactly what will fit on one line, since\n  it doesn't know the separators and such.  So, :one-line? true is a\n  performance optimization, so it doesn't do a whole huge map just to\n  find out that it could not possibly have fit on one line.  So, this\n  returns a sequence of style-vecs, where the indentation for the\n  stuff inside of the pairs is already there, but the separators of\n  the style-vecs (including indentation and commas) is done by the\n  caller of fzprint-map-two-up. Always returns a sequence of vector pairs:\n  [[:hang <style-vec-for-one-pair>] [:flow <style-vec-for-one-pair>] ...].\n  If you want a style vec instead, call remove-hangflow on the return \n  from fzprint-map-two-up.  This will use one-line?, but not check to see\n  that it actually fits.  If you care about that, then you should check the\n  return yourself.  It will, however, make an estimate of whether or not\n  it will fit and if it clearly doesn't, it will return a nil."],"~$rstr-vec",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1387,"^8",7,"^9",1387,"^:",15,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79","^8P","~$r-type"],["^69","^6W","^79","^8P"]]]]],"^6<","Create an r-str-vec with, possibly, a newline at the beginning if\n  the last thing before it is a comment.","^73",["^ ","^6B",false,"^74",5,"^6E",5,"^6>",["^2H",[["^69","^6W","^79","^8P","^;R"],["^69","^6W","^79","^8P"]]],"^63",["^2H",[["^69","^6W","^79","^8P","^;R"],["^69","^6W","^79","^8P"]]],"^6A",["^2H",[null,null]]]],"^N","~$zprint.zprint/rstr-vec","^6","zprint/zprint.cljc","^:",15,"^73",["^ ","^6B",false,"^74",5,"^6E",5,"^6>",["^2H",[["^69","^6W","^79","^8P","^;R"],["^69","^6W","^79","^8P"]]],"^63",["^2H",[["^69","^6W","^79","^8P","^;R"],["^69","^6W","^79","^8P"]]],"^6A",["^2H",[null,null]]],"^6>",["^2H",[["^69","^6W","^79","^8P","^;R"],["^69","^6W","^79","^8P"]]],"^6@",null,"^74",5,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^76",[["^ ","^74",5,"^6B",false,"^5[","^7M"],["^ ","^74",4,"^6B",false,"^5[","^7M"]],"^7",1387,"^9",1387,"^6E",5,"^6F",true,"^63",["^2H",[["^69","^6W","^79","^8P","^;R"],["^69","^6W","^79","^8P"]]],"^6<","Create an r-str-vec with, possibly, a newline at the beginning if\n  the last thing before it is a comment."],"~$zat",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",85,"^8",7,"^9",85,"^:",10,"^63",["^2H",["^64",["^2H",[["^69","~$value"]]]]],"^6<","Takes an option map and the return from zfuture.  If the\n  options map has (:parallel? options) as true, then deref\n  the value, otherwise just pass it through."],"^N","~$zprint.zprint/zat","^6","zprint/zprint.cljc","^:",10,"^6>",["^2H",[["^69","^;U"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",85,"^9",85,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^;U"]]]]],"^6<","Takes an option map and the return from zfuture.  If the\n  options map has (:parallel? options) as true, then deref\n  the value, otherwise just pass it through."],"~$interpose-either",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3129,"^8",7,"^9",3129,"^:",23,"^63",["^2H",["^64",["^2H",[["~$sep-true","~$sep-nil","~$pred?","^6X"]]]]],"^6<","Do the same as interpose, but different seps depending on pred?."],"^N","~$zprint.zprint/interpose-either","^6","zprint/zprint.cljc","^:",23,"^6>",["^2H",[["^;X","^;Y","^;Z","^6X"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3129,"^6C","^6P","^9",3129,"^6E",4,"^6F",true,"^63",["^2H",["^64",["^2H",[["^;X","^;Y","^;Z","^6X"]]]]],"^6<","Do the same as interpose, but different seps depending on pred?."],"~$fzprint-hang",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1423,"^8",7,"^9",1423,"^:",19,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^8Q"],"^2K","^69"],"^6U","^7D","^7E","~$fzfn","^7F","^79"]]]]],"^6<","Try to hang something and try to flow it, and then see which is\n  better.  Has hang and flow indents. fzfn is the function to use \n  to do zloc.  Note what fzfn does with the input.  For instance,\n  fzprint-pairs does a (zmap-right identity zloc).  Presumably the\n  caller knows what the fzfn does, so it has to count the items\n  itself and pass it in here as zloc-count if it isn't just (zcount zloc)."],"^N","~$zprint.zprint/fzprint-hang","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["~$p__52229","^6U","^7D","^7E","^<1","^7F","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1423,"^6C",["^M",["^6P","^70"]],"^9",1423,"^6E",7,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^8Q"],"^2K","^69"],"^6U","^7D","^7E","^<1","^7F","^79"]]]]],"^6<","Try to hang something and try to flow it, and then see which is\n  better.  Has hang and flow indents. fzfn is the function to use \n  to do zloc.  Note what fzfn does with the input.  For instance,\n  fzprint-pairs does a (zmap-right identity zloc).  Presumably the\n  caller knows what the fzfn does, so it has to count the items\n  itself and pass it in here as zloc-count if it isn't just (zcount zloc)."],"~$wrap-zmap",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2939,"^8",7,"^9",2939,"^:",16,"^63",["^2H",["^64",["^2H",[["^6U",["^30",["^65",["^6M","^:E"],["^ ","^65",["~$wrap-after-multi?"]],"^6U","^2K","^69"]],"^6W","~$coll-print"]]]]],"^6<","Given the output from fzprint-seq, which is a style-vec in\n  the making without spacing, but with extra [] around the elements,\n  wrap the elements to the right margin."],"^N","~$zprint.zprint/wrap-zmap","^6","zprint/zprint.cljc","^:",16,"^6>",["^2H",[["^6U","~$p__52707","^6W","^<6"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",2939,"^6C",["^M",["^6K","^7M","^70"]],"^9",2939,"^6E",4,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U",["^30",["^65",["^6M","^:E"],["^ ","^65",["^<5"]],"^6U","^2K","^69"]],"^6W","^<6"]]]]],"^6<","Given the output from fzprint-seq, which is a style-vec in\n  the making without spacing, but with extra [] around the elements,\n  wrap the elements to the right margin."],"~$good-enough?",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",163,"^8",7,"^9",163,"^:",19,"^63",["^2H",["^64",["^2H",[["^6U",["^30",["^65",["^6M","^:E","^7<"],["^ ","^65",["~$hang-flow","~$hang-type-flow","~$hang-flow-limit","~$general-hang-adjust","~$hang-if-equal-flow?"]],"~:tuning",["^ ","^65",["^7A","^7B","~$hang-size","~$hang-adjust"]],"^6U","^2K","^69"]],"^6;","~$p-count","~$indent-diff",["~$p-lines","~$p-maxwidth","~$p-length-seq","~$p-what"],["~$b-lines","~$b-maxwidth","~$_","~$b-what"]]]]]],"^6<","Given the fn-style, is the first output good enough to be worth\n  doing. p is pretty, which is typically hanging, and b is basic, which\n  is typically flow. p-count is the number of elements in the hang."],"^N","~$zprint.zprint/good-enough?","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["^6U","~$p__51722","^6;","^<B","^<C","~$p__51723","~$p__51724"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",163,"^6C",["^M",[null,"^6D","^77","^70"]],"^9",163,"^6E",7,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U",["^30",["^65",["^6M","^:E","^7<"],["^ ","^65",["^<:","^<;","^<<","^<=","^<>"]],"^<?",["^ ","^65",["^7A","^7B","^<@","^<A"]],"^6U","^2K","^69"]],"^6;","^<B","^<C",["^<D","^<E","^<F","^<G"],["^<H","^<I","~$_","^<J"]]]]]],"^6<","Given the fn-style, is the first output good enough to be worth\n  doing. p is pretty, which is typically hanging, and b is basic, which\n  is typically flow. p-count is the number of elements in the hang."],"~$get-max-length",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",316,"^8",7,"^9",316,"^:",21,"^63",["^2H",["^64",["^2H",[[["^ ","^2K","^69","^65",["~$max-length","~$depth"]]]]]]],"^6<","Given the options map, return the max length.  This might be\n  a constant number, but it might be based on the depth as well.\n  Returns nil of there is no max-length set."],"^N","~$zprint.zprint/get-max-length","^6","zprint/zprint.cljc","^:",21,"^6>",["^2H",[["~$p__51808"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",316,"^6C",["^M",["^77","^70"]],"^9",316,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^ ","^2K","^69","^65",["^<P","^<Q"]]]]]]],"^6<","Given the options map, return the max length.  This might be\n  a constant number, but it might be based on the depth as well.\n  Returns nil of there is no max-length set."],"~$lift-vec",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3866,"^8",7,"^9",3866,"^:",15,"^63",["^2H",["^64",["^2H",[["~$out-vec","^;@"]]]]],"^6<","Take a transient output vector and a vector and lift any style-vec elements\n  out of the input vector."],"^N","~$zprint.zprint/lift-vec","^6","zprint/zprint.cljc","^:",15,"^6>",["^2H",[["^<U","^;@"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3866,"^6C",["^M",[null,"^6P"]],"^9",3866,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^<U","^;@"]]]]],"^6<","Take a transient output vector and a vector and lift any style-vec elements\n  out of the input vector."],"~$style-lines",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",526,"^8",7,"^9",526,"^:",18,"^63",["^2H",["^64",["^2H",[["^69","^6W","^6I"]]]]],"^6<","Take a style output, and tell us how many lines it takes to print it\n  and the maximum width that it reaches. Returns \n  [<line-count> <max-width> [line-lengths]].\n  Doesn't require any max-width inside the style-vec. Also returns the\n  line lengths in case that is helpful (since we have them anyway).\n  If (:dbg-ge options) has value, then uses find-what to see if what it\n  finds matches the value, and if it does, place the value in the\n  resulting vector."],"^N","~$zprint.zprint/style-lines","^6","zprint/zprint.cljc","^:",18,"^6>",["^2H",[["^69","^6W","^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",526,"^6C",["^M",["^6P","^70"]],"^9",526,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^6I"]]]]],"^6<","Take a style output, and tell us how many lines it takes to print it\n  and the maximum width that it reaches. Returns \n  [<line-count> <max-width> [line-lengths]].\n  Doesn't require any max-width inside the style-vec. Also returns the\n  line lengths in case that is helpful (since we have them anyway).\n  If (:dbg-ge options) has value, then uses find-what to see if what it\n  finds matches the value, and if it does, place the value in the\n  resulting vector."],"~$dec-depth",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3478,"^8",7,"^9",3478,"^:",16,"^63",["^2H",["^64",["^2H",[["^69"]]]]],"^6<","Given an options map, decrement the :depth value and return the result."],"^N","~$zprint.zprint/dec-depth","^6","zprint/zprint.cljc","^:",16,"^6>",["^2H",[["^69"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3478,"^6C",["^M",["^6P","^77","^70"]],"^9",3478,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69"]]]]],"^6<","Given an options map, decrement the :depth value and return the result."],"~$hash-identity-str",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3320,"^8",7,"^9",3320,"^:",24,"^63",["^2H",["^64",["^2H",[["~$obj"]]]]],"^6<","Find the hash-code identity for an object."],"^N","~$zprint.zprint/hash-identity-str","^6","zprint/zprint.cljc","^:",24,"^6>",["^2H",[["^=0"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3320,"^6C","~$string","^9",3320,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^=0"]]]]],"^6<","Find the hash-code identity for an object."],"~$last-space",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3775,"^8",7,"^9",3775,"^:",17,"^63",["^2H",["^64",["^2H",[["~$s","~$from-index"]]]]],"^6<","Take a string and an index, and look for the last space prior to the\n  index. If we wanted to tie ourselves to 1.8, we could use \n  clojure.string/last-index-of, but we don't.  However, we use similar\n  conventions, i.e., if no space is found, return nil, and if the index\n  is a space return that value, and accept any from-index, including one\n  larger than the length of the string."],"^N","~$zprint.zprint/last-space","^6","zprint/zprint.cljc","^:",17,"^6>",["^2H",[["~$s","^=4"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3775,"^6C",["^M",["^6[","^70"]],"^9",3775,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$s","^=4"]]]]],"^6<","Take a string and an index, and look for the last space prior to the\n  index. If we wanted to tie ourselves to 1.8, we could use \n  clojure.string/last-index-of, but we don't.  However, we use similar\n  conventions, i.e., if no space is found, return nil, and if the index\n  is a space return that value, and accept any from-index, including one\n  larger than the length of the string."],"~$fzprint-object",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3307,"^8",7,"^9",3307,"^:",21,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79","~$zloc-value"],["^69","^6W","^79"]]]]],"^6<","Print something that looks like #object[...] in a way\n  that will acknowledge the structure inside of the [...]","^73",["^ ","^6B",false,"^74",4,"^6E",4,"^6>",["^2H",[["^69","^6W","^79","^=7"],["^69","^6W","^79"]]],"^63",["^2H",[["^69","^6W","^79","^=7"],["^69","^6W","^79"]]],"^6A",["^2H",[null,null]]]],"^N","~$zprint.zprint/fzprint-object","^6","zprint/zprint.cljc","^:",21,"^73",["^ ","^6B",false,"^74",4,"^6E",4,"^6>",["^2H",[["^69","^6W","^79","^=7"],["^69","^6W","^79"]]],"^63",["^2H",[["^69","^6W","^79","^=7"],["^69","^6W","^79"]]],"^6A",["^2H",[null,null]]],"^6>",["^2H",[["^69","^6W","^79","^=7"],["^69","^6W","^79"]]],"^6@",null,"^74",4,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^76",[["^ ","^74",4,"^6B",false,"^5[",["^M",["^6P","^70"]]],["^ ","^74",3,"^6B",false,"^5[",["^M",["^6P","^70"]]]],"^7",3307,"^9",3307,"^6E",4,"^6F",true,"^63",["^2H",[["^69","^6W","^79","^=7"],["^69","^6W","^79"]]],"^6<","Print something that looks like #object[...] in a way\n  that will acknowledge the structure inside of the [...]"],"~$fzprint-set",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3123,"^8",7,"^9",3123,"^:",18,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Pretty print and focus style a :set element."],"^N","~$zprint.zprint/fzprint-set","^6","zprint/zprint.cljc","^:",18,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3123,"^6C",["^M",["^6P","^70"]],"^9",3123,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Pretty print and focus style a :set element."],"~$no-max-length",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",326,"^8",7,"^9",326,"^:",20,"^63",["^2H",["^64",["^2H",[["^69"]]]]],"^6<","Given an options map, return another options map with no\n  :max-length key.  This is to that you can call a routine that\n  normally deals with :max-length and get it to do the normal\n  thing."],"^N","~$zprint.zprint/no-max-length","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["^69"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",326,"^6C",["^M",["^6P","^77"]],"^9",326,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69"]]]]],"^6<","Given an options map, return another options map with no\n  :max-length key.  This is to that you can call a routine that\n  normally deals with :max-length and get it to do the normal\n  thing."],"~$fzprint-array",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3119,"^8",7,"^9",3119,"^:",20,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]]],"^N","~$zprint.zprint/fzprint-array","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3119,"^6C",["^M",["^6P","^70"]],"^9",3119,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]]],"~$noarg1",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2472,"^8",7,"^9",2472,"^:",13,"^63",["^2H",["^64",["^2H",[["^69","~$fn-type"]]]]],"^6<","Set noarg1 in the options if it is the right fn-type."],"^N","~$zprint.zprint/noarg1","^6","zprint/zprint.cljc","^:",13,"^6>",["^2H",[["^69","^=@"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",2472,"^6C",["^M",[null,"^6P","^77"]],"^9",2472,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^=@"]]]]],"^6<","Set noarg1 in the options if it is the right fn-type."],"~$map-ignore",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1200,"^8",7,"^9",1200,"^:",17,"^63",["^2H",["^64",["^2H",[["^6U",["^30",[["^ ","^65",["^8V","^8W"]],"^6U","^2K","^69"]],"^79"]]]]],"^6<","Take a map and remove any of the key sequences specified from it.\n  Note that this only works for sexpressions, not for actual zippers."],"^N","~$zprint.zprint/map-ignore","^6","zprint/zprint.cljc","^:",17,"^6>",["^2H",[["^6U","~$p__52086","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1200,"^6C",["^M",[null,"^77"]],"^9",1200,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U",["^30",[["^ ","^65",["^8V","^8W"]],"^6U","^2K","^69"]],"^79"]]]]],"^6<","Take a map and remove any of the key sequences specified from it.\n  Note that this only works for sexpressions, not for actual zippers."],"~$accumulate-ll",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",340,"^8",7,"^9",340,"^:",20,"^63",["^2H",["^64",["^2H",[["~$count-comment?",["^9;","~$cur-len","~$just-eol?","~$just-comment?","^2K","~$in"],"~$s","~$tag","~$eol?"]]]]],"^6<","Take the vector carrying the intermediate results, and\n  do the right thing with a new string. Vector is\n  [ 0 out - vector accumulating line lengths \n    1 cur-len - length of current line\n    just-eol? - did we just do an eol?\n    ]\n  s - string to add to current line\n  tag - element type of string (comment's don't count in length)\n  eol? - should we terminate line after adding count of s"],"^N","~$zprint.zprint/accumulate-ll","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["^=F","~$p__51820","~$s","^=K","^=L"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",340,"^6C","^6K","^9",340,"^6E",5,"^6F",true,"^63",["^2H",["^64",["^2H",[["^=F",["^9;","^=G","^=H","^=I","^2K","^=J"],"~$s","^=K","^=L"]]]]],"^6<","Take the vector carrying the intermediate results, and\n  do the right thing with a new string. Vector is\n  [ 0 out - vector accumulating line lengths \n    1 cur-len - length of current line\n    just-eol? - did we just do an eol?\n    ]\n  s - string to add to current line\n  tag - element type of string (comment's don't count in length)\n  eol? - should we terminate line after adding count of s"],"~$fzprint-anon-fn",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2925,"^8",7,"^9",2925,"^:",22,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Pretty print and focus style a fn element."],"^N","~$zprint.zprint/fzprint-anon-fn","^6","zprint/zprint.cljc","^:",22,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",2925,"^6C",["^M",["^6P","^70"]],"^9",2925,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Pretty print and focus style a fn element."],"~$in-hang",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",263,"^8",7,"^9",263,"^:",14,"^63",["^2H",["^64",["^2H",[["^69"]]]]],"^6<","Add :in-hang? true to the options map."],"^N","~$zprint.zprint/in-hang","^6","zprint/zprint.cljc","^:",14,"^6>",["^2H",[["^69"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",263,"^6C",["^M",[null,"^6P","^77"]],"^9",263,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69"]]]]],"^6<","Add :in-hang? true to the options map."],"~$interpose-either-nl-hf",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3146,"^8",7,"^9",3146,"^:",29,"^63",["^2H",["^64",["^2H",[["^;X","~$sep-true-nl","^;Y","~$sep-nil-nl",["^ ","^65",["^7C","~$nl-separator-flow?"],"^2K","~$suboptions"],"~$pred-fn","^6X"]]]]],"^6<","Do the same as interpose, but different seps depending on pred-fn\n  return and nl-separator?."],"^N","~$zprint.zprint/interpose-either-nl-hf","^6","zprint/zprint.cljc","^:",29,"^6>",["^2H",[["^;X","^=T","^;Y","^=U","~$p__52807","^=X","^6X"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3146,"^6C","^77","^9",3146,"^6E",7,"^6F",true,"^63",["^2H",["^64",["^2H",[["^;X","^=T","^;Y","^=U",["^ ","^65",["^7C","^=V"],"^2K","^=W"],"^=X","^6X"]]]]],"^6<","Do the same as interpose, but different seps depending on pred-fn\n  return and nl-separator?."],"~$fzprint-hang-unless-fail",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",646,"^8",7,"^9",646,"^:",31,"^63",["^2H",["^64",["^2H",[["^69","^7D","^7E","^<1","^79"]]]]],"^6<","Try to hang something and if it doesn't hang at all, then flow it,\n  but strongly prefer hang.  Has hang and flow indents, and fzfn is the\n  fzprint-? function to use with zloc.  Callers need to know whether this\n  was hang or flow, so it returns [{:hang | :flow} style-vec] all the time."],"^N","~$zprint.zprint/fzprint-hang-unless-fail","^6","zprint/zprint.cljc","^:",31,"^6>",["^2H",[["^69","^7D","^7E","^<1","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",646,"^6C","^6K","^9",646,"^6E",5,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^7D","^7E","^<1","^79"]]]]],"^6<","Try to hang something and if it doesn't hang at all, then flow it,\n  but strongly prefer hang.  Has hang and flow indents, and fzfn is the\n  fzprint-? function to use with zloc.  Callers need to know whether this\n  was hang or flow, so it returns [{:hang | :flow} style-vec] all the time."],"~$keyword-fn?",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",309,"^8",7,"^9",309,"^:",18,"^63",["^2H",["^64",["^2H",[["^69","~$s"]]]]],"^6<","Takes a string, and returns the fn-style if it is a keyword and\n  without the : it can be found in the fn-map."],"^N","~$zprint.zprint/keyword-fn?","^6","zprint/zprint.cljc","^:",18,"^6>",["^2H",[["^69","~$s"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",309,"^6C",["^M",["^77","^70"]],"^9",309,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","~$s"]]]]],"^6<","Takes a string, and returns the fn-style if it is a keyword and\n  without the : it can be found in the fn-map."],"~$not-rightmost",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",574,"^8",7,"^9",574,"^:",20,"^63",["^2H",["^64",["^2H",[["^69"]]]]],"^6<","Remove the rightmost count."],"^N","~$zprint.zprint/not-rightmost","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["^69"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",574,"^6C",["^M",["^6P","^70"]],"^9",574,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69"]]]]],"^6<","Remove the rightmost count."],"~$zpmap",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",77,"^8",16,"^9",77,"^:",21,"^63",["^2H",["^64",["^2H",[["^69","~$f","^6X"],["^69","~$f","~$coll1","~$coll2"]]]]],"^73",["^ ","^6B",false,"^74",4,"^6E",4,"^6>",["^2H",[["^69","~$f","^6X"],["^69","~$f","^>6","^>7"]]],"^63",["^2H",[["^69","~$f","^6X"],["^69","~$f","^>6","^>7"]]],"^6A",["^2H",[null,null]]]],"^N","~$zprint.zprint/zpmap","^6","zprint/zprint.cljc","^:",21,"^73",["^ ","^6B",false,"^74",4,"^6E",4,"^6>",["^2H",[["^69","~$f","^6X"],["^69","~$f","^>6","^>7"]]],"^63",["^2H",[["^69","~$f","^6X"],["^69","~$f","^>6","^>7"]]],"^6A",["^2H",[null,null]]],"^6>",["^2H",[["^69","~$f","^6X"],["^69","~$f","^>6","^>7"]]],"^6@",null,"^74",4,"^6A",["^2H",[null,null]],"^8",10,"^6B",false,"^76",[["^ ","^74",3,"^6B",false,"^5[","^7M"],["^ ","^74",4,"^6B",false,"^5[","^7M"]],"^7",77,"^9",77,"^6E",4,"^6F",true,"^63",["^2H",[["^69","~$f","^6X"],["^69","~$f","^>6","^>7"]]]],"~$noarg1-set",["^ ","^N","~$zprint.zprint/noarg1-set","^6","zprint/zprint.cljc","^7",2463,"^8",1,"^9",2463,"^:",16,"^5",["^ ","^6","zprint/zprint.cljc","^7",2463,"^8",6,"^9",2463,"^:",16],"^5[","^60"],"~$cleave-end",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1271,"^8",7,"^9",1271,"^:",17,"^63",["^2H",["^64",["^2H",[["^6X"]]]]],"^6<","Take a seq, and if it is contains a single symbol, simply return\n  it in another seq.  If it contains something else, remove any non\n  collections off of the end and return them in their own double seqs,\n  as well as return the remainder (the beginning) as a double seq."],"^N","~$zprint.zprint/cleave-end","^6","zprint/zprint.cljc","^:",17,"^6>",["^2H",[["^6X"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1271,"^6C","^6P","^9",1271,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6X"]]]]],"^6<","Take a seq, and if it is contains a single symbol, simply return\n  it in another seq.  If it contains something else, remove any non\n  collections off of the end and return them in their own double seqs,\n  as well as return the remainder (the beginning) as a double seq."],"~$object-str?",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3302,"^8",7,"^9",3302,"^:",18,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Return true if the string starts with #object["],"^N","~$zprint.zprint/object-str?","^6","zprint/zprint.cljc","^:",18,"^6>",["^2H",[["~$s"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3302,"^6C",["^M",["^6P","^6K","^77","~$cljs.core/MetaFn","^70"]],"^9",3302,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Return true if the string starts with #object["],"~$fzprint-list*",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2525,"^8",7,"^9",2525,"^:",20,"^63",["^2H",["^64",["^2H",[["^6U","^8O","^8P",["^ ","^65",["~$fn-map","~$user-fn-map","^8Q","^6;","~$no-arg1?","^66"],"^2K","^69"],"^6W","^79"]]]]],"^6<","Print a list, which might be a list or an anon fn.  \n  Lots of work to make a list look good, as that is typically code. \n  Presently all of the callers of this are :list."],"^N","~$zprint.zprint/fzprint-list*","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["^6U","^8O","^8P","~$p__52547","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",2525,"^6C",["^M",["^6P","^70"]],"^9",2525,"^6E",6,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U","^8O","^8P",["^ ","^65",["^>A","^>B","^8Q","^6;","^>C","^66"],"^2K","^69"],"^6W","^79"]]]]],"^6<","Print a list, which might be a list or an anon fn.  \n  Lots of work to make a list look good, as that is typically code. \n  Presently all of the callers of this are :list."],"~$fzprint-reader-macro",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3544,"^8",7,"^9",3544,"^:",27,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Print a reader-macro, often a reader-conditional. Adapted for differences\n  in parsing #?@ between rewrite-clj and rewrite-cljs.  Also adapted for\n  the rewrite-clj not parsing namespaced maps in the version presently\n  used."],"^N","~$zprint.zprint/fzprint-reader-macro","^6","zprint/zprint.cljc","^:",27,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3544,"^6C",["^M",["^6P","^70"]],"^9",3544,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Print a reader-macro, often a reader-conditional. Adapted for differences\n  in parsing #?@ between rewrite-clj and rewrite-cljs.  Also adapted for\n  the rewrite-clj not parsing namespaced maps in the version presently\n  used."],"~$line-lengths",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",467,"^8",7,"^9",467,"^:",19,"^63",["^2H",["^64",["^2H",[["^69","^6W","^6I"]]]]],"^6<","Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments at the\n  end. Note that only vectors with :whitespace or :indent are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character."],"^N","~$zprint.zprint/line-lengths","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["^69","^6W","^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",467,"^6C",["^M",["^77","^70"]],"^9",467,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^6I"]]]]],"^6<","Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments at the\n  end. Note that only vectors with :whitespace or :indent are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character."],"~$max-width",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3956,"^8",7,"^9",3956,"^:",16,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Split a string into lines, and figure the max width."],"^N","~$zprint.zprint/max-width","^6","zprint/zprint.cljc","^:",16,"^6>",["^2H",[["~$s"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3956,"^6C","^77","^9",3956,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Split a string into lines, and figure the max width."],"~$fzprint-binding-vec",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1398,"^8",7,"^9",1398,"^:",26,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["^7C"]],"~:binding","^2K","^69"]],"^6W","^79"]]]]]],"^N","~$zprint.zprint/fzprint-binding-vec","^6","zprint/zprint.cljc","^:",26,"^6>",["^2H",[["~$p__52213","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1398,"^6C",["^M",["^6P","^70"]],"^9",1398,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["^7C"]],"^>M","^2K","^69"]],"^6W","^79"]]]]]],"~$fn-style->caller",["^ ","^N","~$zprint.zprint/fn-style->caller","^6","zprint/zprint.cljc","^7",2477,"^8",1,"^9",2477,"^:",22,"^5",["^ ","^6","zprint/zprint.cljc","^7",2477,"^8",6,"^9",2477,"^:",22],"^5[","^6S"],"~$fzprint-vec",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3115,"^8",7,"^9",3115,"^:",18,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]]],"^N","~$zprint.zprint/fzprint-vec","^6","zprint/zprint.cljc","^:",18,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3115,"^6C",["^M",["^6P","^70"]],"^9",3115,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]]],"~$style-loc-vec",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3858,"^8",7,"^9",3858,"^:",20,"^63",["^2H",["^64",["^2H",[["^6I"]]]]],"^6<","Take a style-vec and produce a style-loc-vec with the starting column\n  of each element in the style-vec."],"^N","~$zprint.zprint/style-loc-vec","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3858,"^6C","^9>","^9",3858,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6I"]]]]],"^6<","Take a style-vec and produce a style-loc-vec with the starting column\n  of each element in the style-vec."],"~$remove-key-seq",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1161,"^8",7,"^9",1161,"^:",21,"^63",["^2H",["^64",["^2H",[["~$m","~$ks"]]]]],"^6<","If given a non-collection, simply does a dissoc of the key, but\n  if given a sequence of keys, will remove the final one."],"^N","~$zprint.zprint/remove-key-seq","^6","zprint/zprint.cljc","^:",21,"^6>",["^2H",[["~$m","^>W"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1161,"^6C",["^M",["^6P","^77","^70"]],"^9",1161,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$m","^>W"]]]]],"^6<","If given a non-collection, simply does a dissoc of the key, but\n  if given a sequence of keys, will remove the final one."],"~$hangflow",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",639,"^8",7,"^9",639,"^:",15,"^63",["^2H",["^64",["^2H",[["~$hangflow?","~$hang-or-flow","^6I"]]]]],"^6<","Take a style-vec, and if hangflow? is true, return a\n  vector [hang-or-flow style-vec], else return style-vec.\n  But a nil style-vec returns nil."],"^N","~$zprint.zprint/hangflow","^6","zprint/zprint.cljc","^:",15,"^6>",["^2H",[["^>Z","^>[","^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",639,"^6C",["^M",[null,"^6K","^70"]],"^9",639,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^>Z","^>[","^6I"]]]]],"^6<","Take a style-vec, and if hangflow? is true, return a\n  vector [hang-or-flow style-vec], else return style-vec.\n  But a nil style-vec returns nil."],"~$fzprint-record",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3483,"^8",7,"^9",3483,"^:",21,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["~$record-type?","~$to-string?"]],"^:Z","^2K","^69"]],"^6W","^79"]]]]]],"^N","~$zprint.zprint/fzprint-record","^6","zprint/zprint.cljc","^:",21,"^6>",["^2H",[["~$p__52957","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3483,"^6C",["^M",["^6P","^77","^70"]],"^9",3483,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["^?2","^?3"]],"^:Z","^2K","^69"]],"^6W","^79"]]]]]],"~$modify-zloc",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2498,"^8",7,"^9",2498,"^:",18,"^63",["^2H",["^64",["^2H",[["^6U","^69","^79"]]]]],"^6<","If the (caller options) has a value for :return-altered-zipper, then\n  examine the value.  It should be [<depth> <symbol> <fn>]. \n  If the <depth> is nil, any depth will do. If the\n  <symbol> is nil, any symbol will do.  If the <depth> and <symbol>\n  match, then the <fn> is called as (fn caller options zloc), and must\n  return a new zloc."],"^N","~$zprint.zprint/modify-zloc","^6","zprint/zprint.cljc","^:",18,"^6>",["^2H",[["^6U","^69","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",2498,"^6C",["^M",[null,"^77"]],"^9",2498,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6U","^69","^79"]]]]],"^6<","If the (caller options) has a value for :return-altered-zipper, then\n  examine the value.  It should be [<depth> <symbol> <fn>]. \n  If the <depth> is nil, any depth will do. If the\n  <symbol> is nil, any symbol will do.  If the <depth> and <symbol>\n  match, then the <fn> is called as (fn caller options zloc), and must\n  return a new zloc."],"~$fzprint-one-line",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1519,"^8",7,"^9",1519,"^:",23,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Do a fzprint-seq like thing, but do it incrementally and\n  if it gets too big, return nil."],"^N","~$zprint.zprint/fzprint-one-line","^6","zprint/zprint.cljc","^:",23,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1519,"^6C",["^M",["^6P","^70"]],"^9",1519,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Do a fzprint-seq like thing, but do it incrementally and\n  if it gets too big, return nil."],"~$fzfit",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",545,"^8",7,"^9",545,"^:",12,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^6M","^:E","^7<"],"^2K","^69"],["^7[","^>J","^2K","^7Y"]]]]]],"^6<","Given output from style-lines and options, see if it fits the width.  \n  Return the number of lines it takes if it fits, nil otherwise."],"^N","~$zprint.zprint/fzfit","^6","zprint/zprint.cljc","^:",12,"^6>",["^2H",[["~$p__51898","~$p__51899"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",545,"^6C",["^M",[null,"^77","^70"]],"^9",545,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^6M","^:E","^7<"],"^2K","^69"],["^7[","^>J","^2K","^7Y"]]]]]],"^6<","Given output from style-lines and options, see if it fits the width.  \n  Return the number of lines it takes if it fits, nil otherwise."],"~$fzprint-meta",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3519,"^8",7,"^9",3519,"^:",19,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Print the two items in a meta node.  Different because it doesn't print\n  a single collection, so it doesn't do any indent or rightmost.  It also\n  uses a different approach to calling fzprint-flow-seq with the\n  results zmap, so that it prints all of the seq, not just the rightmost."],"^N","~$zprint.zprint/fzprint-meta","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3519,"^6C",["^M",["^6P","^70"]],"^9",3519,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Print the two items in a meta node.  Different because it doesn't print\n  a single collection, so it doesn't do any indent or rightmost.  It also\n  uses a different approach to calling fzprint-flow-seq with the\n  results zmap, so that it prints all of the seq, not just the rightmost."],"~$fzprint-dbg",["^ ","^N","~$zprint.zprint/fzprint-dbg","^6","zprint/zprint.cljc","^7",97,"^8",1,"^9",97,"^:",17,"^5",["^ ","^6","zprint/zprint.cljc","^7",97,"^8",6,"^9",97,"^:",17],"^5[","~$cljs.core/Atom"],"~$any-zcoll?",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",2930,"^8",7,"^9",2930,"^:",17,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Return true if there are any collections in the collection."],"^N","~$zprint.zprint/any-zcoll?","^6","zprint/zprint.cljc","^:",17,"^6>",["^2H",[["^69","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",2930,"^6C",["^M",[null,"^77"]],"^9",2930,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^79"]]]]],"^6<","Return true if there are any collections in the collection."],"~$contains-nil?",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",272,"^8",7,"^9",272,"^:",20,"^63",["^2H",["^64",["^2H",[["^6X"]]]]],"^6<","Scan a collection, and return the number of nils or empty collections\n  present (if any), and nil otherwise."],"^N","~$zprint.zprint/contains-nil?","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["^6X"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",272,"^6C",["^M",["^6[","^70"]],"^9",272,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6X"]]]]],"^6<","Scan a collection, and return the number of nils or empty collections\n  present (if any), and nil otherwise."],"~$showfn?",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",114,"^8",7,"^9",114,"^:",14,"^63",["^2H",["^64",["^2H",[["^>A","~$f"]]]]],"^6<","Show this thing as a function?"],"^N","~$zprint.zprint/showfn?","^6","zprint/zprint.cljc","^:",14,"^6>",["^2H",[["^>A","~$f"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",114,"^6C",["^M",[null,"^77","^70"]],"^9",114,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^>A","~$f"]]]]],"^6<","Show this thing as a function?"],"~$map->r",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^:",13,"^8",12,"^:Y",true,"~:factory","~:map","^7",3994,"^9",3994,"^63",["^2H",["^64",["^2H",[["~$G__53114"]]]]],"^6<","Factory function for zprint.zprint/r, taking a map of keywords to field values."],"^N","~$zprint.zprint/map->r","^6","zprint/zprint.cljc","^:",13,"^6>",["^2H",[["^?L"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^:Y",true,"^6B",false,"^?J","^?K","^7",3994,"^6C","^:W","^9",3994,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^?L"]]]]],"^6<","Factory function for zprint.zprint/r, taking a map of keywords to field values."],"~$generate-ll",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",373,"^8",7,"^9",373,"^:",18,"^63",["^2H",["^64",["^2H",[["^=F",["^9;","^=G","^=H","^=I","^2K","^=J"],["~$s","~$_","^=K","^2K","^;@"]]]]]]],"^N","~$zprint.zprint/generate-ll","^6","zprint/zprint.cljc","^:",18,"^6>",["^2H",[["^=F","~$p__51840","~$p__51841"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",373,"^6C","^6K","^9",373,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^=F",["^9;","^=G","^=H","^=I","^2K","^=J"],["~$s","~$_","^=K","^2K","^;@"]]]]]]],"~$->r",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^:",13,"^8",12,"^:Y",true,"^?J","~:positional","^7",3994,"^9",3994,"^63",["^2H",["^64",["^2H",[["~$left","~$right"]]]]],"^6<","Positional factory function for zprint.zprint/r."],"^N","~$zprint.zprint/->r","^6","zprint/zprint.cljc","^:",13,"^6>",["^2H",[["^?T","^?U"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^:Y",true,"^6B",false,"^?J","^?S","^7",3994,"^6C","^:W","^9",3994,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^?T","^?U"]]]]],"^6<","Positional factory function for zprint.zprint/r."],"~$ignore-key-seq",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1187,"^8",7,"^9",1187,"^:",21,"^63",["^2H",["^64",["^2H",[["~$m","^>W"]]]]],"^6<","Given a map and a key sequence, remove that key sequence if\n  it appears in the map leaving behind a key :zprint-ignored, \n  and terminate the reduce if it changes the map."],"^N","~$zprint.zprint/ignore-key-seq","^6","zprint/zprint.cljc","^:",21,"^6>",["^2H",[["~$m","^>W"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1187,"^6C",["^M",[null,"^6P","^77"]],"^9",1187,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$m","^>W"]]]]],"^6<","Given a map and a key sequence, remove that key sequence if\n  it appears in the map leaving behind a key :zprint-ignored, \n  and terminate the reduce if it changes the map."],"~$fzprint",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3919,"^8",7,"^9",3919,"^:",14,"^63",["^2H",["^64",["^2H",[["^69","^9F","^79"]]]]],"^6<","The pretty print part of fzprint."],"^N","~$zprint.zprint/fzprint","^6","zprint/zprint.cljc","^:",14,"^6>",["^2H",[["^69","^9F","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3919,"^6C",["^M",["^6P","^6K","^77","^70"]],"^9",3919,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^9F","^79"]]]]],"^6<","The pretty print part of fzprint."],"~$internal-validate",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3024,"^8",7,"^9",3024,"^:",24,"^63",["^2H",["^64",["^2H",[["^69","~$error-str"]]]]],"^6<","Validate an options map that was returned from some internal configuration\n  expression or configuration.  Either returns the options map or throws\n  an error."],"^N","~$zprint.zprint/internal-validate","^6","zprint/zprint.cljc","^:",24,"^6>",["^2H",[["^69","^@0"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3024,"^9",3024,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^@0"]]]]],"^6<","Validate an options map that was returned from some internal configuration\n  expression or configuration.  Either returns the options map or throws\n  an error."],"~$line-lengths-iter",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",392,"^8",7,"^9",392,"^:",24,"^63",["^2H",["^64",["^2H",[["^69","^6W","^6I"]]]]],"^6<","Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments elsewhere.\n  Note that only vectors with :whitespace, :indent, or :newline are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character. A single comment is counted as two lines. Lots of edge\n  conditions that are really quite important."],"^N","~$zprint.zprint/line-lengths-iter","^6","zprint/zprint.cljc","^:",24,"^6>",["^2H",[["^69","^6W","^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",392,"^6C",["^M",["^6P","^6K"]],"^9",392,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^6W","^6I"]]]]],"^6<","Take a style-vec, and output a sequence of numbers, one for each\n  line, which contains the actual length. Must take the current\n  indent to have a prayer of getting this right, but it is used\n  only for the first line.  The ind can be an integer or a seq of\n  integers, in which case only the first integer is used. Newlines\n  can come anywhere in an element in a style-vec, it will account\n  for both sides.  Will break lines on comments even if no newlines\n  in them.  This doesn't count the length of comment lines unless\n  [:comment :count?] is true, so that we don't format based on\n  comment size -- that is handled with the wrap-comments elsewhere.\n  Note that only vectors with :whitespace, :indent, or :newline are scanned\n  for newlines, and if consecutive newlines appear, only the first\n  is counted as a newline -- the second is counted as a regular \n  character. A single comment is counted as two lines. Lots of edge\n  conditions that are really quite important."],"~$count-constant-pairs",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1705,"^8",7,"^9",1705,"^:",27,"^63",["^2H",["^64",["^2H",[["^92"]]]]],"^6<","Given a seq of zlocs, work backwards from the end, and see how\n  many elements are pairs of constants (using zconstant?).  So that\n  (... :a (stuff) :b (bother)) returns 4, since both :a and :b are\n  zconstant? true. This is made more difficult by having to skip\n  comments along the way as part of the pair check, but keep track\n  of the ones we skip so the count is right in the end.  We don't\n  expect any whitespace in this, because this seq should have been\n  produced by zmap-right or its equivalent, which already skips the\n  whitespace."],"^N","~$zprint.zprint/count-constant-pairs","^6","zprint/zprint.cljc","^:",27,"^6>",["^2H",[["^92"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1705,"^6C","^6[","^9",1705,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^92"]]]]],"^6<","Given a seq of zlocs, work backwards from the end, and see how\n  many elements are pairs of constants (using zconstant?).  So that\n  (... :a (stuff) :b (bother)) returns 4, since both :a and :b are\n  zconstant? true. This is made more difficult by having to skip\n  comments along the way as part of the pair check, but keep track\n  of the ones we skip so the count is right in the end.  We don't\n  expect any whitespace in this, because this seq should have been\n  produced by zmap-right or its equivalent, which already skips the\n  whitespace."],"~$force-vector",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",304,"^8",7,"^9",304,"^:",19,"^63",["^2H",["^64",["^2H",[["^6X"]]]]],"^6<","Ensure that whatever we have is a vector."],"^N","~$zprint.zprint/force-vector","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["^6X"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",304,"^6C",["^M",[null,"^6P","^77"]],"^9",304,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^6X"]]]]],"^6<","Ensure that whatever we have is a vector."],"~$compare-ordered-keys",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1113,"^8",7,"^9",1113,"^:",27,"^63",["^2H",["^64",["^2H",[["^99","^1J","~$x","~$y"]]]]],"^6<","Do a key comparison that places ordered keys first."],"^N","~$zprint.zprint/compare-ordered-keys","^6","zprint/zprint.cljc","^:",27,"^6>",["^2H",[["^99","^1J","~$x","~$y"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1113,"^6C","^6[","^9",1113,"^6E",4,"^6F",true,"^63",["^2H",["^64",["^2H",[["^99","^1J","~$x","~$y"]]]]],"^6<","Do a key comparison that places ordered keys first."],"~$show-user-fn?",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",134,"^8",7,"^9",134,"^:",20,"^63",["^2H",["^64",["^2H",[["^69","~$f"]]]]],"^6<","Show this thing as a user defined function?  Assumes that we\n  have already handled any clojure defined functions!"],"^N","~$zprint.zprint/show-user-fn?","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["^69","~$f"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",134,"^6C",["^M",[null,"^77","^70"]],"^9",134,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","~$f"]]]]],"^6<","Show this thing as a user defined function?  Assumes that we\n  have already handled any clojure defined functions!"],"~$concat-no-nil",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",292,"^8",7,"^9",292,"^:",20,"^63",["^2H",["^64",["^2H",[["~$&","^7O"]]]]],"^6<","Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil.","^73",["^ ","^6B",true,"^74",0,"^6E",0,"^6>",[["^2H",["^7O"]]],"^63",["^2H",[["~$&","^7O"]]],"^6A",["^2H",[null]]]],"^N","~$zprint.zprint/concat-no-nil","^6","zprint/zprint.cljc","^:",20,"^73",["^ ","^6B",true,"^74",0,"^6E",0,"^6>",[["^2H",["^7O"]]],"^63",["^2H",[["~$&","^7O"]]],"^6A",["^2H",[null]]],"^6>",[["^2H",["^7O"]]],"^6@",null,"^74",0,"^6A",["^2H",[null]],"^8",1,"^6B",true,"^76",[["^ ","^74",0,"^6B",true,"^5[",["^M",["^6P","^70"]]]],"^7",292,"^6C","^77","^9",292,"^6E",0,"^6F",true,"^63",["^2H",[["~$&","^7O"]]],"^6<","Concatentate multiple sequences, but if any of them are nil or empty\n  collections, return nil."],"~$prefix-options",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3613,"^8",7,"^9",3613,"^:",21,"^63",["^2H",["^64",["^2H",[["^69","~$prefix-tag"]]]]],"^6<","Change options as necessary based on prefix tag."],"^N","~$zprint.zprint/prefix-options","^6","zprint/zprint.cljc","^:",21,"^6>",["^2H",[["^69","^@?"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3613,"^6C",["^M",[null,"^6P","^77"]],"^9",3613,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["^69","^@?"]]]]],"^6<","Change options as necessary based on prefix tag."],"~$next-space",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3789,"^8",7,"^9",3789,"^:",17,"^63",["^2H",["^64",["^2H",[["~$s","^=4"]]]]],"^6<","Take a string and an index, and look for the next space *after* the\n  index. If no space is found, return nil. Accept any from-index, \n  including one larger than the length of the string."],"^N","~$zprint.zprint/next-space","^6","zprint/zprint.cljc","^:",17,"^6>",["^2H",[["~$s","^=4"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3789,"^6C",["^M",["^6[","^70"]],"^9",3789,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$s","^=4"]]]]],"^6<","Take a string and an index, and look for the next space *after* the\n  index. If no space is found, return nil. Accept any from-index, \n  including one larger than the length of the string."],"~$middle-element?",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1149,"^8",7,"^9",1149,"^:",22,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^8T"],"^2K","^69"],"^79"]]]]],"^6<","This checks to see if an element should be considered the middle element\n  of a pair.  At some point, we can expand this, but for now there is only\n  one middle element."],"^N","~$zprint.zprint/middle-element?","^6","zprint/zprint.cljc","^:",22,"^6>",["^2H",[["~$p__52073","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1149,"^6C",["^M",["^6D","^70"]],"^9",1149,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^8T"],"^2K","^69"],"^79"]]]]],"^6<","This checks to see if an element should be considered the middle element\n  of a pair.  At some point, we can expand this, but for now there is only\n  one middle element."],"~$fit-within?",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",978,"^8",7,"^9",978,"^:",18,"^63",["^2H",["^64",["^2H",[["~$size","^6X","^<Q"],["^@G","^6X"]]]]],"^6<","Take a size and a collection of vectors with two or more elements\n  per vector.  The elements are zlocs, the vectors are not.  Return\n  the remaining character count or nil if it for sure doesn't fit.\n  In order to be sure it doesn't fit, this version doesn't assume\n  *any* separators, so it really underestimates the size.","^73",["^ ","^6B",false,"^74",3,"^6E",3,"^6>",["^2H",[["^@G","^6X","^<Q"],["^@G","^6X"]]],"^63",["^2H",[["^@G","^6X","^<Q"],["^@G","^6X"]]],"^6A",["^2H",[null,null]]]],"^N","~$zprint.zprint/fit-within?","^6","zprint/zprint.cljc","^:",18,"^73",["^ ","^6B",false,"^74",3,"^6E",3,"^6>",["^2H",[["^@G","^6X","^<Q"],["^@G","^6X"]]],"^63",["^2H",[["^@G","^6X","^<Q"],["^@G","^6X"]]],"^6A",["^2H",[null,null]]],"^6>",["^2H",[["^@G","^6X","^<Q"],["^@G","^6X"]]],"^6@",null,"^74",3,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^76",[["^ ","^74",3,"^6B",false,"^5[",["^M",[null,"^77"]]],["^ ","^74",2,"^6B",false,"^5[",["^M",[null,"^77"]]]],"^7",978,"^9",978,"^6E",3,"^6F",true,"^63",["^2H",[["^@G","^6X","^<Q"],["^@G","^6X"]]],"^6<","Take a size and a collection of vectors with two or more elements\n  per vector.  The elements are zlocs, the vectors are not.  Return\n  the remaining character count or nil if it for sure doesn't fit.\n  In order to be sure it doesn't fit, this version doesn't assume\n  *any* separators, so it really underestimates the size."],"~$fzprint-pairs",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1459,"^8",7,"^9",1459,"^:",20,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["^7C"]],"~:pair","^2K","^69"]],"^6W","^79"]]]]],"^6<","Always prints pairs on a different line from other pairs."],"^N","~$zprint.zprint/fzprint-pairs","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["~$p__52245","^6W","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1459,"^6C","^77","^9",1459,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^30",[["^ ","^65",["^7C"]],"^@J","^2K","^69"]],"^6W","^79"]]]]],"^6<","Always prints pairs on a different line from other pairs."],"~$body-map",["^ ","^N","~$zprint.zprint/body-map","^6","zprint/zprint.cljc","^7",2450,"^8",1,"^9",2450,"^:",14,"^5",["^ ","^6","zprint/zprint.cljc","^7",2450,"^8",6,"^9",2450,"^:",14],"^5[","^6S"],"~$fzprint-wrap-comments",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3884,"^8",7,"^9",3884,"^:",28,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^6M"],"^2K","^69"],"^6I"]]]]],"^6<","Take the final output style-vec, and wrap any comments which run over\n  the width. Looking for "],"^N","~$zprint.zprint/fzprint-wrap-comments","^6","zprint/zprint.cljc","^:",28,"^6>",["^2H",[["~$p__53068","^6I"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3884,"^6C",["^M",[null,"^77"]],"^9",3884,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^6M"],"^2K","^69"],"^6I"]]]]],"^6<","Take the final output style-vec, and wrap any comments which run over\n  the width. Looking for "],"~$pair-element?",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1140,"^8",7,"^9",1140,"^:",20,"^63",["^2H",["^64",["^2H",[["^79"]]]]],"^6<","This checks to see if an element should be considered part of a\n  pair if it comes between other elements, and a single element on\n  its own if it would otherwise be the first part of a pair.  Mostly\n  this will trigger on comments, but a #_(...) element will also\n  trigger this."],"^N","~$zprint.zprint/pair-element?","^6","zprint/zprint.cljc","^:",20,"^6>",["^2H",[["^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1140,"^6C","^77","^9",1140,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["^79"]]]]],"^6<","This checks to see if an element should be considered part of a\n  pair if it comes between other elements, and a single element on\n  its own if it would otherwise be the first part of a pair.  Mostly\n  this will trigger on comments, but a #_(...) element will also\n  trigger this."],"~$make-record",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3995,"^8",7,"^9",3995,"^:",18,"^63",["^2H",["^64",["^2H",[["~$l","~$r"]]]]]],"^N","~$zprint.zprint/make-record","^6","zprint/zprint.cljc","^:",18,"^6>",["^2H",[["~$l","~$r"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3995,"^6C","~$r","^9",3995,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$l","~$r"]]]]]],"~$fzprint*",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3638,"^8",7,"^9",3638,"^:",15,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^6M","^:E","^>A","~$hex?","~$shift-seq","^7<","^;D","^9B","^8Q","~$string-str?","~$string-color","^<Q","~$max-depth","~$trim-comments?","^8T","~$max-hang-depth","~$max-hang-span","~$max-hang-count"],"^2K","^69"],"^9F","^79"]]]]],"^6<","The pretty print part of fzprint."],"^N","~$zprint.zprint/fzprint*","^6","zprint/zprint.cljc","^:",15,"^6>",["^2H",[["~$p__53008","^9F","^79"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3638,"^6C",["^M",["^6P","^6K","^77","^70"]],"^9",3638,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[[["^ ","^65",["^6M","^:E","^>A","^@W","^@X","^7<","^;D","^9B","^8Q","^@Y","^@Z","^<Q","^@[","^A0","^8T","^A1","^A2","^A3"],"^2K","^69"],"^9F","^79"]]]]],"^6<","The pretty print part of fzprint."],"~$split-lf",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",49,"^8",7,"^9",49,"^:",15,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Do split for newlines, instead of using regular expressions."],"^N","~$zprint.zprint/split-lf","^6","zprint/zprint.cljc","^:",15,"^6>",["^2H",[["~$s"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",49,"^6C",["^M",["^6P","^6K"]],"^9",49,"^6E",1,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$s"]]]]],"^6<","Do split for newlines, instead of using regular expressions."],"~$ignore-key-seq-silent",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1176,"^8",7,"^9",1176,"^:",28,"^63",["^2H",["^64",["^2H",[["~$m","^>W"]]]]],"^6<","Given a map and a key sequence, remove that key sequence if\n  it appears in the map, and terminate the reduce if it changes\n  the map."],"^N","~$zprint.zprint/ignore-key-seq-silent","^6","zprint/zprint.cljc","^:",28,"^6>",["^2H",[["~$m","^>W"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1176,"^6C",["^M",[null,"^6P","^77","^70"]],"^9",1176,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$m","^>W"]]]]],"^6<","Given a map and a key sequence, remove that key sequence if\n  it appears in the map, and terminate the reduce if it changes\n  the map."],"~$compare-keys",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",1106,"^8",7,"^9",1106,"^:",19,"^63",["^2H",["^64",["^2H",[["~$x","~$y"]]]]],"^6<","Do a key comparison that works well for numbers as well as\n  strings."],"^N","~$zprint.zprint/compare-keys","^6","zprint/zprint.cljc","^:",19,"^6>",["^2H",[["~$x","~$y"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",1106,"^6C","^6[","^9",1106,"^6E",2,"^6F",true,"^63",["^2H",["^64",["^2H",[["~$x","~$y"]]]]],"^6<","Do a key comparison that works well for numbers as well as\n  strings."],"~$interpose-nl-hf",["^ ","^62",null,"^5",["^ ","^6","zprint/zprint.cljc","^7",3179,"^8",7,"^9",3179,"^:",22,"^63",["^2H",["^64",["^2H",[["^=W","^6W","^6X"]]]]],"^6<","Put a single or double line between pairs returned from fzprint-map-two-up.\n  The first argument is the map resulting from (:map options) or (:pair options)\n  or whatever.  It should have :nl-separator? and :nl-separator-flow? in it."],"^N","~$zprint.zprint/interpose-nl-hf","^6","zprint/zprint.cljc","^:",22,"^6>",["^2H",[["^=W","^6W","^6X"]]],"^6@",null,"^6A",["^2H",[null,null]],"^8",1,"^6B",false,"^7",3179,"^6C","^77","^9",3179,"^6E",3,"^6F",true,"^63",["^2H",["^64",["^2H",[["^=W","^6W","^6X"]]]]],"^6<","Put a single or double line between pairs returned from fzprint-map-two-up.\n  The first argument is the map resulting from (:map options) or (:pair options)\n  or whatever.  It should have :nl-separator? and :nl-separator-flow? in it."]],"^13",["^ ","^G","^G","^W","^W"],"~:cljs.analyzer/constants",["^ ","^11",["^M",["~:in-code?","~:comment-wrap","~:flow?","~:sort-in-code?","~:nl-separator?","~:hang-size","~:dbg","~:indent-arg","~:arg2-extend","~:arg2-pair","~:key-depth-color","~:wrap-coll?","~:constant-pair?","~:indent","~:max-length","^<?","~:comma?","~:record-type?","~:fn","~:justify?","~:fn-force-nl","~:max-hang-depth","~:dbg-hang","~:arg1-body","~:unquote-splicing","~:future","~:justify-tuning","~:zprint-not-found","~:arg2","~:max-depth-string","~:whitespace","~:element","~:user-fn-map","~:hash-paren","~:pair-fn","^:;","~:else","~:force-nl","~:number","~:zipper","~:arg1-extend","^?T","~:unknown","~:promise","~:arg1-pair","~:hang-expand","~:brace","~:unquote","^@J","~:flow","~:noarg1","~:noarg1-body","^Q","~:key-value-color","~:constant-pair-min","~:key-value","~:sexpr","~:in-hang?","~:dbg-ge","~:value","~:user-fn","~:rightcnt","~:dbg-indent","~:force-nl?","~:width","~:respect-nl?","~:uneval","~:key-ignore-silent","~:key-order","~:color-map","~:arg1-pair-body","~:key-ignore","~:agent","~:do-in-hang?","~:string","~:no-arg1?","~:vector","~:hex?","~:array","~:empty","~:object?","~:force-nl-body","~:map-depth","~:arg2-fn","~:hang-avoid","~:dbg-cnt?","~:hang-diff","~:paren","~:dbg-print?","~:zprint-ignored","^8I","~:count?","~:lift-ns-in-code?","~:fn-gt2-force-nl","~:spec","~:syntax-quote","^>M","~:inline?","~:modifiers","~:hang-type-flow","~:arg1-force-nl","~:wrap?","~:hang-adjust","~:dbg-local?","~:hang","~:dbg?","~:justify-hang","~:list","~:var","~:quote","~:keyword","~:ztype","~:wrap-after-multi?","~:flow-body","~:hang-flow","~:binding?","~:key-color","~:string-color","~:syntax-quote-paren","~:trim-comments?","~:general-hang-adjust","~:nil","~:max-hang-span","~:deref","~:bracket","^:Z","~:comment","~:none-hang","~:comment-inline","~:none-hang-one","~:fn-style","~:lift-ns?","~:to-string?","~:right","~:fn-gt3-force-nl","~:one-line?","~:nl-separator-flow?","~:option-fn-first","~:string-str?","~:depth","~:hang-if-equal-flow?","~:arg1-mixin","~:on","~:max-depth","~:arg1->","~:set","~:dbg-bug?","~:fn-map","~:none-two-up","~:hang?","~:pdepth","~:none-body","~:hang-flow-limit","~:shift-seq","^:A","~:hash-brace","~:newline","~:return-altered-zipper","~$...","~:rightmost-pair","~:max-hang-count","~:parallel?","~:sort?","~:delay","^?K","~:object","^?U","~:arg1","~:none","~:reader-cond","~:rightmost","~:left"]],"~:order~:ns-specs",["^ "],"~:ns-spec-vars",["^M",[]],"~:compiler-options",["^30",[["^E3","~:static-fns"],true,["^E3","~:shadow-tweaks"],null,["^E3","~:elide-asserts"],false,["^E3","~:optimize-constants"],null,["^E3","^2S"],null,["^E3","~:external-config"],null,["^E3","~:tooling-config"],null,["^E3","~:emit-constants"],null,["^E3","~:load-tests"],null,["^E3","~:form-size-threshold"],null,["^E3","~:infer-externs"],true,["^E3","^2U"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^E3","~:fn-invoke-direct"],null,["^E3","~:source-map"],"/dev/null"]]]